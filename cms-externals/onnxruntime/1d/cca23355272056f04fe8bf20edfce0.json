{"additions": 45, "auther_ref": "shared-pointer-thread-safety", "auther_sha": "87d33436b8e1441be06dd22609ac313b569eeed4", "author": "dan131riley", "body": "**Description**: Use `std::atomic` specializations for modifying the `std::shared_ptr<void>` instance in `OrtValue`\r\n\r\n**Motivation and Context**\r\nonnxruntime can, at least as we are using it, modify the same shared pointer simultaneously in different threads.  This is not thread safe, but the problem will generally only manifest on platforms that implement relaxed memory models, such as the CERN techlab thunderX systems (but apparently not the Apple M1).  This PR modifies `OrtValue` to make all accesses to the underlying data thread-safe even in the case of simultaneous access to the same instance from different threads.\r\n\r\nHopefully resolves https://github.com/cms-sw/cmssw/issues/32899.\r\n\r\nI'd like to get this into the IBs to confirm the fix, after which I'll open an issue with the official onnxruntime repo.\r\n", "branch": "cms/v1.6.0", "changed_files": 1, "closed_at": "1618743327", "comments": 3, "commits": 2, "created_at": "1618426880", "deletions": 11, "labels": ["externals-pending", "orp-pending", "pending-signatures", "tests-pending"], "number": 5, "release-notes": [], "review_comments": 0, "state": "closed", "title": "OrtValue shared pointer thread safety", "updated_at": "1618743327", "user": "dan131riley"}