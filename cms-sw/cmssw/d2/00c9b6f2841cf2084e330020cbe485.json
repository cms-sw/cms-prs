{"additions": 92, "auther_ref": "ecal-gpu-unpacker-fix", "auther_sha": "e0853b1dce56c31083249be4b2465e609d32fdb1", "author": "thomreis", "body": "#### PR description:\r\n\r\nBackport of #37430 \r\n\r\nUp to now the ECAL GPU unpacker did not check the DCC tower headers consistency when using it. A corrupted header with tower block length extracted as 0 leads to an infinite loop.\r\n\r\nThis PR fixes this by first building a list of FE channels that are expected to contain data and checking the TT id extracted from the tower header against it. In case of a mismatch the tower block is skipped and the next good tower header is searched in the raw data. The unpacking then continues with the tower block with the next good header.\r\n\r\nThis PR fixes https://github.com/cms-sw/cmssw/issues/37323.\r\n\r\n#### PR validation:\r\n\r\nNo infinite loop anymore with the configuration and data described in https://github.com/cms-sw/cmssw/issues/37323.", "branch": "CMSSW_12_3_X", "changed_files": 1, "comments": 2, "commits": 1, "created_at": "1648826983", "deletions": 8, "labels": ["reconstruction-pending", "pending-signatures", "tests-pending", "orp-pending", "backport"], "milestone": "CMSSW_12_3_X", "number": 37435, "release-notes": [], "review_comments": 0, "state": "open", "title": "ECAL GPU unpacker - Add detection of corrupted DCC tower headers and recovery - backport 12_3_X", "updated_at": "1648828702", "user": "thomreis"}