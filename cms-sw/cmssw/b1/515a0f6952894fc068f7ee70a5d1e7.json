{"additions": 31, "auther_ref": "fix_VarParsing_listdefault", "auther_sha": "5089cc19ff62fa05a5b76e871dcb438933d47f09", "author": "IzaakWN", "body": "## PR description:\r\n\r\nThis PR patches the handling of defaults in `FWCore.ParameterSet.VarParsing` to prevent a `TypeError` for the case of an int/float/bool type in combination with `VarParsing.multiplicity.list`, where the default is a single int/float/bool value. This bug was described in https://github.com/cms-sw/cmssw/issues/44630:\r\n\r\nNote:\r\n* In order to prevent interfering with any workflows that might rely on the behavior of \"list of list\" defaults, this PR only prevents the `TypeError` with an if statement:\r\nhttps://github.com/IzaakWN/cmssw/blob/dbd4367723a9bcc29fcf308f2902896c2aabbc6e/FWCore/ParameterSet/python/VarParsing.py#L413-L418\r\n* This means that if a user wants to use as default a list of multiple int/float/bool values, they will still get a list of lists of those values, same as for strings... E.g., `[0,1]`  `[[0,1]]`.\r\n\r\n```python\r\nopts = VarParsing('standard')\r\n\r\nopts.register('myInts0`,  0,  VarParsing.multiplicity.list, VarParsing.varType.int) \r\n# before this PR: causes TypeError because len(int)\r\n# after this PR: yields list of (single) integer [0] as default\r\n\r\nopts.register('myInts1`, [0],  VarParsing.multiplicity.list, VarParsing.varType.int)\r\n# works because len(list)\r\n# yields list of list [[0]] as default\r\n\r\nopts.register('myInts2', [0,1],  VarParsing.multiplicity.list, VarParsing.varType.int)\r\n# works because len(list)\r\n# yields list of list [[0,1]] as default\r\n```\r\n\r\nTagging: @makortel\r\n\r\n\r\n## PR validation:\r\n\r\nI setup CMSSW as follows:\r\n```bash\r\nsource $VO_CMS_SW_DIR/cmsset_default.sh\r\nexport SCRAM_ARCH=\"el9_amd64_gcc12\"\r\nCMSSW=\"CMSSW_14_1_0_pre6\"\r\ncmsrel $CMSSW -n ${CMSSW}_varpars\r\ncd ${CMSSW}_varpars/src && cmsenv\r\ngit cms-addpkg FWCore/ParameterSet\r\n```\r\n\r\nTo test the behavior, I used this reproducible snippet in the `python3` command line:\r\n```python\r\nimport sys\r\nfrom FWCore.ParameterSet.VarParsing import VarParsing\r\n\r\ndef parse(argv):\r\n  print(f\">>> Parsing {argv!r}...\")\r\n  sys.argv = ['test.py','maxEvents=100']+argv\r\n  opts = VarParsing('standard')\r\n  print(\">>> Register...\")\r\n  def add(*args,**kwargs):\r\n    try:\r\n      print(f\">>>   {args!r}, {kwargs!r}...\")\r\n      opts.register(*args,**kwargs)\r\n    except Exception as err:\r\n      print(f\">>>   => {err!r}\")\r\n  add('myInts0',  '',      VarParsing.multiplicity.list, VarParsing.varType.int) # works because len(str)\r\n  add('myInts1',  0,       VarParsing.multiplicity.list, VarParsing.varType.int) # ERROR because len(int)\r\n  add('myInts2',  [0],     VarParsing.multiplicity.list, VarParsing.varType.int) # works because len(list)\r\n  add('myBools0', '',      VarParsing.multiplicity.list, VarParsing.varType.bool) # works because len(str)\r\n  add('myBools1', True,    VarParsing.multiplicity.list, VarParsing.varType.bool) # ERROR because len(bool)\r\n  add('myBools2', [True],  VarParsing.multiplicity.list, VarParsing.varType.bool) # works because len(list)\r\n  add('myStrs0',  '',      VarParsing.multiplicity.list, VarParsing.varType.string) # works because len(str)\r\n  add('myStrs1',  'foo',   VarParsing.multiplicity.list, VarParsing.varType.string) # works because len(str)\r\n  add('myStrs2',  ['foo'], VarParsing.multiplicity.list, VarParsing.varType.string) # works because len(list)\r\n  opts.parseArguments()\r\n  print(f\">>> Parsed:\")\r\n  for var in opts._lists:\r\n    if var.startswith('my'):\r\n      print(f\">>>   {var:6s} = {getattr(opts,var)!r}\")\r\n\r\nparse([ ])\r\nparse(['myInts1=0,1','myBools1=True,False','myStrs1=foo,bar','myStrs2=foo,bar'])\r\n```\r\n\r\nBefore the changes, there are `TypeErrors`:\r\n```python\r\n>>> parse([ ])\r\n>>> Parsing []...\r\n>>> Register...\r\n>>>   ('myInts0', '', 'multiplicity_list', '_int'), {}...\r\n>>>   ('myInts1', 0, 'multiplicity_list', '_int'), {}...\r\n>>>   => TypeError(\"object of type 'int' has no len()\")\r\n>>>   ('myInts2', [0], 'multiplicity_list', '_int'), {}...\r\n>>>   ('myBools0', '', 'multiplicity_list', '_bool'), {}...\r\n>>>   ('myBools1', True, 'multiplicity_list', '_bool'), {}...\r\n>>>   => TypeError(\"object of type 'bool' has no len()\")\r\n>>>   ('myBools2', [True], 'multiplicity_list', '_bool'), {}...\r\n>>>   ('myStrs0', '', 'multiplicity_list', '_string'), {}...\r\n>>>   ('myStrs1', 'foo', 'multiplicity_list', '_string'), {}...\r\n>>>   ('myStrs2', ['foo'], 'multiplicity_list', '_string'), {}...\r\n>>> Parsed:\r\n>>>   myInts0 = []\r\n>>>   myInts1 = []\r\n>>>   myInts2 = [[0]]\r\n>>>   myBools0 = []\r\n>>>   myBools1 = []\r\n>>>   myBools2 = [[True]]\r\n>>>   myStrs0 = []\r\n>>>   myStrs1 = ['foo']\r\n>>>   myStrs2 = [['foo']]\r\n>>> parse(['myInts1=0,1','myBools1=True,False','myStrs1=foo,bar','myStrs2=foo,bar'])\r\n>>> Parsing ['myInts1=0,1', 'myBools1=True,False', 'myStrs1=foo,bar', 'myStrs2=foo,bar']...\r\n>>> Register...\r\n>>>   ('myInts0', '', 'multiplicity_list', '_int'), {}...\r\n>>>   ('myInts1', 0, 'multiplicity_list', '_int'), {}...\r\n>>>   => TypeError(\"object of type 'int' has no len()\")\r\n>>>   ('myInts2', [0], 'multiplicity_list', '_int'), {}...\r\n>>>   ('myBools0', '', 'multiplicity_list', '_bool'), {}...\r\n>>>   ('myBools1', True, 'multiplicity_list', '_bool'), {}...\r\n>>>   => TypeError(\"object of type 'bool' has no len()\")\r\n>>>   ('myBools2', [True], 'multiplicity_list', '_bool'), {}...\r\n>>>   ('myStrs0', '', 'multiplicity_list', '_string'), {}...\r\n>>>   ('myStrs1', 'foo', 'multiplicity_list', '_string'), {}...\r\n>>>   ('myStrs2', ['foo'], 'multiplicity_list', '_string'), {}...\r\n>>> Parsed:\r\n>>>   myInts0 = []\r\n>>>   myInts1 = [0, 1]\r\n>>>   myInts2 = [[0]]\r\n>>>   myBools0 = []\r\n>>>   myBools1 = [True, False]\r\n>>>   myBools2 = [[True]]\r\n>>>   myStrs0 = []\r\n>>>   myStrs1 = ['foo', 'bar']\r\n>>>   myStrs2 = ['foo', 'bar']\r\n```\r\n\r\nAfter the changes, the `TypeErrors` are gone, and the single defaults are stored as a list of int/float/bool:\r\n```python\r\n>>> parse([ ])\r\n>>> Parsing []...\r\n>>> Register...\r\n>>>   ('myInts0', '', 'multiplicity_list', '_int'), {}...\r\n>>>   ('myInts1', 0, 'multiplicity_list', '_int'), {}...\r\n>>>   ('myInts2', [0], 'multiplicity_list', '_int'), {}...\r\n>>>   ('myBools0', '', 'multiplicity_list', '_bool'), {}...\r\n>>>   ('myBools1', True, 'multiplicity_list', '_bool'), {}...\r\n>>>   ('myBools2', [True], 'multiplicity_list', '_bool'), {}...\r\n>>>   ('myStrs0', '', 'multiplicity_list', '_string'), {}...\r\n>>>   ('myStrs1', 'foo', 'multiplicity_list', '_string'), {}...\r\n>>>   ('myStrs2', ['foo'], 'multiplicity_list', '_string'), {}...\r\n>>> Parsed:\r\n>>>   myInts0 = []\r\n>>>   myInts1 = [0]\r\n>>>   myInts2 = [[0]]\r\n>>>   myBools0 = []\r\n>>>   myBools1 = [True]\r\n>>>   myBools2 = [[True]]\r\n>>>   myStrs0 = []\r\n>>>   myStrs1 = ['foo']\r\n>>>   myStrs2 = [['foo']]\r\n>>> parse(['myInts1=0,1','myBools1=True,False','myStrs1=foo,bar','myStrs2=foo,bar'])\r\n>>> Parsing ['myInts1=0,1', 'myBools1=True,False', 'myStrs1=foo,bar', 'myStrs2=foo,bar']...\r\n>>> Register...\r\n>>>   ('myInts0', '', 'multiplicity_list', '_int'), {}...\r\n>>>   ('myInts1', 0, 'multiplicity_list', '_int'), {}...\r\n>>>   ('myInts2', [0], 'multiplicity_list', '_int'), {}...\r\n>>>   ('myBools0', '', 'multiplicity_list', '_bool'), {}...\r\n>>>   ('myBools1', True, 'multiplicity_list', '_bool'), {}...\r\n>>>   ('myBools2', [True], 'multiplicity_list', '_bool'), {}...\r\n>>>   ('myStrs0', '', 'multiplicity_list', '_string'), {}...\r\n>>>   ('myStrs1', 'foo', 'multiplicity_list', '_string'), {}...\r\n>>>   ('myStrs2', ['foo'], 'multiplicity_list', '_string'), {}...\r\n>>> Parsed:\r\n>>>   myInts0 = []\r\n>>>   myInts1 = [0, 1]\r\n>>>   myInts2 = [[0]]\r\n>>>   myBools0 = []\r\n>>>   myBools1 = [True, False]\r\n>>>   myBools2 = [[True]]\r\n>>>   myStrs0 = []\r\n>>>   myStrs1 = ['foo', 'bar']\r\n>>>   myStrs2 = ['foo', 'bar']\r\n```\r\n\r\n## PR tests\r\n\r\nFollowing https://cms-sw.github.io/PRWorkflow.html, I did:\r\n```\r\nscram b distclean \r\ngit cms-checkdeps -a -A # adds 17 other packages..\r\nscram b -j 8\r\nscram b runtests\r\n```\r\nAs `VarParsing` is used by many python configuration scripts, `git cms-checkdeps -a -A ` will add 17 additional packages. Not all test are successful, but I checked the same tests fail in a CMSSW project without any changes. As far as I can tell the failures do not come from my side. I assume no workflow contains an exception for the `TypeError` above.", "branch": "master", "changed_files": 3, "comments": 7, "commits": 2, "created_at": "1722866731", "deletions": 2, "labels": ["core-pending", "pending-signatures", "orp-pending", "tests-started", "code-checks-approved"], "milestone": "CMSSW_14_1_X", "number": 45640, "release-notes": [], "review_comments": 0, "state": "open", "title": "VarParsing: prevent TypeError for default of int/float/bool list", "updated_at": "1723059665", "user": "IzaakWN"}