{"additions": 1, "auther_ref": "gartung-Utilities-StaticAnalyzer-update", "auther_sha": "daf4a48b33976e9f1be20de3f1364e1e0bafe4d3", "author": "gartung", "body": "```\r\nHi Patrick,\r\n\tThe algorithm we are using to do the static analysis checks for modules is generally very helpful. I have found a case where it is giving a false positive and was wondering if you could update the code to avoid that case? An example is\r\n\r\nIn call stack '  CompareGeneratorResultsAnalyzer::globalBeginLuminosityBlock() const calls function  edm::LuminosityBlock::get<class GenLumiInfoHeader>() const calls function  edm::PrincipalGetAdapter::getByToken_() const calls function  edm::Principal::getByToken() const calls function  edm::ProductResolverBase::resolveProduct() const calls function  edm::ProductResolverBase::resolveProduct_() const virtual calls function  edm::UnscheduledProductResolver::resolveProduct_() const calls function  edm::Worker::doWork<class edm::OccurrenceTraits<class edm::EventPrincipal, BranchActionStreamBegin>>() calls function  edm::Worker::runModule<class edm::OccurrenceTraits<class edm::EventPrincipal, BranchActionStreamBegin>>() calls function  edm::workerhelper::CallImpl<edm::OccurrenceTraits<edm::EventPrincipal, BranchActionStreamBegin> >::call() calls function  edm::Worker::implDo() virtual calls function  edm::WorkerT<edm::one::OutputModuleBase>::implDo() calls function  edm::one::OutputModuleBase::doEvent() calls function  edm::one::OutputModuleBase::write() virtual calls function  RawEventOutputModuleForBU::write() calls function  crc32c() calls function  crc32c_hw() static variable  crc32c_long' is accessed , 'CompareGeneratorResultsAnalyzer::globalBeginLuminosityBlock() const' overrides 'edm::global::impl::LuminosityBlockCacheHolder<edm::global::EDAnalyzerBase, cgra::DummyCache>::globalBeginLuminosityBlock() const virtual'\r\n\r\nThe false positive comes from the chain where a particular virtual function could theoretically be called, but in reality never is:\r\n\r\nedm::PrincipalGetAdapter::getByToken_() const calls function  edm::Principal::getByToken() const calls function  edm::ProductResolverBase::resolveProduct() const calls function  edm::ProductResolverBase::resolveProduct_() const virtual calls function  edm::UnscheduledProductResolver::resolveProduct_() ...\r\n\r\nMy suggestion is to filter out any call chain containing edm::Principal::getByToken().\r\n\r\n\tThanks,\r\n\t\tChris\r\n```", "branch": "master", "changed_files": 1, "closed_at": "1591679882", "comments": 13, "commits": 1, "created_at": "1591617802", "deletions": 1, "labels": ["code-checks-approved", "comparison-available", "core-approved", "fully-signed", "orp-approved", "tests-approved"], "merge_commit_sha": "e659379992abb661215f6da4f02a4d380e88298b", "merged_at": "1591679882", "merged_by": "cmsbuild", "milestone": "CMSSW_11_2_X", "number": 30146, "release-notes": [], "review_comments": 3, "state": "closed", "title": "Add edm::Principal::getByToken to skipped functions regex", "updated_at": "1591679882", "user": "gartung"}