{"additions": 164, "auther_ref": "SoA_range_checking", "auther_sha": "f8897a331db4e6e024b3e27f9ee2324a06a0a306", "author": "ericcano", "body": "#### PR description:\r\n\r\nThis PR adds copy and construction compatibility between `View`s and `ConstView`s (respectively, no const evasion was created) with different template parameters. This allows compile time switching to the range checking variant for debugging. The `View`s are usually used from the `PortableCollections` (and are non range checking). Changing the signature or a function or kernel to use the range checking variant simply requires a type definition change and the creation of a translating variable at the kernel call. The program will then half immediately on range violation.\r\n\r\n#### PR validation:\r\n\r\nThe copy and construction are now validated in a test, as part of this PR. I addition this feature was used and validated to debug an actual out of range error during module debugging.", "branch": "master", "changed_files": 4, "comments": 19, "commits": 8, "created_at": "1686576758", "deletions": 47, "labels": ["pending-signatures", "tests-pending", "orp-pending", "code-checks-approved", "heterogeneous-pending"], "milestone": "CMSSW_14_0_X", "number": 41928, "release-notes": [], "review_comments": 6, "state": "open", "title": "SoA range checking: adds inter operability between range checked and non range checked", "updated_at": "1707210655", "user": "ericcano"}