{"additions": 772, "auther_ref": "streamBeginLumiExceptionBehavior", "auther_sha": "8f24b4bfbeb154a7091c4fd8c610e0c204a927e7", "author": "wddgit", "body": "#### PR description:\r\n\r\nImprove the behavior of the Framework after stream begin/end lumi exceptions. This is the first in a series of PRs where we plan to make the behavior after exceptions more consistent in all the begin/end transitions.\r\n\r\nThe intent is that nothing in the output will change if there are not any exceptions.\r\n\r\nThis work was motivated by discussions related to Issues #43831  and #42501.\r\n\r\nThe core group has discussed this. The following is the behavior we plan to implement in all the begin/end transitions eventually. I think this is consistent with our previous discussions with some extra details added that were fleshed out as this PR was implemented:\r\n\r\n   1. For a stream begin transition (of any type, run/lumi/processBlock/top level), the Framework will try to execute all modules (possibly concurrently) and continues executing them all even if one or more of the modules throws. The same is true for stream end transitions except if a module in a begin transition throws an exception in a pre module signal, the module itself, or a post module signal, then the corresponding end transition for that module will not execute. This is all also true for global transitions except that a module that depends on a product produced by a module that threw an exception (directly or indirectly) will not execute.\r\n\r\n   2. For both stream and global transitions, EventSetup prefetching throwing an exception could cause a module to\r\nnot be executed.\r\n\r\n   3. If and only if there will be an attempt to execute the module, the pre module and post module signals will execute. If the pre module signal throws, then module does not execute but the post signal executes anyway. If the module throws, then the post signal executes anyway.\r\n\r\n   4. If there is any attempt to run a transition at all, then all 4 of the non-module signals will execute (pre and post begin,\r\npre and post end). Note that streams might entirely skip the transitions associated with a specific lumi (and in the future\r\nthis behavior might be extended to runs also). If a stream skips a lumi (or run), then none of the signals is executed and\r\nthe modules will not be run. This skipping might occur if another stream has process the last event or thrown an exception (although it might not skip because the notification of this has to propagate to the right location before the stream starts the lumi or run, once a stream starts it keeps going).\r\n\r\n   5. If the pre begin signal throws, the  modules begin and end functions are not executed. If the post begin signal throws, the module begin functions may have already run (too late to stop them). It will attempt to run the end module functions for any modules that succeeded with their begin functions (and begin module signals). If the pre end signal throws, none of the module end functions is executed.\r\n\r\n   6. If an exception occurs, notification of that is propagated and when it gets to the WaitingTaskHolder created in the\r\nprocessRuns function, then new runs and lumis and new events will not be started. Before that propagation is complete,\r\nstreams other than the one experiencing the exception might or might not start subsequent runs, subsequent lumis, or subsequent events (they could get ahead because the other streams are already ahead when the exception is thrown or just because of the time for the flag to propagate, in general this is not predictable or reproducible). Also note that if an exception occurs during stream end lumi, the stream where the exception occurs would have already started the next run and/or next lumi before the exception occurs.\r\n\r\n   7. At endStream and endJob, all exceptions are collected and printed. At other transitions, only the first exception is collected and printed. It is more likely in these cases that the first exception is interesting and the rest are just side effects of the first exception and cause confusion rather than aid debugging.\r\n\r\n   8. If one service throws while a signal is handled, the Framework continues trying to run all the other services and will report the first exception.\r\n\r\n   9. The global write transitions do not occur at all if the global begin transition did not succeed.\r\n\r\n#### PR validation:\r\n\r\nAn existing unit test covering exceptions in different transitions is extended to cover the most salient cases. Additional manual testing of many various cases was also done. Existing unit tests pass.\r\n", "branch": "master", "changed_files": 15, "comments": 14, "commits": 1, "created_at": "1712252357", "deletions": 69, "labels": ["core-pending", "pending-signatures", "tests-pending", "orp-pending", "code-checks-pending"], "milestone": "CMSSW_14_1_X", "number": 44624, "release-notes": [], "review_comments": 12, "state": "open", "title": "Improve behavior after exception in begin/end stream lumi", "updated_at": "1712346767", "user": "wddgit"}