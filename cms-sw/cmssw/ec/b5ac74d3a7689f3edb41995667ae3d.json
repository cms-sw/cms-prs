{"additions": 214, "auther_ref": "DQM_locking_MonitorElement", "auther_sha": "075c9f8ace637530c35b7fd3df2b16a618b5d77b", "author": "fwyzard", "body": "Currently the `MonitorElement` uses a `recursive_mutex` to lock the underlying ROOT objects, because many methods need to call other methods.\r\n\r\nTODO\r\n  - extend the interface of the `MonitorElement` class so that the `public` methods should always acquire lock, while the `private` methods do not;\r\n  - change from `std::recursive_mutex` to the `std::mutex` type\r\n  - let the `DQMService` use the non-locking methods when it knows from the context that it has exclusive access\r\n", "branch": "master", "changed_files": 6, "closed_at": "1512047220", "comments": 19, "commits": 4, "created_at": "1502709634", "deletions": 70, "labels": ["code-checks-rejected", "comparison-notrun", "dqm-pending", "new-feature", "orp-pending", "pending-signatures", "tests-rejected"], "milestone": "CMSSW_10_0_X", "number": 20158, "release-notes": [], "review_comments": 19, "state": "closed", "title": "make MonitorElement::getTH...() methods return a smart pointer that locks around all method invocations", "updated_at": "1512047220", "user": "fwyzard"}