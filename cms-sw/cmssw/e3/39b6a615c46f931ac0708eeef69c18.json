{"additions": 23, "auther_ref": "CMSSW_16_0_0_pre1/lst013-innermod", "auther_sha": "50081604f60bbcc9728437e5ee56213cfd7dae66", "author": "slava77", "body": "In the LST minidoublet reconstruction the angular compatibility of the hits on the doublet layers is done using adjusted/shifted hit position relative to the reference (P-side if available) side.\r\nThe hit shifting logic (sketched below) is supposed to line up the S-side hit along the strip direction to match the line of sight going from (0,0) through the P-side hit\r\n<img width=\"894\" height=\"672\" alt=\"image\" src=\"https://github.com/user-attachments/assets/b96abce3-7fbc-4196-b2ae-893e53ae1a68\" />\r\n\r\nI found an issue while looking at a tilted module case: if the P-side is not globally lower/inner the code flips P<->S. This PR corrects this issue.\r\n\r\noriginal: the \"lower\" module is P-side and is also not globally lower/inner: the code flips P<->S\r\n```\r\np x 19.6700 y 14.4307 a x 19.8194 y 14.5170  .. is supposed to be \"pixel\", but uses strip inputs\r\no x 19.8826 y 14.5303 n x 19.8294 y 14.4997  .. strip\r\n   != Center dPhiC -0.22 -0.19 vs 0.20 lowerP 1  FAIL  {simhit dPhiC = 26./86/2/0.93 = 0.16}\r\n lower: x 19.8826 y 14.5303 r 24.6262 z 27.6442 shifted: x 19.8294 y 14.4997 r 24.5651 z 27.5069\r\n\tsimhit: x 19.8719 y 14.5284 r 24.6164 z 27.6539\r\n upper: x 19.6700 y 14.4307 r 24.3957 z 27.5069 shifted: x 19.8294 y 14.4997 r 24.57 z 27.51   // here shiftedZ := zUpper\r\n\tsimhit: x 19.7131 y 14.4457 r 24.4394 z 27.4651  {is physically lower, earlier}\r\n```\r\n\r\nafter: `p` is properly the pixel \r\n```\r\np x 19.8826 y 14.5303 a x 19.7328 y 14.4439 \r\no x 19.6700 y 14.4307 n x 19.7228 y 14.4612\r\n   != Center dPhi 0.00 0.00 vs 0.20\r\n   != Center dPhiC -0.22 -0.19 vs 0.20 lowerP 1  <== the shift essentially commutes. \r\n lower: x 19.8826 y 14.5303 r 24.6262 z 27.6442 shifted: x 19.7228 y 14.4612 r 24.4563 z 27.5069\r\n upper: x 19.6700 y 14.4307 r 24.3957 z 27.5069 shifted: x 19.7228 y 14.4612 r 24.4563 z 27.5069\r\n```\r\n\r\nhopefully the confusion between the naming `isLower` which is not strictly lower will get reduced by adding `isGloballyInner` at least where it's needed.\r\n\r\nThis PR also fixes a bug in dPhi computation for the (tilted) modules where the P-side is not on the \"isLower\" module in the stack: here the old code would compute dPhi with respect to the same side of the doublet module.\r\n\r\nThe LST CI shows that the final performance differences are rather small\r\n<img width=\"996\" height=\"1847\" alt=\"image\" src=\"https://github.com/user-attachments/assets/766b218b-4116-49fc-91de-83505d063253\" />\r\n", "branch": "master", "changed_files": 3, "closed_at": "1761329403", "comments": 9, "commits": 1, "created_at": "1761250318", "deletions": 7, "labels": ["reconstruction-approved", "fully-signed", "tests-approved", "orp-approved", "code-checks-approved", "tracking"], "merge_commit_sha": "f77e09c72064a71cfb5f1c2b99374aed48c56759", "merged_at": "1761329403", "merged_by": "cmsbuild", "milestone": "CMSSW_16_0_X", "number": 49206, "release-notes": [], "review_comments": 0, "state": "closed", "title": "LST: define Module isGloballyInner flag and use it to define the reference shift in the minidoublets", "updated_at": "1761329404", "user": "slava77"}