{"additions": 732, "auther_ref": "photon_rebase2", "auther_sha": "c8484f967bc79ed897a0e046832513f74eb14da5", "author": "ssrothman", "body": "#### PR description:\r\n\r\nThis PR builds on our previous PR #35839 and contains the code to apply our Dynamic Reduction Network (DRN) energy regression for electron and photon objects. The target for this round of code is to apply our new energy corrections to photons in the AOD -> miniAOD step run on Tier 2. This PR also contains the identical code to do the same for electrons, but the electron regression has not been enabled pending the addition of the necessary ECAL/tracker energy combination. This will the the subject of a separate future PR. \r\n\r\nThe regression is computed with the SonicTriton service, requiring the top-level producer to use the ExternalWork interface and inherit from TritonEDProducer rather than EDProducer. We therefore decided to split the computation and application of the regression in order to avoid having to make modifications to the existing photon/electron producers. This PR consists of two main c++ objects:\r\n - DRNCorrectionProducertT<> is a template class that can produce the DRN energy corrections for reco:: or pat:: electrons or photons. This producers a ValueMap of std::pair<float, float> with the per-object predictions of the energy and the energy resolution. \r\n - EGRegressionModifierDRN extends ModifyObjectValueBase and consumes the ValueMap produced by the DRNCorrectionProducer to apply the regression. This modifier should work as a drop-in replacement for the existing EGRegressionModifierVX objects. \r\n\r\nThe regression can be enabled in a miniAOD workflow with the modifier in PhysicsTools/PatAlgos/python/slimming/enableDRN.py\r\n\r\nThe regression config file and weights are intended to be hosted on git cms-data, and will be the subject of an upcoming PR there. Until that time, they may be found at https://github.com/ssrothman/RecoEgamma.EgammaPhotonProducers.TritonModels\r\n\r\nA summary of our new energy regression and the novel ML architecture underlying it can be found [here](https://indico.cern.ch/event/1100468/#5-recent-developments-in-high). \r\n\r\n#### PR validation:\r\n\r\nValidation of this PR has been performed by enabling the DRN with the included modifier on top of a standard 2018UL AOD->miniAOD config, as can be found in PhysicsTools/PatAlgos/test/DRNtest_Hgg.py. We have performed testing on two samples: a ggH->gamma gamma sample (enabled in the included test config) and a ttH sample (/TTJets_TuneCP5_13TeV-amcatnloFXFX-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM). On both samples we have run our regression on 10,000 events and examined the computational and physics performance of our PR. \r\n\r\nPhysics Performance:\r\n\r\nWe have validated that our producer yields identical output to the standalone python code used for training and validation of our model (e.g. as seen in the slides linked above). In addition, we have checked this performance on the two samples mentioned above. Histograms of the predicted energy divided by the gen energy for photons in these samples for both our regression and the existing 2018UL BDT regression are here:\r\n\r\n![Hgg](https://user-images.githubusercontent.com/69219800/156619634-865f9384-c7ed-4df9-9972-64ed78dc86b0.png)\r\n![ttH](https://user-images.githubusercontent.com/69219800/156619646-9c71e426-d93d-4857-921c-56dcb50baae7.png)\r\n\r\nComputational Performance:\r\n\r\nOn both samples we have profiled the computational performance of our model by enabling the TimerService and by monitoring resource usage in top. The overall performance picture is identical in both samples. These tests were performed on interactive nodes at LPC and therefore there was substantial variance in the absolute speed of the test workflow, but in all cases we observed that the DRN regression accounted for about 8% of the total event time in this AOD->miniAOD workflow. For a typical run, this is something like 40ms out of a total event time of 600ms. This is within expected parameters, and it is our understanding that ParticleNet (a similar architecture) takes a similar amount of time to run. While our test workflow was running, we observed a typical CPU utilization in top of ~100% by the cmsRun process and an additional utilization of ~20% by the SonicTriton process. \r\n\r\nWe have also included a unit test in PhysicsTools/PatAlgos/test\r\n\r\n#### if this PR is a backport please specify the original PR and why you need to backport that PR:\r\n\r\nNA\r\n\r\nBefore submitting your pull requests, make sure you followed this checklist:\r\n- verify that the PR is really intended for the chosen branch\r\n- verify that changes follow [CMS Naming, Coding, And Style Rules](http://cms-sw.github.io/cms_coding_rules.html)\r\n- verify that the PR passes the basic test procedure suggested in the [CMSSW PR instructions](https://cms-sw.github.io/PRWorkflow.html)\r\n\r\n@Sam-Harper @lgray @kpedro88 @rchatter @lfinco @swagata87 @jainshilpi @SohamBhattacharya @simonepigazzini @violatingcp", "branch": "master", "changed_files": 11, "comments": 77, "commits": 42, "created_at": "1646325593", "deletions": 0, "labels": ["operations-pending", "reconstruction-approved", "pending-signatures", "tests-approved", "orp-pending", "pdmv-pending", "upgrade-approved", "requires-external", "code-checks-approved", "egamma"], "milestone": "CMSSW_12_4_X", "number": 37134, "release-notes": [], "review_comments": 59, "state": "open", "title": "Dynamic Reduction Network for photon energy regression in miniAOD using the SonicTriton service", "updated_at": "1650980590", "user": "ssrothman"}