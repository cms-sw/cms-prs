{"additions": 15, "auther_ref": "enable_additional_code_checks", "auther_sha": "5a6dc7f951d8a4dd106febfa44f93599955ec7ba", "author": "fwyzard", "body": "### `performance-faster-string-find`:\r\nOptimize calls to std::string::find() and friends when the needle passed is a single character string literal.\r\n\r\n### `performance-for-range-copy`:\r\nFinds C++11 for ranges where the loop variable is copied in each iteration but it would suffice to obtain it by const reference.\r\n\r\n### `performance-implicit-conversion-in-loop`:\r\nThis warning appears in a range-based loop with a loop variable of const ref type where the type of the variable does not match the one returned by the iterator. This means that an implicit conversion happens, which can for example result in expensive deep copies.\r\n\r\n### `performance-inefficient-algorithm`:\r\nWarns on inefficient use of STL algorithms on associative containers.\r\n\r\n### `performance-inefficient-vector-operation`:\r\nFinds possible inefficient std::vector operations (e.g. push_back, emplace_back) that may cause unnecessary memory reallocations.\r\n\r\n### `performance-move-const-arg`:\r\nWarn about inefficient use of std::move, and suggest a fix that removes it.\r\n\r\n### `performance-unnecessary-copy-initialization`:\r\nFinds local variable declarations that are initialized using the copy constructor of a non-trivially-copyable type, where it would suffice to obtain a const reference.\r\n\r\n### `performance-unnecessary-value-param`:\r\nFlags value parameter declarations of expensive to copy types that are copied for each invocation, where it would suffice to pass them by const reference.\r\n\r\n### `modernize-make-unique`:\r\nFinds the creation of std::unique_ptr objects explicitly calling a new expression, and replaces it with a call to std::make_unique.\r\n\r\n### `modernize-loop-convert`:\r\nThis check converts for(...; ...; ...) loops to use the new range-based loops in C++11.\r\nThe `MinConfidence` option was already set to \"reasonable\".\r\n\r\n### `modernize-use-auto`:\r\nUse the auto type specifier for variable declarations to improve code readability and maintainability.\r\nThe `MinTypeNameLength` option is set to 16 characters.\r\n\r\n### `modernize-use-emplace`:\r\nThe check flags insertions to an STL-style container done by calling the push_back method with an explicitly-constructed temporary of the container element type. In this case, the corresponding emplace_back method results in less verbose and potentially more efficient code.", "branch": "master", "changed_files": 1, "closed_at": "1594738572", "comments": 17, "commits": 2, "created_at": "1589617618", "deletions": 0, "labels": ["code-checks-approved", "comparison-pending", "core-pending", "orp-pending", "pending-signatures", "tests-pending"], "milestone": "CMSSW_11_2_X", "number": 29858, "release-notes": [], "review_comments": 0, "state": "closed", "title": "Enable additional code checks", "updated_at": "1594738575", "user": "fwyzard"}