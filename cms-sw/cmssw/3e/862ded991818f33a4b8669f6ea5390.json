{"additions": 1101, "auther_ref": "switchProducerAlias", "auther_sha": "95d0376179b11503b5a4d171f4ec399517e67d92", "author": "makortel", "body": "In a heterogeneous workflow it may happen that the (legacy) CPU and non-CPU modules are naturally defined so differently that the final legacy CPU products are produced in a very asymmetric way (e.g.\r\n* CPU: producer `A` produces `a1`, `a2`, producer `B` produces `b1\r\n* non-CPU: producer `D` produces `a1`, producer `C` produces `a2` and `b1`\r\n\r\n). In order to be able to handle such cases flexibly and efficiently, this PR extends the SwitchProducer mechanism to allow EDAliases as cases (in addition to EDProducers). This required first some fixes to EDAliases:\r\n* Throw if an EDAlias defines two instances pointing to the same real product\r\n   * Currently the OutputModule will complain if an alias and the alias-for branches are attempted to be kept. This check does not work with SwitchProducer, whose output branches are not exactly alias branches (even if they're very close to). The premise is that it does not make sense to have both the alias and alias-for branches.\r\n* If a job has an unscheduled EDProducer that registers a callback for new product registration such that the callback calls `produces()`, and that callback gets triggered by EDAlias (output) BranchDescriptions, the EDProducer BranchDescriptions have an incorrect on-demand status leading to a wrong ProductResolver and eventually a job to hang because of starvation in the TBB scheduler. This situation happens because the on-demand status for EDProducer BranchDescriptions is set before the EDAliases are processed in the Schedule. The fix is to move the setting of the on-demand status of BranchDescriptions to be done after the EDAlias output BranchDescriptions have been created.\r\n  * The setting is also a bit more efficient now that it is done once instead of once per stream\r\n* Made the python `EDAlias` cloneable and to inherit from `_Parameterizable`\r\n  * Latter reduces copy-paste and enables `Modifier.toReplaceWith()`\r\n\r\nAdding the support for EDAlias cases in SwitchProducer required the following changes\r\n* SwitchProducer ProductResolvers can be set only after all EDAlias ProductResolvers have been set\r\n* Added a new (intermediate) base class `DataManagingOrAliasProductResolver`, from which the `DataManaging`, `Alias`, and `SwitchBase` ProductResolvers inherit from, in order to be able use both `DataManaging` and `Alias` ProductResolvers as the `realProduct` in `SwitchBaseProductResolver`\r\n* Added a special treatment for SwitchProducer in `ProductSelector` to detect the case when one attempts to keep in OutputModule both the real product, and the EDAlias-within-SwitchProducer. Similar check is already done for regular EDAliases (as mentioned above)\r\n  * The same check does not work for SwitchProducers because there the `BranchID` of the SwitchProducer and the case product/alias are different, while in case of EDAlias the `BranchID` of the alias and the alias-for product as the same.\r\n* In python `Process`, separate `SwitchProducers` from the normal `EDProducers`. This change is needed in order to append elements to both `@all_modules` and `@all_aliases` `vstring`s when filling the ProcessDescription. This way the case-EDAlias can away from the `Process.aliases_()` (as the case-EDProducers are not in `Process.producers_()`).\r\n* As an additional sanity check, mark all case BranchDescriptions as transient in order to ignore them in OutputModule keep statements like `keep *_foo*_*_*`.\r\n  * I also tried to \"implicitly drop\" all branches with '@' in `ProductSelector`, but that lead to SwitchProducer branches being dropped on inputs as they would be interpreted as branches depending on a dropped branch.\r\n\r\nThis PR also adds a generic mechanism to allow customized configuration entities to pass import statements to configuration dump. Related, currently the case-producer fragments end up in the configuration dump while they should not, this PR fixes that (as a byproduct).\r\n\r\n\r\nTested in CMSSW_10_5_X_2019-02-08-1100, no changes expected in current workflows.", "branch": "master", "changed_files": 33, "closed_at": "1550656497", "comments": 68, "commits": 13, "created_at": "1549899117", "deletions": 279, "labels": ["code-checks-approved", "comparison-available", "core-approved", "orp-approved", "pending-signatures", "simulation-pending", "tests-rejected"], "merge_commit_sha": "4fd4ff516e52a2314d2ded86264386a47de88483", "merged_at": "1550656497", "merged_by": "cmsbuild", "milestone": "CMSSW_10_5_X", "number": 25907, "release-notes": [], "review_comments": 4, "state": "closed", "title": "Add support for EDAlias as a case in SwitchProducer", "updated_at": "1550656498", "user": "makortel"}