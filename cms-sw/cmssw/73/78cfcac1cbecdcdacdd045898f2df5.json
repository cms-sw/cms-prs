{"additions": 445, "auther_ref": "stripclusterizerspeedup28304_technical", "auther_sha": "24e1b8c59f5dee5200ec1f98f576cc0dc8524740", "author": "pieterdavid", "body": "#### PR description:\r\n\r\nThis PR contains the technical changes from https://github.com/cms-sw/cmssw/pull/28304 by @VinInn , i.e. those other than the new unpacker+clusterizer module and the use of the averaged noise per APV (rather than per strip), which need some more study and validation still (I did keep the changes to make the code that uses SiStripCluster independent of the amplitudes vector type because it makes future changes easier).\r\n\r\nI also reorganised the `StripClusterizer` class a bit: the version currently in CMSSW caches indices of the quality, noise, and gain ranges etc. in a few vectors, and creates a helper object with all the information for one module when needed. #28304 added caching of all those per-module objects and pre-calculation of 1/gain (such that the gain calibration is a multiplication instead of a division) and the average noise per module (not included here) - I kept this, but then removed the vectors from `StripClusterizer` since they are not needed anymore, and moved all of this to the EventSetup to avoid having a copy for every stream.\r\nThis is where I have a few questions: is `SiStripClusterizerConditions` a reasonable name for that object? I kept the header in `RecoLocalTracker/SiStripClusterizer` and put the record in `RecoLocalTracker/Records` by analogy with the CPE, but I'm not sure these are the recommended places. Another option is to move the whole clusterizer tool to the EventSetup (like the CPE).\r\n\r\nOn the performance gain: in local tests in a rather unrealistic setup (only running strip local reco, so the limitation is IO and (de)compression) the full clusterizer seems a bit faster (that's also expected), but the numbers are not very reproducible (if there are instructions or tools to do proper benchmarking please let me know). Allocation and deallocation per event are a bit higher, but the difference is the same, so I suppose this is because of the `reserve` calls (the number of allocations should be smaller).\r\n\r\n#### PR validation:\r\n\r\nI dumped all reconstructed clusters in 5 data events (279076 in total) and found three digis that were different by 1 (probably due to numerical precision and truncation/rounding after applying the gain), charge/CM and noise squared (cuts in the clusterizer) are identical for all.\r\n\r\nCC: @VinInn @vischia @robervalwalsh ", "branch": "master", "changed_files": 35, "closed_at": "1593538286", "comments": 126, "commits": 15, "created_at": "1590760583", "deletions": 458, "labels": ["alca-approved", "code-checks-approved", "comparison-available", "db-approved", "dqm-approved", "fully-signed", "hlt-approved", "orp-approved", "reconstruction-approved", "tests-approved"], "merge_commit_sha": "b0ddd4e29c3f1b1e04ce77cdb7d49d15098f46b1", "merged_at": "1593538286", "merged_by": "cmsbuild", "milestone": "CMSSW_11_2_X", "number": 30046, "release-notes": [], "review_comments": 8, "state": "closed", "title": "Strip clusterizer speedup: technical changes from #28304", "updated_at": "1593538286", "user": "pieterdavid"}