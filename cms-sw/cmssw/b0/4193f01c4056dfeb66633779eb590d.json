{"additions": 1, "auther_ref": "devel_fixKineParticleFilter", "auther_sha": "c61b46b53c1bb2651129bb7b07550feded76ad51", "author": "missirol", "body": "#### PR description:\r\n\r\nThis PR is meant to fix a problem in a Jet/MET analysis workflow.\r\n\r\nThe current procedure to derive the so-called PF-Hadron Calibrations (for Offline and HLT) relies on the `PFSimParticleProducer`, which in turn makes use of `PFSimBaseEvent` and related utilities.\r\n\r\nFor a non-negligible amount of events, `PFSimParticleProducer` crashes with the following error message\r\n```\r\n----- Begin Fatal Exception [...]-----------------------\r\nAn exception of category 'FastSim' occurred while\r\n   [0] Processing  Event run: 1 lumi: 2757 event: 2756952 stream: 0\r\n   [1] Running path 'pfSimParticlePath'\r\n   [2] Calling method for module PFSimParticleProducer/'particleFlowSimParticle'\r\nException Message:\r\nIndex for FSimVertex out of range, please contact FastSim developers\r\n----- End Fatal Exception ------------------------------\r\n```\r\n\r\nThis error was already reported in previous years, apparently without a clear solution:\r\nhttps://indico.cern.ch/event/673246/contributions/2757878/attachments/1541980/2418599/JMEHLTX-POG.pdf\r\nhttps://hypernews.cern.ch/HyperNews/CMS/get/eflow/1011/1/1.html\r\nhttps://hypernews.cern.ch/HyperNews/CMS/get/famos/687.html\r\n\r\nSome debugging [*] led to the update in this PR, which fixes the issue.\r\n\r\nFYI: @lathomas @kirschen @hatakeyamak @bendavid @pallabidas\r\n\r\n------------\r\n\r\n[*] More debugging information.\r\n\r\nThe crash occurs in `FBaseSimEvent`, and was caused by instances where\r\n\r\n * `KineParticleFilter::acceptVertex` would fail (return `false`)\r\n   https://github.com/cms-sw/cmssw/blob/03dd22b632c7c8b384a515c5fc1937de77470afe/FastSimulation/Event/src/KineParticleFilter.cc#L59\r\n   and this would cause the vertex-id in\r\n   https://github.com/cms-sw/cmssw/blob/03dd22b632c7c8b384a515c5fc1937de77470afe/FastSimulation/Event/src/FBaseSimEvent.cc#L178\r\n   to be `-1`\r\n   https://github.com/cms-sw/cmssw/blob/03dd22b632c7c8b384a515c5fc1937de77470afe/FastSimulation/Event/src/FBaseSimEvent.cc#L529\r\n\r\n * in the ensuing call to `FBaseSimEvent::addSimTrack`\r\n   https://github.com/cms-sw/cmssw/blob/03dd22b632c7c8b384a515c5fc1937de77470afe/FastSimulation/Event/src/FBaseSimEvent.cc#L199\r\n   `KineParticleFilter::acceptParticle` would return `true`\r\n   https://github.com/cms-sw/cmssw/blob/03dd22b632c7c8b384a515c5fc1937de77470afe/FastSimulation/Event/src/FBaseSimEvent.cc#L487\r\n   because of\r\n   https://github.com/cms-sw/cmssw/blob/03dd22b632c7c8b384a515c5fc1937de77470afe/FastSimulation/Event/src/KineParticleFilter.cc#L37\r\n\r\n * and, ultimately, the crash would occur here, because of `iv` being `-1`\r\n   https://github.com/cms-sw/cmssw/blob/03dd22b632c7c8b384a515c5fc1937de77470afe/FastSimulation/Event/src/FBaseSimEvent.cc#L498\r\n\r\nIn summary, it seems that, when `KineParticleFilter::acceptVertex` returns `false`, then `KineParticleFilter::acceptParticle` should also return `false` for particles associated to that vertex. When this is not the case (i.e. without the suggested fix), the logic in `FBaseSimEvent` starts to break.\r\n\r\n------------\r\n\r\n#### PR validation:\r\n\r\nPrivate tests on the affected JME workflow.\r\n\r\n#### if this PR is a backport please specify the original PR and why you need to backport that PR:\r\n\r\nN/A (no backport planned)\r\n", "branch": "master", "changed_files": 1, "closed_at": "1615882239", "comments": 11, "commits": 1, "created_at": "1615043362", "deletions": 1, "labels": ["code-checks-approved", "fastsim-approved", "fully-signed", "orp-approved", "tests-approved"], "merge_commit_sha": "824dff7aa84aeeff03b0bcbd2b0f0dcc38f03d81", "merged_at": "1615882239", "merged_by": "cmsbuild", "milestone": "CMSSW_11_3_X", "number": 33088, "release-notes": [], "review_comments": 0, "state": "closed", "title": "fix to KineParticleFilter::acceptParticle", "updated_at": "1615882239", "user": "missirol"}