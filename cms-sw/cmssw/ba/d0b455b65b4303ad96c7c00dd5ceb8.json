{"additions": 1313, "auther_ref": "testSchemaEvolution", "auther_sha": "aa1c02bd3209a952a90df4ce99d69085b555f254", "author": "wddgit", "body": "#### PR description:\r\n\r\nAdd a new unit test that verifies the performance of schema evolution algorithms in ROOT. This also tests that StreamerInfo objects are written for classes nested in other classes that have a StreamerInfo.\r\n\r\nIn the test, an input file is read that contains products containing known values. We verify we can read the product and that the values match values we know were written into the product. The input file was created in a separate process that was built with modified data format classes. This process was prepared manually by editing the code in this pull request and rebuilding. Then that output was saved in the cms-data IOPool-Input repository in GitHub.\r\n\r\nThe modifications test each of the 12 kinds of schema evolution listed in ROOT's documentation. At the moment, 2 of these fail and the related tests are commented out in this PR. These do not appear to be cases that are important to CMS (both involve raw pointers as data members), but we'll inform ROOT developers about this.\r\n\r\nThis is what the ROOT documentation says at the current time (9/19/2023, https://root.cern/manual/io/#automatic-schema-evolution):\r\n\r\nAutomatic schema evolution supports the following scenarios:\r\n\r\n- Change in the order of data members in the class.\r\n- Addition of a data member: the value of the missing member will be left unchanged by the I/O (so usually the value set by the default constructor).\r\n- Removal of a data member: the corresponding data is not read.\r\n- Move of a data member from a derived class to a base class or vice-versa.\r\n- Change of the type of a member if it is a simple type or a pointer to a simple type, including Double32_t and Float16_t. A warning is given in case of loss of precision.\r\n- Addition or removal of a base class.\r\n- Change of a member type from T* to T or back.\r\n- Change of a member type from T* to unique_ptr<T> or back.\r\n- Change of a member type from C-style array (such as int[3]) to its std::array counterpart (such as array<int, 3>).\r\n- Change from variable-size array and size (such as float *fArray; //[fSize] and int fSize) to std::vector (such as std::vector<float> fArray;).\r\n- Change between STL collection types, from / to std::vector, std::queue, std::deque, std::list, std::forward_list, std::set, std::multiset, std::unordered_set, std::unordered_multiset, std::valarray, std::bitset.\r\n- Change of STL associative containers, from / to std::map, std::unordered_map, std::multimap, std::unordered_map, std::unordered_multimap std::vector<std::pair<key,value>>.\r\n\r\nThere is one test case for each of the 12 items listed above (one could imagine writing many test cases for each item above). I could add more test cases if anyone can think of a particular case worth testing. \r\n\r\nCurrently, the input file was generated with CMSSW_13_2_3. I could add more input files from other releases if requested. We had discussed adding a new input file each time there is a major change in ROOT in the future.\r\n\r\nThere is also a commented out test for CMSSW_13_0_0. This release has a bug and the test is commented out because it fails for that release. This particular bug is what motivated this PR. See discussion in issues #41246 and #41348. The StreamerInfo test in this PR would have detected that particular bug. This may be useful if we have to do further work to deal with data files that were written by code with the bug.\r\n\r\n#### PR validation:\r\n\r\nThe new unit test passes.\r\n", "branch": "master", "changed_files": 13, "comments": 10, "commits": 2, "created_at": "1695135959", "deletions": 5, "labels": ["core-pending", "pending-signatures", "tests-pending", "orp-pending", "code-checks-approved"], "milestone": "CMSSW_13_3_X", "number": 42825, "release-notes": [], "review_comments": 10, "state": "open", "title": "New schema evolution unit test", "updated_at": "1696273567", "user": "wddgit"}