{"additions": 3703, "auther_ref": "mergeableRunProductsSupportSplit", "auther_sha": "4b16d164a6f03a39fc0dd5cd9d2b1b3d428842ef", "author": "wddgit", "body": "at luminosity block boundaries and then merging them back together.\r\n\r\nThe only changes outside the core Framework code are related to\r\nadding the swap function to mergeable data formats types and one\r\nfix required by the automatic code checker. This PR adds a new\r\nrequirement that mergeable data format types that are stored in Runs\r\nmust have a swap function.\r\n \r\nNote there are significant restrictions on this new ability to split and merge run\r\nproducts. I am in the process of writing a new section for the Framework\r\nTWIKI area in the Software Guide that addresses the details which are unfortunately\r\ncomplicated.\r\n\r\nPreviously the Framework did not support splitting runs and then merging them.\r\nPreviously this was simply against the rules and mergeable products were invalid\r\nwhen it was done. (And the Framework still will not support splitting lumis or\r\nsplitting runs at other than lumi boundaries).\r\n\r\nI'll give an example if this is unclear. For example, one might create a product\r\ncontaining a histogram associated with a run by processing all the events in\r\n10 luminosity blocks with the histogram accumulating some quantity from the events\r\nor the luminosity blocks. Then later one might run two separate processes, one to\r\nprocess the first 5 luminosity blocks and the other to process the other 5 luminosity\r\nblocks. Then in a subsequent process the two files might be merged together into\r\none.  In the previous version of the code the histogram would be copied to each of\r\nthe two output files (it is not possible to split the summed contents, the information\r\nis not available in the histogram). Then when the files would be merged the histogram\r\ncopies would be added bin by bin which would incorrectly double the content of each bin.\r\nAfter the change in this pull request the proper thing will be done to prevent this double\r\ncounting in this simple case.\r\n\r\nThere should be no change in behavior in cases where a sequence of processing\r\nsteps did not split runs and no changes to anything in the output other than the\r\ncontent of mergeable products in Runs.\r\n\r\nBackward compatibility is handled as follows. One can read old files with the new\r\ncode and vice versa. If the splitting occurred in a processing step with this new code\r\nand every processing step after that also uses this new code, things will be handled\r\naccording to the new merging algorithm. Otherwise, run product merging will occur\r\naccording to the old rules.\r\n", "branch": "master", "changed_files": 128, "comments": 20, "commits": 2, "created_at": "1531329740", "deletions": 1885, "labels": ["alca-pending", "analysis-approved", "code-checks-approved", "comparison-available", "core-pending", "db-pending", "generators-pending", "hold", "orp-pending", "pending-signatures", "reconstruction-approved", "tests-approved"], "milestone": "CMSSW_10_2_X", "number": 23776, "release-notes": [], "review_comments": 0, "state": "open", "title": "Add support for splitting files with mergeable run products", "updated_at": "1531469125", "user": "wddgit"}