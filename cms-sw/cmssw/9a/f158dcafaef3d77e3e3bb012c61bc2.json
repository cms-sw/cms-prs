{"additions": 1052, "auther_ref": "edmAsync", "auther_sha": "ace8492258c0b90c417da8159355188797d4c53b", "author": "makortel", "body": "#### PR description:\r\n\r\nThis PR adds `edm::async()` facility described in https://github.com/cms-sw/cmssw/issues/29188, but implemented as a `edm::Async` service base class and `AsyncService` implementation (rationale for service-based approach instead of a free function can be found from https://github.com/cms-sw/cmssw/pull/44901#issuecomment-2103335066). This PR also replaces the use of `cudaStreamAddCallback()` with `edm::async()` accompanied with `cudaEventSynchronize()`, and makes the CUDA/Alpaka events to be created with `cudaEventBlockingSync` flag.\r\n\r\nMeasurements that I showed in CHEP 2023 https://indico.jlab.org/event/459/contributions/11810/ suggested possible 1 % throughput improvement at the HLT (of that time, many things have changed since) over `cudaStreamAddCallback()`. Earlier studies done with a prototype in https://github.com/cms-patatrack/pixeltrack-standalone/pull/321 that somehow the thread pool with `cudaEventSynchronize()` used less CPU than `cudaStreamAddCallback()`.\r\n\r\nDuring the CHEP study I also tested polling with `cudaEventQuery()`, but the \"waiting thread pool\" approach was more performant.\r\n\r\nAnother benefit over `cudaStreamAddCallback()` is that that function \"is slated for eventual deprecation and removal\", and the \"replacement\" `cudaLaunchHostFunc()` does not call the callback function in case of an error in the associated CUDA stream.\r\n\r\nResolves https://github.com/cms-sw/cmssw/issues/29188\r\nResolves https://github.com/cms-sw/framework-team/issues/916\r\n\r\n#### PR validation:\r\n\r\nUnit tests in `FWCore/Concurrency`, `HeterogeneousCore/Alpaka{Core,Test}`, `HeterogeneousCore/CUDA{Utilities,Core,Test}` succeed.\r\n\r\n**The deployment on CUDA and Alpaka modules still needs performance testing**\r\n\r\n#### If this PR is a backport please specify the original PR and why you need to backport that PR. If this PR will be backported please specify to which release cycle the backport is meant for:\r\n\r\nPossibly to be backported to 14_0_X.", "branch": "master", "changed_files": 24, "comments": 25, "commits": 8, "created_at": "1714746608", "deletions": 41, "labels": ["core-pending", "pending-signatures", "tests-pending", "orp-pending", "code-checks-pending", "heterogeneous-pending"], "milestone": "CMSSW_14_1_X", "number": 44901, "release-notes": [], "review_comments": 33, "state": "open", "title": "Introduce edm::Async service, and use it in CUDA and Alpaka modules", "updated_at": "1717535268", "user": "makortel"}