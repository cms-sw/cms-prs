{"additions": 12, "auther_ref": "staticwarnings_cmsexceptionstream", "auther_sha": "32dca1039fed8dcecff2923567f1b3195de0beb8", "author": "pieterdavid", "body": "While looking at the static analyzer warnings of some code that I recently modified, I noticed that there are quite some from calling `operator<<` with a temporary `cms::Exception`. This picks the by-const-ref overload, which casts the const away (causing the warning) and calls the non-const version - I guess it is actually there only because the non-const version cannot be used on a temporary `cms::Exception`.\r\nUsing a universal reference instead should work for both (non-const) lvalue and rvalue references, I think, hence this PR, but please someone more expert on C++ check if the changes make sense.", "branch": "master", "changed_files": 1, "comments": 11, "commits": 1, "created_at": "1531720671", "deletions": 57, "labels": ["code-checks-approved", "comparison-available", "core-approved", "fully-signed", "orp-pending", "tests-approved"], "milestone": "CMSSW_10_2_X", "number": 23801, "release-notes": [], "review_comments": 0, "state": "open", "title": "Avoid const_cast in operator<<(cms::Exception, ...)", "updated_at": "1531760165", "user": "pieterdavid"}