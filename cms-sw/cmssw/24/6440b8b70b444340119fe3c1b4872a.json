{"additions": 9841, "auther_ref": "dqm-namespacing-on-CMSSW_11_0_0_pre3", "auther_sha": "785d00ea7297eb11a24727fceab740ddbafc4dcb", "author": "schneiml", "body": "#### PR description:\r\n\r\nThis PR separates a few changes out of the big `DQMStore` restructuring project [1] that can be merged safely. No behaviour changes. These changes include things that need to be fixed/explicitly declared in subsystem code, therefore this PR touches many packages and will conflict almost certainly with others.\r\n\r\nThis is the reason to split out these changes and merge them now.\r\n\r\nThere are two big sets of changes:\r\n- Simplify includes. The only files to be included from the `DQMServices/Core` package are `DQMStore.h` and the module base classes (`DQMEDAnalyzer.h`, `DQMEDHarvester.h`, `oneDQMEDAnalyzer.h`, `DQMGlobalEDAnalyzer.h`). All others should the replaced with `DQMStore.h`.\r\n    - This implies that `MonitorElement.h` should never be included, the majority the majority of changes is removing these.\r\n    - There are still a lot of redundant includes and a few non-standard ones, that I did not bother to hunt down.\r\n    - `DQMStore` and `MonitorElement` should never be forward-declared, to prevent problems in the next steps.\r\n\r\n- Namespace `MonitorElement` and `DQMStore` into `dqm::reco::`, `dqm::harvesting::` and `dqm::legacy::` (and `dqm::impl::`, which is the actual implementation).\r\n    - There is (intentionally) now more `DQMStore` and `MonitorElement` in the default namespace. Most code will continue to work unchanged since `DQMEDAnalyzer` and `DQMEDHarvester` import them into class scope.\r\n    - For now all of these are the same class, but in the future they will start to expose different APIs. \r\n    - All _legacy_ modules, that is those using DQM but not deriving from `DQMEDAnalyzer` or `DQMEDHarvester`, need to import the correct definition themselves. `typedef`s to to that are the second big batch of changes.\r\n    - Many of the classes that now import `dqm::legacy::` are actually helper classes and not legacy modules by themselves. These could be changed to `dqm::reco::` or `dqm::harvesting::` based on the APIs that they use, but that will be easier once the reduced APIs are actually in place.\r\n    - The only visible change in non-legacy code is that functions returning `MonitorElement` defined outside the class declaration now need to qualify the `MonitorElement` in their return type. This is due to how C++ scoping works and hard to avoid.\r\n\r\nIn addition,\r\n- A lot of `DQMServices/Examples` is deleted, since it demonstrates the usage of legacy APIs, some of which are only used in the example code...\r\n- `MonitorElement::Kind` got turned into an `enum class` to keep things a bit more clean in the future.\r\n\r\n#### PR validation:\r\nCode compiles.\r\n\r\nNone of the changes should affect the output, but bugs and mistakes are possible, so we need to watch the comparisons.\r\n\r\nPR comparison shows no significant changes.\r\n\r\n[1] https://github.com/cms-sw/cmssw/compare/master...schneiml:dqm-new-dqmstore-on-CMSSW_11_0_0_pre1-from-andrius", "branch": "master", "changed_files": 1087, "closed_at": "1563818359", "comments": 50, "commits": 27, "created_at": "1562748865", "deletions": 9992, "labels": ["alca-approved", "analysis-approved", "code-checks-approved", "comparison-available", "core-approved", "db-approved", "dqm-approved", "fastsim-approved", "generators-approved", "hlt-approved", "l1-pending", "orp-approved", "pending-signatures", "reconstruction-approved", "simulation-approved", "tests-approved", "upgrade-approved", "xpog-pending"], "merge_commit_sha": "8d95cdab8d088b564f43170c6966f3f426840c40", "merged_at": "1563818359", "merged_by": "cmsbuild", "milestone": "CMSSW_11_0_X", "number": 27476, "release-notes": [], "review_comments": 12, "state": "closed", "title": "DQM: header and namespace cleanup", "updated_at": "1563818359", "user": "schneiml"}