{"additions": 266, "auther_ref": "fixSizeType_from-CMSSW_13_0_0_pre2", "auther_sha": "cc491f1a5d986cfe6f18bf6a20cdc36a6ab5ef50", "author": "swertz", "body": "#### PR description:\r\n\r\n- It was brought to our attention by the ROOT team that the branch type used for the size (counter) of native arrays should always be a signed integer (see [here](https://root.cern.ch/doc/master/classTBranch.html#ac0412c423e6c8388b42247e0410cf822)), while it was stored as an unsigned int in NanoAOD. In practice there may be few consequences, but this implements the fix to avoid any potential unwanted effects down the line.\r\n- Add support for 16-bit integers in NanoAOD and fix some inconsistencies for other types (uint, double) in the flat table producer\r\n- Use 8 and 16 bit integers instead of full-size ints where relevant (charges, indices, IDs, counters...). While compression did help in hiding the zeroed unused bits, I still noticed a few percent-level reduction in the size then using native types instead.\r\n    - Note that I avoided using `int8` for signed integers and always relied on `int16` instead. This is because ROOT interprets `int8` as a `char`, which messes up things like `TTree::Draw` and `TTree:Scan` (filling the histogram with characters instead of numbers). \r\n\r\n#### PR validation:\r\n\r\nRan a nano matrix workflow.\r\n", "branch": "master", "changed_files": 28, "closed_at": "1673870542", "comments": 27, "commits": 10, "created_at": "1673445305", "deletions": 170, "labels": ["fully-signed", "tests-approved", "orp-approved", "code-checks-approved", "xpog-approved"], "merge_commit_sha": "d570bd30165d91aacb5ceeed93658e248f4382f8", "merged_at": "1673870542", "merged_by": "cmsbuild", "milestone": "CMSSW_13_0_X", "number": 40478, "release-notes": [], "review_comments": 0, "state": "closed", "title": "Nano: fix array size branch type, support 16 bit ints, use more 8 or 16 bit integers", "updated_at": "1673870543", "user": "swertz"}