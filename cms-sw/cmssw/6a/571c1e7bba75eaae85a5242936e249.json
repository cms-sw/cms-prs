{"additions": 565, "auther_ref": "5BXunpacker_12_2_X", "auther_sha": "f0ef55de8e6af6132ff02a9571261b25b9d163b6", "author": "hftsoi", "body": "#### PR description:\r\nThis PR is about the trigger Calo-L1 unpacker modified to read ECAL's 5BX FAT events properly. The current central unpacker for FAT events is assuming a payload size of 192 * 32-bit words and the same structure as for normal events, repeated itself one after another five times for each FAT event, and each Calo fragment contains one BX only. However this is not compatible with the actual current payload format which has a larger size of 5 * 192 * 32-bit words, where each Calo fragment contains all 5 BX already, stacked in the order BX-2, -1, 0, +1, +2 inside.\r\n\r\nThe modification involves duplication of all necessary unpacker functions from normal events unpacking, then to make changes there for FAT events unpacking. The idea is to have two separate unpackers, one for unpacking normal events only, and another for unpacking FAT events only, in order to minimize risk.\r\n\r\nNote: UCTCTP7RawData5BX.h is duplicated from UCTCTP7RawData.h, which contains the index equations for locating Calo fragments in payload data, offsets are modified for 5BX, while geometry, word structure and etc. remain the same.\r\n\r\n#### PR validation:\r\nValidated by running private online DQM on recent CRUZET runs, all DQM plots looked expected with modified unpacker. Also asked the central DQM team to include these changes into temporary production for this last week of running, all tests ran fine and DQM plots looked expected.", "branch": "master", "changed_files": 3, "comments": 4, "commits": 2, "created_at": "1637937470", "deletions": 10, "labels": ["l1-pending", "pending-signatures", "tests-approved", "orp-pending", "code-checks-approved"], "milestone": "CMSSW_12_2_X", "number": 36259, "release-notes": [], "review_comments": 6, "state": "open", "title": "Calo-L1 unpacker modified to read 5BX payload format", "updated_at": "1638262086", "user": "hftsoi"}