{"additions": 1365, "auther_ref": "split_layerClusterProducer", "auther_sha": "651e4d6fbd93bb854e0c9f54755c6bb717a6626e", "author": "OlivieFranklova", "body": "#### PR description:\r\n\r\n> The whole purpose of this pull request was to change the workflow for clustering. We split clustering for the silicon and scintillator parts. Firstly, layer clusters are created for all three types of recHits (EE, HSci, HSi). For the Silicon types, the Silicon specialization of CLUE is used, while for the Scintillator, the Scintillator specialization of CLUE is used. Then, all three clusters that were created are merged together. Because of this change, lots of other changes were made. All changes are described below.\r\n> \r\n> **BH** was renamed to **HSci**\r\n> \r\n> **FH** was renamed to **HSi**\r\n\r\n----\r\n## Clustering\r\n\r\n### HGCalClusteringAlgoBase\r\n\r\n- Method **getEventSetup** was changed in **HGCalClusteringAlgoBase.h**. New implementation accept RecHitTools with setted Geometry, so the geometry is not set in **getEventSetup** but must be set before calling this method. \r\n- Thanks to that we removed ``edm::ConsumesCollector iC`` from constructor because it was used only for setting geometry. This was removed also from all derived classes. \r\n\r\n---\r\n### HGCalCLUEAlgo\r\n> We rewrite CLUEAlgo that it can be specify by template if it is silicon or scintillator case. New CLUEAlgo is templated by tile and strategy. Strategy is new class which determines how should algorithm behaves. We have two strategy types: ``HGCalSiliconStrategy``, ``HGCalScintillatorStrategy``\r\n\r\n- Method **distance2** was removed from CLUEAlgo and now is counted in tiles.\r\n- The **CellsOnLayer** structure was changed to use only *dim1* and *dim2* vector instead of *x, y, eta, phi, isSi*, with *isSi* being unnecessary due to specialization by strategy.\r\n- New specializations of calculateLocalDensity was added - one for silicon and one for scintillator. \r\n- Density was removed from CLUEAlgo and according to it from other files\r\n\r\n#### populate\r\n- According to strategy method determine if will fill *dim1* and *dim2* vector by *x* and *y* or *eta* and *phi*.\r\n#### makeClusters\r\n- The method decides which delta to use based on the strategy.\r\n#### getClusters\r\n- Position is counted in *HGCalLayerClusterProducer* so in the method *getClusters* position is set to `math::XYZPoint(0.f, 0.f, 0.f);`.\r\n#### calculateLocalDensity\r\n- Original function only decide by strategy which specification of *calculateLocalDensity* should call\r\n- Implementation was splitted to silicon one and scintillator one. Each of the implementation has their own function.\r\n#### calculateDistanceToHigher\r\n- The method decides which `bindId` to use based on the strategy.\r\n- thanks to changes in tiles this method could be rewrite so the implementation is basically the same for both silicon and scintillator strategy.\r\n\r\n\r\n> now we can use *HGCalSiCLUEAlgo*, *HGCalSciCLUEAlgo* and *HFNoseCLUEAlgo*\r\n\r\n---\r\n### Layer Cluster Algo Factory\r\n\r\n- New types of CLUE settings were added to **HGCalLayerClusterPluginFactory.cc** one for Silicon and one for Scintillator\r\n    ```\r\n    DEFINE_EDM_VALIDATED_PLUGIN(HGCalLayerClusterAlgoFactory,HGCalSiCLUEAlgo, \"SiCLUE\");\r\n    DEFINE_EDM_VALIDATED_PLUGIN(HGCalLayerClusterAlgoFactory, HGCalSciCLUEAlgo, \"SciCLUE\");\r\n    ```\r\n----\r\n### Layer Tiles\r\n\r\n> Layer Tiles were split to Silicon and Scintillator one. So changes were made in *Constants.h files. And we created new structures ``PhiWrapper`` and ``NoPhiWrapper`` which can determine if the type is silicon or scinitillator.\r\n\r\n#### Changes in constants\r\n\r\n- **HGCalTilesConstants** was splitted to **HGCalSiliconTilesConstants** and **HGCalScintillatorTilesConstants**\r\n- *X* and *Eta* was renamed to *Dim1*  -> now we set *minDim1* and *maxDim1*\r\n- *Y* and *Phi* was renamed to *Dim2* -> now we set *minDim2* and *maxDim2*\r\n- Only one *tileSize*, *nColumns* and *nRows* is in the constants\r\n- **HFNoseTilesConstants** is now treated like silicon \r\n\r\n#### HGCalLayerTiles.h\r\n\r\n- *HGCalLayerTiles* is now templated by *TilesConstants* and by *Wrapper* - **PhiWrapper** for **HGCalScintillatorTilesConstants** and **NoPhiWrapper** for both **HGCalSiliconTilesConstants** and **HFNoseTilesConstants**\r\n- Method **fill** accepts only *Dim1* and *Dim2* vector\r\n- New method *getDim1Bin* is now used instead of *getXBin* and *getEtaBin*.\r\n- New method *getDim2Bin* is now used instead of *getYBin* and *getPhiBin*. This method uses wrapping.\r\n> **Distance is now counted in HGCalLayerTiles and not in CLUEAlgo**\r\n- Method **searchBox** uses wrapping so **searchBoxEtaPhi** was removed.\r\n- Methods **getGlobalBinEtaPhi** and **getGlobalBinByBinEtaPhi** were removed.\r\n\r\n> now we can use *HGCalSiliconLayerTiles*, *HGCalScintillatorLayerTiles* and *HFNoseLayerTiles*\r\n\r\n\r\n----\r\n----\r\n## Layer Cluster Producer\r\n\r\n> Creating Layer Clusters is now made by creating ``layerClusters``  specialized for each collection of recHits (``HGCEERecHits``, ``HGCHEFRecHits``, ``HGCHEBRecHits``) and then all three layerCLusters are merged together. This change was created because now we can specialize implementatation by silicon or scintillator and we can reduce if-else branching.  \r\n\r\n\r\n### HGCalLayerClusterProducer\r\n\r\n- New implementation of this producer can consume only one collection of **recHits**.\r\n- Algorithm for clustering is created by *HGCalLayerClusterAlgoFactory*: **HFNoseCLUE** for ``HGCHFNoseRecHits`` collection, **SiCLUE** for ``HGCEERecHits`` and ``HGCHEFRecHits``, **SciCLUE** for ``HGCHEBRecHits``.\r\n  \r\n\r\n#### Produce\r\n\r\n- Method **Produce** sets geometry for *RecHitsTools* and than calls ``algo``s *getEventSetup*, *populate*, *makeClusters*, *getClusters*. \r\n  > In this new implementation position for clusters is counted in *HGCalLayerClusterProducer* and not in *CLUEAlgo*\r\n- Method **Produce** then counts position and time.\r\n- LayerClusterMask is counted only for *HFNose* because for other types of recHits is counted in *MergeClusterProducer*\r\n#### calculatePosition\r\n- Position is counted from ``hitsAndFraction`` from clusters. For counting position is used Geometry (to get specific position) which could cause slowlynes, this will be remove in the future.\r\n  \r\n ----\r\n\r\n\r\n### MergeClusterProducer\r\n\r\n- This new producer consumes **hgcalLayerClusters** and **timeLayerClusters** for 3 types of RecHits *EE*, *HSi* and *HSci* that were made by *hgcalLayerClusterProducer*.\r\n- The producer merge layerClusters and put them to event.\r\n- Then producer creates **layerClusterMask** and put it into event.\r\n- Then timeLayerCLusters are merged with correct id and put it into event.\r\n- **Output** of MergeClusterProducer is same as output of old usage of LayerClusterProducer.\r\n----\r\n\r\n### Change in configuration files\r\n\r\n  > In old implementation only **hgcalLayerCluster** was called in the new one we firs want to call **hgcalLayerCluster** for all 3 types of recHits and then we want to call **mergeLayerClusters** to merge them together.\r\n  ```\r\n  hgcalLocalRecoTask = cms.Task(\r\n    HGCalRecHit,\r\n    HGCalUncalibRecHit,\r\n    hgcalLayerClustersEE,\r\n    hgcalLayerClustersHSi,\r\n    hgcalLayerClustersHSci,\r\n    hgcalMergeLayerClusters,\r\n    particleFlowClusterHGCal,\r\n    particleFlowRecHitHGC\r\n)\r\n ```\r\n - changes are made in these files: \r\n   - **HLTrigger/.../hgcalLocalRecoTask_cfi.py**\r\n   - **HLTrigger/.../HLTHgcalTiclPFClusteringForEgammaUnseededTask_cfi.py**\r\n   - **HLTrigger/.../HLT_IsoMu24_FromL1TkMuon_cfi.py**, \r\n----\r\n### Change in hgcalLayerClusters_cff.py\r\n\r\n- We create 3 types of *hgcalLayerClusters* one for each type of recHits. \r\n- For each type we need to set specific **detector**, **recHits** and type of CLUEAlgo **SiCLUE** or **SciCLUE**\r\n\r\n----\r\n----\r\n\r\n## Filtering\r\n\r\n> Filtering by `algo_number` was changed to filtering by a vector of `algo_numbers`. This change was made due to changing the setting of `algo_id`. In the previous implementation, `algo_id` was always set in the *HGCalLayerCLusterProducer* for `hgcal_mixed` because we ran the producer for *HSi*, *HSci*, and *EE* types of recHits at one time. In the new implementation, we run the *HGCalLayerClusterProducer* once for each type of recHits, and we set `algo_id` accordingly: `hgcal_had` for *HSci* and *Hsi*, and `hgcal_em` for *EE*. Then, the results are merged by the *MergeClusterProducer*. We want to have the same behavior as the previous implementation, so we want to make filtering by both `hgcal_had` and `hgcal_em`.\r\n- Changes in filtering are in these files: **RecoHGCal/.../ClusterFilterByAlgo.h**, **RecoHGCal/.../ClusterFilterByAlgoAndSize.h**, **RecoHGCal/.../ClusterFilterByAlgoAndSizeAndLayerRange.h**\r\n- The default option is changed from number 9 - `hfnose` to a vector of `hgcal_had` and `hgcal_em`. The change is made in **RecoHGCal/.../FilteredLayerClusterProducer.cc**.\r\n- Thanks to changing the default option, we can remove setting `algo_number` to 8 - `hgcal_mixed` (now to 7 and 6 - `hgcal_had`, `hgcal_em`) in configuration files for filtering.\r\n- We also remove `hgcal_mixed` from **CaloCluster.h**.\r\n- **HgcalClusterFilterMask** was renamed to **TICLClusterFilterMask**.\r\n\r\n\r\n\r\n#### PR validation:\r\n\r\nPull request was tased by `scram b runtests` and `runTheMatrix.py -l limited -i all --ibeos`. Test [EtaPhiSearchInTile_t.cpp](https://github.com/cms-sw/cmssw/compare/master...OlivieFranklova:cmssw:split_layerClusterProducer#diff-0d9a7de4b00abce31e8073f2af3ba0640385dc930c613207b34d3a4f86ec4323) was changed according to changes in HGCalLayerTiles. We also used a couple of other workflows to test whether the clusters remained unchanged (23224, 25234, 25294,23834)\r\n\r\n<!-- Please replace this text with a description of which tests have been performed to verify the correctness of the PR, including the eventual addition of new code for testing like unit tests, test configurations, additions or updates to the runTheMatrix test workflows -->\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "branch": "master", "changed_files": 96, "comments": 39, "commits": 20, "created_at": "1683545407", "deletions": 951, "labels": ["dqm-approved", "hlt-approved", "reconstruction-approved", "visualization-approved", "simulation-approved", "fully-signed", "tests-approved", "orp-pending", "upgrade-approved", "code-checks-approved"], "milestone": "CMSSW_13_2_X", "number": 41589, "release-notes": [], "review_comments": 29, "state": "open", "title": "Split HGCal layer cluster producer", "updated_at": "1685609900", "user": "OlivieFranklova"}