{"additions": 3013, "auther_ref": "siStripClusterizer_1510pre1", "auther_sha": "b43b4d373bb264e722e6ce173373add0ce5c15fd", "author": "pietroGru", "body": "## PR 47629\r\n\r\n### Description\r\nPull request to merge an heterogeneous implementation of the silicon strip unpacker/clusterizer `SiStripClusterizerFromRaw` module (_legacy_), whose purpose is producing strip clusters from raw FED data.\r\n\r\nLegacy and heterogeneous implementations of the unpacker/clusterizer share both unpacking and clustering algorithms, with the heter. version having the needed generalizations to allow for parallel implementation.\r\n\r\n### Overview of the implementation\r\nDetails of the _heterogeneous_ implementation can be found in here[1], while a summary is presented below. The parallel implementation consists of:\r\n- the `ESProducer` called `SiStripClusterizerConditionsESProducerAlpaka`. It is analogous to the _legacy SiStripClusterizerConditionsESProducer_. It has the purpose of reshuffling the strip conditions (good strips, cabling, etc.) in a more convenient portable format for the parallel algo;\r\n- the `SiStripRawToCluster` (alpaka `stream::SynchronizingEDProducer`). It takes the input `RawFEDCollection` and unpacks the fed raw bytes into pairs of (strip, ADC) - henceforth referred as _strip digi_. It performs the clusterization of the strip digi according to the ThreeThreshold algo. Finally, the resulting digi and cluster data are exported as SoA collections;\r\n- the `SiStripClustersToLegacy` (edm `global::EDProducer`) EDProducer, which is a cpu producer converting the clusters and digi SoA collections into the legacy format used downstream by other modules (`DetSetVector<SiStripCluster>`, with digi amplitudes as `SiStripCluster` members).\r\n\r\nThe two DataFormats are introduced:\r\n- `SiStripClusterSoA`, which contains the data members of `SiStripCluster` legacy class reshuffled into a PortableCollection SoA;\r\n- `SiStripDigiSoA`, as above but for the `SiStripDigi` class.\r\n\r\n\r\n**MaxSeedStrips**\r\nAs explained in [1], the clusterizer's parallel implementation requires to pre-allocate the cluster candidate collection (host operation) at a time where the total number of cluster candidates is not known. Therefore, the `MaxSeedStrips` parameter is introduced in the parallel version. It determines the maximum number of cluster candidates per event that can be produced.\r\n\r\nIt is configurable during module setup. The sensitivity of clusters produced as a function of this parameter is investigated with PU MC run [2]. The default value is set to $2e5$. The parameter can be personalized with\r\n```python\r\nprocess.hltSiStripRawToClustersFacilityAlpaka.Clusterizer.MaxSeedStrips = cms.uint32(200000)\r\n```\r\n\r\n---\r\n### Physics validation\r\nThe heterogeneous module is validated by comparing the track quality with respect to legacy, and by looking at the strip DQM plots [7], using 9400 events from the dataset `/RelValTTbar_14TeV/CMSSW_15_0_0-PU_142X_mcRun3_2025_realistic_v7_STD_2025_PU-v3/GEN-SIM-DIGI-RAW` with the menu `/dev/CMSSW_15_0_0/GRun/V76` running `MC_ReducedIterativeTracking_v24` path only in `CMSSW_15_0_6`.\r\n\r\nValidation plots are available here [8], with the recipe to reproduce (and files) reported in the accordion below.\r\n\r\n<details>\r\n<summary>Recipe</summary>\r\n\r\n  ##### Steps\r\n  Preparation of **step 1** (`hltx_trackingOnly_MC_1.py`) configuration files:\r\n  ```bash\r\n  hltGetConfiguration /dev/CMSSW_15_0_0/GRun/V76 --globaltag 142X_mcRun3_2025_realistic_v7 --mc --unprescale --output minimal --eras Run3_2025 --l1-emulator uGT --paths MC_ReducedIterativeTracking_v24 --max-events 1000 --input /store/relval/CMSSW_15_0_0/RelValTTbar_14TeV/GEN-SIM-DIGI-RAW/PU_142X_mcRun3_2025_realistic_v7_STD_2025_PU-v3/2580000/067c3ad3-f8cf-493a-9511-57ec6d2ff29e.root &> hltx_trackingOnly_MC_1.py\r\n  ```\r\n\r\n  The **step 2** for the `HLTRACKVALIDATOR` process is available in [9].\r\n\r\n  The **step 3** is the standard harvester for `hltMerged` [10].\r\n\r\n  For example, the following script is used to generate legacy/alpakaGPU/alpakaSerial files\r\n  ```bash\r\n  #!/bin/bash\r\n  for i in {1..10}; do\r\n    echo \">>> Iteration $i\"\r\n\r\n    cp hltx_trackingOnly_MC_$i.py hltx_trackingOnly_MC.py\r\n    ## Legacy\r\n    cmsRun hltx_trackingOnly_MC_legacy.py &> step1_legacy.log$i\r\n    cmsRun hltValidation_default.py --appendStr _legacy &> step2_legacy.log$i\r\n    cmsRun Harvesting.py --appendStr _legacy &> step3_legacy.log$i\r\n    mv DQM_V0001_R000000001__Global__CMSSW_X_Y_Z__RECO.root step3_legacy.$i.root\r\n    rm step1_legacy.root\r\n    mv step2_legacy_DQMoutput.root step2_legacy_DQMoutput.$i.root\r\n\r\n    ## Alpaka GPU\r\n    cmsRun hltx_trackingOnly_MC_alpaka.py --moduleBackend cuda_async &> step1_alpakaGPU.log$i\r\n    cmsRun hltValidation_default.py --appendStr _alpakaGPU &> step2_alpakaGPU.log$i\r\n    cmsRun Harvesting.py --appendStr _alpakaGPU &> step3_alpakaGPU.log$i\r\n    mv DQM_V0001_R000000001__Global__CMSSW_X_Y_Z__RECO.root step3_alpakaGPU.$i.root\r\n    rm step1_alpakaGPU.root\r\n    mv step2_alpakaGPU_DQMoutput.root step2_alpakaGPU_DQMoutput.$i.root\r\n\r\n    ## Alpaka CPU\r\n    cmsRun hltx_trackingOnly_MC_alpaka.py --moduleBackend serial_sync &> step1_alpakaCPU.log$i\r\n    cmsRun hltValidation_default.py --appendStr _alpakaCPU &> step2_alpakaCPU.log$i\r\n    cmsRun Harvesting.py --appendStr _alpakaCPU &> step3_alpakaCPU.log$i\r\n    mv DQM_V0001_R000000001__Global__CMSSW_X_Y_Z__RECO.root step3_alpakaCPU.$i.root\r\n    rm step1_alpakaCPU.root\r\n    mv step2_alpakaCPU_DQMoutput.root step2_alpakaCPU_DQMoutput.$i.root\r\n  done\r\n\r\n  mv ./*.root ./data/\r\n  mv ./*.log* ./logs/\r\n  ```\r\n\r\n  ##### Files\r\n  ```log\r\n  /store/relval/CMSSW_15_0_0/RelValTTbar_14TeV/GEN-SIM-DIGI-RAW/PU_142X_mcRun3_2025_realistic_v7_STD_2025_PU-v3/2580000/067c3ad3-f8cf-493a-9511-57ec6d2ff29e.root\r\n  /store/relval/CMSSW_15_0_0/RelValTTbar_14TeV/GEN-SIM-DIGI-RAW/PU_142X_mcRun3_2025_realistic_v7_STD_2025_PU-v3/2580000/067c3ad3-f8cf-493a-9511-57ec6d2ff29e.root\r\n  /store/relval/CMSSW_15_0_0/RelValTTbar_14TeV/GEN-SIM-DIGI-RAW/PU_142X_mcRun3_2025_realistic_v7_STD_2025_PU-v3/2580000/067c3ad3-f8cf-493a-9511-57ec6d2ff29e.root\r\n  /store/relval/CMSSW_15_0_0/RelValTTbar_14TeV/GEN-SIM-DIGI-RAW/PU_142X_mcRun3_2025_realistic_v7_STD_2025_PU-v3/2580000/067c3ad3-f8cf-493a-9511-57ec6d2ff29e.root\r\n  /store/relval/CMSSW_15_0_0/RelValTTbar_14TeV/GEN-SIM-DIGI-RAW/PU_142X_mcRun3_2025_realistic_v7_STD_2025_PU-v3/2580000/067c3ad3-f8cf-493a-9511-57ec6d2ff29e.root\r\n  /store/relval/CMSSW_15_0_0/RelValTTbar_14TeV/GEN-SIM-DIGI-RAW/PU_142X_mcRun3_2025_realistic_v7_STD_2025_PU-v3/2580000/067c3ad3-f8cf-493a-9511-57ec6d2ff29e.root\r\n  /store/relval/CMSSW_15_0_0/RelValTTbar_14TeV/GEN-SIM-DIGI-RAW/PU_142X_mcRun3_2025_realistic_v7_STD_2025_PU-v3/2580000/067c3ad3-f8cf-493a-9511-57ec6d2ff29e.root\r\n  /store/relval/CMSSW_15_0_0/RelValTTbar_14TeV/GEN-SIM-DIGI-RAW/PU_142X_mcRun3_2025_realistic_v7_STD_2025_PU-v3/2580000/067c3ad3-f8cf-493a-9511-57ec6d2ff29e.root\r\n  /store/relval/CMSSW_15_0_0/RelValTTbar_14TeV/GEN-SIM-DIGI-RAW/PU_142X_mcRun3_2025_realistic_v7_STD_2025_PU-v3/2580000/067c3ad3-f8cf-493a-9511-57ec6d2ff29e.root\r\n  /store/relval/CMSSW_15_0_0/RelValTTbar_14TeV/GEN-SIM-DIGI-RAW/PU_142X_mcRun3_2025_realistic_v7_STD_2025_PU-v3/2580000/067c3ad3-f8cf-493a-9511-57ec6d2ff29e.root\r\n  ```\r\n\r\n</details>\r\n\r\n<details>\r\n  <summary>Early validation (in CMSSW_15_1_0_pre1)</summary>\r\n\r\n  An early validation was done on a smaller number of events (731) from `/store/mc/Run3Winter25Digi/TT_TuneCP5_13p6TeV_powheg-pythia8/GEN-SIM-DIGI-RAW/TrkFEVT_142X_mcRun3_2025_realistic_v7-v2/910002/0157fbd9-e915-4a10-bfe2-11db61e2b70d.root` of PU MC data, in `CMSSW_15_1_0_pre1` with `/dev/CMSSW_15_1_0/GRun/V3` running only `MC_ReducedIterativeTracking_v22` path [5].\r\n\r\n  Deviations were found between the _legacy_ and _heterogeneous_ (i.e. see [5.1]) and discussed on Tracking POG meeting [6]. A cluster excess O(1)  is found in the _heterogeneous_ with respect to _legacy_ having occurrence of O(12/500) events. The deviation legacy-heterogeneous was considered to have negligible impact on the performance by tracking experts during [6].\r\n</details>\r\n<!-- ------------------------------------------------------------------------------ -->\r\n\r\n---\r\n### Timing\r\nThe most recent timing measurement is reported below, using `Run2025` data `Run392642` with L1 ``L1Menu_Collisions2025_v1_1_1-d2`` and HLT `/dev/CMSSW_15_0_0/GRun/V76`, GlobalTag `150X_dataRun3_HLT_v1` in `CMSSW_15_0_6` release\r\n\r\n| configuration | throughput | (time/ev)_avg =<br> unpacking+clustering (+legacy conversion) | ECAL-GPU |\r\n| --- | --- | --- | --- |\r\n| legacy[D] | 545.9  2.7 evt/s | 34.2 ms =<br> hltSiStripRawToClustersFacility(34.2 ms) | 4.0 ms |\r\n| heterogeneous[E] | 556.5  0.9 evt/s | 13.5 ms =<br> hltSiStripRawToClustersFacilityAlpaka(6.0 ms) + hltSiStripRawToClustersFacility(7.5 ms) | 9.3 ms |\r\n| heterogeneous (serial)[F] | 509  2.2 evt/s | 68.6 ms =<br> hltSiStripRawToClustersFacilityAlpaka(59.5 ms) + hltSiStripRawToClustersFacility(9.1 ms) | 3.2 ms |\r\n\r\nThe measures have been done on the timing server one after the other, launching the jobs in area mode from lxplus8 from a fresh CMSSW area with the PR rebased on 15_0_6.\r\n\r\n<details>\r\n<summary>Previous measurements (Run2024)</summary>\r\n\r\nusing `Run2024` data `Run392642` with L1 ``L1Menu_Collisions2024_v1_3_0-d1_xml`` and HLT `/dev/CMSSW_15_0_0/GRun/V79`, GlobalTag `150X_dataRun3_HLT_v1` in `CMSSW_15_0_6` release:\r\n| configuration | throughput | (time/ev)_avg =<br> unpacking+clustering (+legacy conversion) | ECAL-GPU |\r\n| --- | --- | --- | --- |\r\n| legacy global unpacking[A] | 529.6  2.5 evt/s | 32.1 ms =<br> hltSiStripRawToClustersFacility(32.1 ms) | 5.7 ms |\r\n| alpaka global unpacking on CPU[B] | 506.8  2.7 evt/s | 54.9 ms =<br> hltSiStripRawToClustersFacilityAlpaka(46.9 ms) + hltSiStripRawToClustersFacility(7.9 ms) | 4.6 ms |\r\n| alpaka global unpacking on GPU[C] | 534.5  2.9 evt/s | 13.5 ms =<br> hltSiStripRawToClustersFacilityAlpaka(5.8 ms) + hltSiStripRawToClustersFacility(7.7 ms) | 15.8 ms |\r\n\r\n</details>\r\n\r\n\r\n\r\n---\r\n### Usage and customizer\r\n\r\n#### Compilation\r\nTo create a `CMSSW_15_0_1_pre1` area\r\n```bash\r\nscram project CMSSW_15_0_1_pre1\r\ncd CMSSW_15_0_1_pre1/src\r\ncmsenv\r\ngit cms-merge-topic pietroGru:47629\r\nscram b\r\n```\r\n\r\nTiming measurements were done after rebase in `CMSSW_15_0_6`\r\n```bash\r\nscram project CMSSW_15_0_6\r\ncd CMSSW_15_0_6/src\r\ncmsenv\r\ngit cms-merge-topic --old-base CMSSW_15_0_1_pre1 pietroGru:47629\r\nscram b\r\n```\r\n\r\n\r\n#### Customizer\r\nA customizer called `customizeHLTStripClustersFromRaw_alpaka` performs the following operations to replace the _legacy_ module with the _heterogeneous_ one: (a) it attaches to `process` the `SiStripClusterizerConditionsESProducerAlpaka` ESProducer generating device conditions; (b) it attaches to `process` the cluster producer (`process.hltSiStripRawToClustersFacilityAlpaka`) which inherits all the arguments of the legacy module from `process.hltSiStripRawToClustersFacility`; (c) it replaces the legacy `process.hltSiStripRawToClustersFacility` with the module converting the cluster SoA into the legacy format (i.e., what the legacy module outputs).\r\n\r\nFor example\r\n```bash\r\nhltGetConfiguration [...] \\\r\n  --customise RecoLocalTracker/SiStripClusterizer/customizeStripClustersFromRaw.customizeHLTStripClustersFromRaw_alpaka\r\n```\r\n<details>\r\n<summary>To run the module serially on CPU</summary>\r\n\r\nThe following can be appended to the `hlt.py`\r\n```python\r\nprocess.hltSiStripRawToClustersFacilityAlpaka.alpaka = cms.untracked.PSet(\r\n  # (\"serial_sync\" or \"cuda_async\" or \"rocm_async\")\r\n  backend = cms.untracked.string(\"serial_sync\")\r\n)\r\n```\r\n</details>\r\n\r\n\r\n---\r\n### History\r\n- This work was on top of an Alpaka porting of the CUDA unpacker/clusterizer [3]\r\n- Originally based on `CMSSW_14_2_0`, then moved to `CMSSW_15_0_1_pre1`\r\n- The PR stayed in draft and then was opened, resulting in a large number of commits (71). After [11], it was decided to squash them in order to cleanout the repository. The three main commits containing the dataformats, ES/EDProducer and converter were made. The description of the PR was updated for more clarity, accordingly.\r\n- A backup of the repository before squashing [12], as well as a dump of the PR page with all comments [13]\r\n\r\n\r\n\r\n\r\n---\r\n### References\r\n\r\n\r\n[1] https://indico.cern.ch/event/1554466/#68-update-on-alpaka-strip-unpa\r\n[2] using `/store/mc/Run3Winter25Digi/TT_TuneCP5_13p6TeV_powheg-pythia8` https://pgrutta.web.cern.ch/siStripClusterizer_1510pre1/validation_v4_compare/clustersMonitor.html\r\n[3] https://github.com/cms-sw/cmssw/pull/34618\r\n[4] https://mattermost.web.cern.ch/cms-exp/channels/sistrip-unpacking-on-gpu\r\n[5] https://pgrutta.web.cern.ch/siStripClusterizer_1510pre1/validation_v2/\r\n[5.1] https://pgrutta.web.cern.ch/siStripClusterizer_1510pre1/validation_v2/plots_hlt_hltMerged/effandfakePtEtaPhi.pdf\r\n[6] https://indico.cern.ch/event/1549492/#66-strip-detector-unpacking-on\r\n[7] [DQM/HLTEvF/python/HLTSiStripMonitoring_cff.py](https://github.com/cms-sw/cmssw/blob/master/DQM/HLTEvF/python/HLTSiStripMonitoring_cff.py)\r\n[8] https://pgrutta.web.cern.ch/siStripClusterizer_1510pre1/validation_v4.2\r\n[9] https://pgrutta.web.cern.ch/siStripClusterizer_1510pre1/config/hltValidation_default.py\r\n[10] https://pgrutta.web.cern.ch/siStripClusterizer_1510pre1/config/Harvesting.py, https://pgrutta.web.cern.ch/siStripClusterizer_1510pre1/config/Harvesting_all.py\r\n[11] https://indico.cern.ch/event/1567945/\r\n[12] https://github.com/pietroGru/cmssw/tree/backup/siStripClusterizer_1510pre1_preSquash\r\n[13] https://pgrutta.web.cern.ch/siStripClusterizer_1510pre1/backup_47629.pdf\r\n\r\n[A] https://cmshlttiming.app.cern.ch/display/pgrutta/CMSSW_15_0_6_LegacyGlobal_16.20250528_183634\r\n[B] https://cmshlttiming.app.cern.ch/display/pgrutta/CMSSW_15_0_6_Heterogeneous_Serial_16.20250528_163330\r\n[C] https://cmshlttiming.app.cern.ch/display/pgrutta/CMSSW_15_0_6_Heterogeneous_16.20250528_163207 \r\n[D] https://cmshlttiming.app.cern.ch/display/pgrutta/CMSSW_15_0_6_LegacyBaseline.20250725_151017\r\n[E] https://cmshlttiming.app.cern.ch/display/pgrutta/CMSSW_15_0_6_Heterogeneous.20250725_150923\r\n[F] https://cmshlttiming.app.cern.ch/display/pgrutta/CMSSW_15_0_6_Heterogeneous_serial.20250725_150820", "branch": "master", "changed_files": 45, "comments": 40, "commits": 4, "created_at": "1742404155", "deletions": 0, "labels": ["reconstruction-pending", "pending-signatures", "tests-pending", "orp-pending", "new-package-pending", "code-checks-rejected", "heterogeneous-pending", "trk", "changes-dataformats"], "milestone": "CMSSW_15_1_X", "number": 47629, "release-notes": [], "review_comments": 77, "state": "open", "title": "SiStripClusterizer, an Alpaka port of the CUDA ClustersFromRawProducerGPU", "updated_at": "1753653269", "user": "pietroGru"}