{"additions": 3517, "auther_ref": "siStripClusterizer_1510pre1", "auther_sha": "dc92552c8b158522b274e962e8b5f579870c1a09", "author": "pietroGru", "body": "#### PR description:\r\n\r\nThis PR is a porting to Alpaka of the CUDA version of the `ClustersFromRawProducerGPU` - i.e., a rawDataCollector producer taking raw FED SiStrip data and producing the SiStripClusters. The  `ClustersFromRawProducerGPU` original module has been merged in CMSSW with PR-35618 [1]. This activity started in CMSSW_14_2_0, and it was later rebased to CMSSW_15_1_0_pre1. A few point (as in the todo list) will account for the new features introduced since CMSSW 15.\r\n\r\nTwo EDProducers (`SiStripRawToCluster`, `SiStripClustersToLegacy`) and an ESProducer (`SiStripClusterizerConditionsESProducerAlpaka`) are introduced, with the corresponding data structures (`SiStripClusterizerConditions`, `SiStripClusters`, `SiStripMapping`).\r\n\r\n##### SiStripClusterizerConditionsESProducerAlpaka\r\nThe conditions and settings and  for the clusterizer (i.e., noise to mask out noisy strips, quality, inv. thick.) are generated starting from the `SiStripGain`, `SiStripNoises`, `SiStripQuality` records. This producer pakcs the conditions into a portable object (`SiStripClusterizerConditionsHost`) which can be conveniently retrieved by the `SiStripRawToCluster`.\r\n\r\n##### SiStripRawToCluster\r\nThe `SiStripRawToCluster` is the alpaka stream-EDProducer corresponding to `ClustersFromRawProducerGPU`. The producer gets as input tokens: the FEDRawDataCollection (EDToken) and the two SiStripClusterizerConditions, SiStripClusterizerConditionsHost (ESToken). The latter ES data is used to mask out the needed FEDRaw data bytes from the FEDRawDataCollection, according to the conditions (cabling, good det.s, etc.).\r\n\r\nIn `SiStripRawToCluster`, the relevant chunks of FEDRawData are masked according to the conditions and scheduled to be transferred to the device. Conditions are packed and prepared as well. Then, the work of (a) raw unpacking - i..e., mapping from raw bytes to digi - and (b) clustering - i.e., generation of clusters according to the ThreeThreshold algorithm - if offloaded to the device. This structure is found in the SiStripRawToCluster class and in the SiStripRawToClusterAlgo, respectively.\r\n\r\n##### SiStripClustersToLegacy\r\nThe result of the module is a portable collection of `SiStripClustersDevice`. This is consumed by the alpaka synchronizing stream-EDProducer, which get the product on the host and converts back to the legacy format for SiStripCluster (`edmNew::DetSetVector<SiStripCluster>`) which is used by downstream modules.\r\n\r\n\r\n#### Compilation\r\nThe relevant packages to check-in are\r\n```bash\r\ngit cms-addpkg CondFormats/SiStripObjects\r\ngit cms-addpkg DataFormats/SiStripClusterSoA\r\ngit cms-addpkg RecoLocalTracker/SiStripClusterizer\r\n```\r\n(n.b.: checkout dependencies if you want to run with debug defines)\r\n\r\n\r\n#### Usage\r\nThe `customizeHLTStripClustersFromRaw_alpaka` customizer replaces the \"legacy\" cpu-version of the SiStripRawToClustersFacility producer (i.e., the current producer mapping raw to cluster) with the sequence of SiStripRawToCluster+SiStripClustersToLegacy in all `Path`s containing the `hltSiStripRawToClustersFacility` key. To use it, you should run something like\r\n```python\r\nfrom RecoLocalTracker.SiStripClusterizer.customizeStripClustersFromRaw import customizeHLTStripClustersFromRaw_alpaka\r\nprocess = customizeHLTStripClustersFromRaw_alpaka(process)\r\n```\r\n\r\n\r\n#### Mattermost [2]\r\nhttps://mattermost.web.cern.ch/cms-exp/channels/sistrip-unpacking-on-gpu\r\n\r\n\r\n#### PR pre-validation:\r\nThis repo passed `scram runtests` (i.e., consisting in file additions, essentially the tests introduced here for data and condformats).\r\n```bash\r\n# https://cmsweb.cern.ch/das/request?instance=prod/global&input=file+dataset%3D%2FRelValTTbar_14TeV%2FCMSSW_14_2_0-PU_142X_mcRun3_2025_realistic_v4_Winter25_PU_RV255-v2%2FGEN-SIM-DIGI-RAW\r\n\r\nhltGetConfiguration /dev/CMSSW_15_1_0/GRun --globaltag 142X_mcRun3_2025_realistic_v4 --mc --unprescale --output minimal --max-events 250 --eras Run3_2025 --l1-emulator uGT --paths MC_ReducedIterativeTracking_v22\r\n```\r\n\r\n##### To do list\r\n- [x] Framework-managed transfer of portable objects (POs), as available since CMSSW 15_* [3]\r\n- [x] Move the POs into a common namespace, for ordering\r\n- [ ] Discuss whether the SiStripMapping and SiStripClusterizer SoA could be useful as CondFormat (i.e., they are not classes-registered currently) for future modules or not. In case not, move to RecoLocalTracker/SiStripClusterizer\r\n\r\n[1] - #34618 https://github.com/cms-sw/cmssw/pull/34618\r\n[2] - https://indico.cern.ch/event/1524384/#7-introduction-to-heterogeneou\r\n[3] - https://mattermost.web.cern.ch/cms-exp/channels/sistrip-unpacking-on-gpu\r\n\r\n<!-- https://github.com/cms-sw/cmssw/pull/34618 -->", "branch": "master", "changed_files": 48, "comments": 25, "commits": 56, "created_at": "1742404155", "deletions": 3, "labels": ["reconstruction-pending", "core-pending", "pending-signatures", "tests-pending", "orp-pending", "new-package-pending", "code-checks-pending", "heterogeneous-pending", "trk", "changes-dataformats"], "milestone": "CMSSW_15_1_X", "number": 47629, "release-notes": [], "review_comments": 77, "state": "open", "title": "SiStripClusterizer, an Alpaka port of the CUDA ClustersFromRawProducerGPU", "updated_at": "1744954384", "user": "pietroGru"}