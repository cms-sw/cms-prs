{"additions": 589, "auther_ref": "jpata-pfalgo-processblock-refactor2", "auther_sha": "a75bbd6c65dc4be7e7e4ad56c600ccbf69273dda", "author": "jpata", "body": "#### PR description:\r\n\r\nThis is a continuation of the PR https://github.com/cms-sw/cmssw/pull/26894.\r\n\r\nI further factorize `PFAlgo::processBlock`, creating the following functions from the loop body:\r\n\r\n```C++\r\n  bool recoTracksNotHCAL(const reco::PFBlock &block, reco::PFBlock::LinkData& linkData, const edm::OwnVector<reco::PFBlockElement> &elements, const reco::PFBlockRef &blockref, std::vector<bool>& active, bool goodTrackDeadHcal, bool hasDeadHcal, unsigned int iTrack, std::multimap<double, unsigned>& ecalElems, reco::TrackRef& trackRef);\r\n  //Looks for a HF-associated element in the block and produces a PFCandidate from it with HF_EM and/or HF_HAD calibrations\r\n  void createCandidateHF(const reco::PFBlock &block, const reco::PFBlockRef &blockref, const edm::OwnVector<reco::PFBlockElement> &elements, ElementIndices& inds);\r\n  void createCandidatesHCAL(const reco::PFBlock &block, reco::PFBlock::LinkData& linkData, const edm::OwnVector<reco::PFBlockElement> &elements, std::vector<bool>& active, const reco::PFBlockRef &blockref, ElementIndices& inds, std::vector<bool> &deadArea);\r\n  void createCandidatesHCALUnlinked(const reco::PFBlock &block, reco::PFBlock::LinkData& linkData, const edm::OwnVector<reco::PFBlockElement> &elements, std::vector<bool>& active, const reco::PFBlockRef &blockref, ElementIndices& inds, std::vector<bool> &deadArea);\r\n  void createCandidatesECAL(const reco::PFBlock &block, reco::PFBlock::LinkData& linkData, const edm::OwnVector<reco::PFBlockElement> &elements, std::vector<bool>& active, const reco::PFBlockRef &blockref, ElementIndices& inds, std::vector<bool> &deadArea);\r\n```\r\n\r\nThe functionality and physics logic of PFAlgo have not been changed, therefore timing, memory usage and physics output should be the same.\r\n\r\nThis is meant to further clear up PFAlgo code, for which I imagine the path could be something like the following:\r\n\r\n- [x] Factorize `PFAlgo::processBlock` to smaller subfunctions (this PR and https://github.com/cms-sw/cmssw/pull/26894)\r\n- [x] Follow up with a clang-format pass.\r\n- [x] Sanitize the inputs and outputs of the functions and making sure they rely less on the PFAlgo state, each function ideally having a single purpose and clear inputs and outputs.\r\n- [ ] Given the cleaned-up implementation from above, revisit the logic/physics of the algo to rewrite it from with Run3/HL-LHC in mind\r\n- [ ] Compare to an eventual ML PF algo that arrives in CMS\r\n\r\nTherefore, please do not consider the function names, arguments etc as final at this stage.\r\n\r\n#### PR validation:\r\n\r\nWe do not change the functionality of the PFAlgo, hence the output should not change at all and timing performance should change only in as much as the C++ compiler is able to optimize the code better. We have checked this in a previous version of this PR, see [here](https://github.com/jpata/cmssw/pull/44). I'm running the following comparisons:\r\n- `runTheMatrix -l 38.0` between 45a962ed4ce87e899871bb214718f03464bef678 and 17507fb9bbd5f1db06dda9c95d52758ef2356994: output files have the same number of bytes\r\n\r\ncc PF group: @hatakeyamak @bendavid\r\n", "branch": "master", "changed_files": 2, "closed_at": "1560409091", "comments": 27, "commits": 4, "created_at": "1559941599", "deletions": 565, "labels": ["code-checks-approved", "comparison-available", "fully-signed", "orp-approved", "reconstruction-approved", "tests-approved"], "merge_commit_sha": "d8ec79544b1b61201ab6dec0cc530de592181ab7", "merged_at": "1560409091", "merged_by": "cmsbuild", "milestone": "CMSSW_11_0_X", "number": 27153, "release-notes": [], "review_comments": 13, "state": "closed", "title": "Further non-physics refactoring of PFAlgo::processBlock", "updated_at": "1565969991", "user": "jpata"}