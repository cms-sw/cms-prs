{"additions": 1870, "auther_ref": "globalVars_113X", "auther_sha": "c9e21b73938d133b385578ae3f88db2f354453d3", "author": "alejands", "body": "#### PR description:\r\n\r\nAn issue with with the access and storage of database variables in the ECAL DQM code was brought up here: https://github.com/cms-sw/cmssw/issues/28858\r\n\r\nInside EcalDQMCommonUtils.cc, there were 4 variables defined globally that saved pointers from EventSetup and made these variables accessible through global functions. The code attempted to make this thread safe by implementing a mutex.\r\n\r\n```\r\nstd::mutex mapMutex;\r\nEcalElectronicsMapping const *electronicsMap(nullptr);\r\nEcalTrigTowerConstituentsMap const *trigtowerMap(nullptr);\r\nCaloGeometry const *geometry(nullptr);\r\nCaloTopology const *topology(nullptr);\r\n```\r\n\r\nThere were several issues with this:\r\n\r\n1: Functions like getElectronicsMap() do not lock the mutex before accessing the global variable, leading to a potential data race with potentially undefined behavior.\r\n\r\n2: CMSSW is moving to rely more on multi-threaded processing, and objects such as a mutex lead to blocking and poor multi-threading performance.\r\n\r\n3: This approach does not support data that needs to be updated at IOV boundaries, which is a potential issue.\r\n\r\n4: This violates rule 7-1 of CMS coding and style rules: Do not use mutable global data (no globals).\r\n\r\n5: This created dependencies between the modules that required them to be executed in a specific order that is not easy for developers to understand. \r\n\r\nThis PR removes the global variables and instead makes them member variables of each module. Most of this is done by defining the variables inside DQWorker, a class that the majority of ECAL DQM modules inherit from. \r\n\r\nThere are a few exceptions inside DQM/EcalMonitorDbModule, where some variables had to be defined separately for specific plugins that could not inherit easily from DQWorker. \r\n\r\nA side effect of this approach is that a large portion of DQM/EcalCommon needed to be modified. Most of (if not all) of the classes defined here heavily relied on the fact that these variables were accessible from global functions. Now, the variables have to passed to every function that needs them, as the classes and functions here no longer had free access to these values.\r\n\r\nMany of the functions inside MESet and its derived classes required multiple variables in order to work. For neatness, a struct was created, EcalDQMSetupObjects, that can pass all the variables at once, rather than having to pass 2, 3, or 4 additional variables to a given function.\r\n\r\nIn addition, overloaded functions, such as fill() for each MESet, had some versions that used the old global setup variables and some that didnt. To avoid the compiler choosing the incorrect function during overload resolutions, each fill function (and other overloaded functions) is now passed a copy of these variables. \r\n\r\nFor example, these first two fill functions use the setup variables \r\n```\r\nvoid fill(EcalDQMSetupObjects const, DetId const &, double = 1., double = 0., double = 0.) override;\r\nvoid fill(EcalDQMSetupObjects const, EcalElectronicsId const &, double = 1., double = 0., double = 0.) override;\r\n```\r\n\r\nWhile this third one does not, but is passed to them anyway.\r\n```\r\nvoid fill(EcalDQMSetupObjects const, int, double = 1., double = 1., double = 1.) override;\r\n```\r\n\r\nThis is to avoid the compiler type casting a DetId or and EcalElectronicsId into an int. Otherwise, a call such as fill(detid) would compile but lead to undefined behavior and a crash at runtime, with the error not easy to spot.\r\n\r\nIn the end, each module now contains a copy of the EventSetup pointers and passes them to the EcalCommon functions that require them. As a toy example,\r\n```\r\nmeSet.fill(GetEcalDQMSetupObjects(), detid);\r\n```\r\n\r\n#### PR validation:\r\n\r\nThe fix was validated on both physics and calibration ECAL online DQM-like workflows using data from 2018 pp collisions in stable beams. The output was compared to the output of the old code to ensure that there were no changes to the plots. This was checked using a private Online DQM GUI, checking every ECAL layout and ensuring that every plot was identical before and after this fix was implemented.\r\n\r\nThe fix was also validated on a full offline DQM relval workflow 136.874 using the runTheMatrix script\r\n```\r\nrunTheMatrix.py -l 136.874 --ibeos\r\n```\r\nThe output was compared before and after the fix using a private Offline DQM GUI, again checking every layout and plot and seeing no changes.\r\n\r\nThe memory usage was also compared before and after using the dqmStoreStats utility https://github.com/cms-sw/cmssw/blob/master/DQMServices/Components/python/DQMStoreStats_cfi.py as well as the SimpleMemoryCheck service https://twiki.cern.ch/twiki/bin/view/CMSPublic/SWGuideEDMTimingAndMemory#SimpleMemoryCheck_service. The difference in peak memory usage increased by 40kb during processing, which we deemed to be negligible.", "branch": "master", "changed_files": 77, "closed_at": "1615981567", "comments": 8, "commits": 5, "created_at": "1615944296", "deletions": 1569, "labels": ["code-checks-approved", "dqm-approved", "fully-signed", "orp-approved", "tests-approved"], "merge_commit_sha": "67f8a97cd67c09d19ae246d807cb5fd71c6e8e63", "merged_at": "1615981567", "merged_by": "cmsbuild", "milestone": "CMSSW_11_3_X", "number": 33200, "release-notes": [], "review_comments": 0, "state": "closed", "title": "Removing global variables from EcalDQMCommonUtils", "updated_at": "1615981568", "user": "alejands"}