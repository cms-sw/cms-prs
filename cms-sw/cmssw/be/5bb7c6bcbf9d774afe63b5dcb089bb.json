{"additions": 18, "auther_ref": "disable-boost-shared_ptr-array-operator", "auther_sha": "188a21157ab3144fe6245cd35e8e1e89257e3d05", "author": "davidlt", "body": "Starting Boost 1.53.0 a new feature was introduced into\nboost::shared_ptr: a support for a pointer to a dynamically\nallocated array.\n\nThis is achieved by adding `operator[](std::ptrdiff_t) const` to\nall instances on boost::shared_ptr. There are two levels of protection\nhere:\n- Runtime checks that the pointer you hold is an array\n- A trait returns `void` return type for non-array types in\n  `boost::shared_ptr`\n\nThe second point creates compilation errors in Reflex dictionaries.\nReflex needs to generate a call for `operator[]`, but by doing that we\nget `operator[]` with return type `void` and with `return` statement.\n\nThink about it as a static assert.\n\nSimply put Reflex does not know, that it should not call `operator[]` on\nnot array `boost::shared_ptr`.\n\n```\nreco::parser::ExpressionPtr : boost::shared_ptr<reco::parser::ExpressionBase>\nreco::parser::SelectorPtr   : boost::shared_ptr<reco::parser::SelectorBase>\n```\n\nThese are not pointers to dynamically allocated arrays.\n\nThe patch disables `operator[]` on them (will not be visible in\ninterpreter).\n\nMore details available in: https://github.com/cms-sw/cmsdist/issues/1167\n\nNo difference with Boost 1.51.0 (current version)\n\n```\n--- xr.orig.cc  2014-11-08 10:32:06.000000001 +0100\n+++ xr.new.cc   2014-11-08 10:36:34.000000001 +0100\n@@ -1,4 +1,4 @@\n-// Generated at Sat Nov  8 10:31:31 2014. Do not modify it\n+// Generated at Sat Nov  8 10:36:08 2014. Do not modify it\n\n /*\n GCC-XML version 0.9.0\n```\n\nThe difference with Boost 1.57.0 (removes `operator[]`)\n\n```\n--- xr.orig.cc  2014-11-08 10:42:07.557000304 +0100\n+++ xr.new.cc   2014-11-08 10:44:41.610120525 +0100\n@@ -1,4 +1,4 @@\n-// Generated at Sat Nov  8 10:41:56 2014. Do not modify it\n+// Generated at Sat Nov  8 10:44:29 2014. Do not modify it\n\n/*\nGCC-XML version 0.9.0\n@@ -118,7 +118,6 @@ namespace {\n  ::Reflex::Type type_5985c = ::Reflex::ConstBuilder(type_5985);\n  ::Reflex::Type type_6786 = ::Reflex::ReferenceBuilder(type_5985c);\n  ::Reflex::Type type_6784 = ::Reflex::ReferenceBuilder(type_5985);\n-  ::Reflex::Type type_1928 = ::Reflex::TypedefTypeBuilder(Reflex::Literal(\"std::ptrdiff_t\"), type_121);\n  ::Reflex::Type type_1627 = ::Reflex::PointerBuilder(type_69);\n  ::Reflex::Type type_13803 = ::Reflex::TypedefTypeBuilder(Reflex::Literal(\"boost::core::typeinfo\"), type_636);\n  ::Reflex::Type type_13837 = ::Reflex::TypedefTypeBuilder(Reflex::Literal(\"boost::detail::sp_typeinfo\"), type_13803);\n@@ -127,6 +126,7 @@ namespace {\n  ::Reflex::Type type_6780 = ::Reflex::PointerBuilder(type_5985);\n  ::Reflex::Type type_6782 = ::Reflex::PointerBuilder(type_5985c);\n  ::Reflex::Type type_2063 = ::Reflex::TypedefTypeBuilder(Reflex::Literal(\"std::size_t\"), type_103);\n+  ::Reflex::Type type_1928 = ::Reflex::TypedefTypeBuilder(Reflex::Literal(\"std::ptrdiff_t\"), type_121);\n  ::Reflex::Type type_2083c = ::Reflex::ConstBuilder(type_2083);\n  ::Reflex::Type type_14096 = ::Reflex::ReferenceBuilder(type_2083c);\n  ::Reflex::Type type_1848c = ::Reflex::ConstBuilder(type_1848);\n@@ -624,11 +624,6 @@ static  void operator_13929( void* retad\n  else   (((const ::boost::shared_ptr<reco::parser::SelectorBase>*)o)->operator->)();\n}\n\n-static  void operator_13930( void*, void* o, const std::vector<void*>& arg, void*)\n-{\n-  (((const ::boost::shared_ptr<reco::parser::SelectorBase>*)o)->operator[])(*(::std::ptrdiff_t*)arg[0]);\n-}\n-\nstatic  void method_13931( void* retaddr, void* o, const std::vector<void*>&, void*)\n{\n  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::boost::shared_ptr<reco::parser::SelectorBase>*)o)->get)());\n@@ -724,7 +719,6 @@ void __boost__shared_ptr_reco__parser__S\n  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_69), Reflex::Literal(\"reset\"), method_13927, 0, 0, ::Reflex::PUBLIC)\n  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_15339), Reflex::Literal(\"operator*\"), operator_13928, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)\n  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_15414), Reflex::Literal(\"operator->\"), operator_13929, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)\n-  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_69, type_1928), Reflex::Literal(\"operator[]\"), operator_13930, 0, \"i\", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)\n  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_15414), Reflex::Literal(\"get\"), method_13931, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)\n  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_15579), Reflex::Literal(\"operator reco::parser::SelectorBase* boost::shared_ptr<reco::parser::SelectorBase>::*\"), converter_13932, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONVERTER | ::Reflex::CONST)\n  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_405), Reflex::Literal(\"operator!\"), operator_13933, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)\n@@ -1098,11 +1092,6 @@ static  void operator_13908( void* retad\n  else   (((const ::boost::shared_ptr<reco::parser::ExpressionBase>*)o)->operator->)();\n}\n\n-static  void operator_13909( void*, void* o, const std::vector<void*>& arg, void*)\n-{\n-  (((const ::boost::shared_ptr<reco::parser::ExpressionBase>*)o)->operator[])(*(::std::ptrdiff_t*)arg[0]);\n-}\n-\nstatic  void method_13910( void* retaddr, void* o, const std::vector<void*>&, void*)\n{\n  if (retaddr) *(void**)retaddr = Reflex::FuncToVoidPtr((((const ::boost::shared_ptr<reco::parser::ExpressionBase>*)o)->get)());\n@@ -1198,7 +1187,6 @@ void __boost__shared_ptr_reco__parser__E\n  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_69), Reflex::Literal(\"reset\"), method_13906, 0, 0, ::Reflex::PUBLIC)\n  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_15333), Reflex::Literal(\"operator*\"), operator_13907, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)\n  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_15408), Reflex::Literal(\"operator->\"), operator_13908, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)\n-  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_69, type_1928), Reflex::Literal(\"operator[]\"), operator_13909, 0, \"i\", ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)\n  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_15408), Reflex::Literal(\"get\"), method_13910, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONST)\n  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_15577), Reflex::Literal(\"operator reco::parser::ExpressionBase* boost::shared_ptr<reco::parser::ExpressionBase>::*\"), converter_13911, 0, 0, ::Reflex::PUBLIC | ::Reflex::CONVERTER | ::Reflex::CONST)\n  .AddFunctionMember(::Reflex::FunctionTypeBuilder(type_405), Reflex::Literal(\"operator!\"), operator_13912, 0, 0, ::Reflex::PUBLIC | ::Reflex::OPERATOR | ::Reflex::CONST)\n```\n\nSigned-off-by: David Abdurachmanov David.Abdurachmanov@cern.ch\n", "branch": "CMSSW_7_3_X", "changed_files": 1, "closed_at": "1415607382", "comments": 5, "commits": 1, "created_at": "1415436479", "deletions": 18, "labels": ["analysis-approved", "comparison-available", "fully-signed", "tests-approved"], "merge_commit_sha": "be3c0eea868379dc9d97037d4d1c681e75978657", "merged_at": "1415607382", "merged_by": "cmsbuild", "milestone": "Next CMSSW_7_3_X", "number": 6289, "release-notes": [], "review_comments": 0, "state": "closed", "title": "Remove `operator[](std::ptrdiff_t) const` from boost::shared_ptr", "updated_at": "1415607382", "user": "davidlt"}