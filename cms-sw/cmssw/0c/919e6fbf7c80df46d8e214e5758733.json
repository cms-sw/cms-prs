{"additions": 359, "auther_ref": "FlaggedPtr", "auther_sha": "24ad716b54aed2fdd9ce9748a1ad70a973307b15", "author": "guitargeek", "body": "#### PR description:\r\n\r\nOne of the confusing aspects about the particle flow code are these intricate nested std:: types, which causes things in the code like `->first.second->` and you have no idea what you are dealing with anymore. It is not easy to improve this in one PR, therefore I propose just a little change to slightly improve the situation in PFEgammaAlgo.\r\n\r\nThe proposal is to replace the `std::pair<const T*,bool>` types with a new class `FlaggedPtr<T>`, which behaves just like a (smart) pointer wrapping the  `const T*` plus the possibility to set the flag. In particular, the `->` operator of that new class simplifies the `PFEgammaAlgo` code quite a bit.\r\n\r\nI think I should not do more in one PR, but I hope this is the right way to the improve the PFEgamma code with new types. Maybe this could be even extended in the future to a `PfPtr` with an \"index\" (of the element in the block), a \"type\", and the flag. The other advantage is that if the flagging is not needed anymore, the `FlaggedPtr` can be replaced easily with a raw or smart pointer.\r\n\r\n#### PR validation:\r\n\r\nCMSSW compiles and matrix tests pass.", "branch": "master", "changed_files": 4, "closed_at": "1558506757", "comments": 47, "commits": 4, "created_at": "1556385559", "deletions": 346, "labels": ["code-checks-approved", "comparison-available", "fully-signed", "orp-approved", "reconstruction-approved", "tests-approved"], "merge_commit_sha": "4ee31599d1ac9937ae1f6253979d65a9c3dd0108", "merged_at": "1558506757", "merged_by": "cmsbuild", "milestone": "CMSSW_11_0_X", "number": 26559, "release-notes": [], "review_comments": 0, "state": "closed", "title": "PFEgammaAlgo - New FlaggedPtr class", "updated_at": "1558518444", "user": "guitargeek"}