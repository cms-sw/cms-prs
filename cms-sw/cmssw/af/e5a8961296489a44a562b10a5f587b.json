{"additions": 22828, "auther_ref": "alpaka_port_13_1", "auther_sha": "3e88dbd3b7c2ca16569a5278d84054ba79668a5e", "author": "PixelTracksAlpaka", "body": "#### PR description:\r\n\r\nCommon work with @borzari and @nothingface0.\r\n\r\nThis PR will allow to run Pixel Tracks Reconstruction in Alpaka. It's still a work in progress and needs to be properly tested. We are opening it so that it is (more) public and may be reviewed by experts. \r\n\r\nWill updated the description accordingly while updating the PR.\r\n\r\nThis includes https://github.com/cms-sw/cmssw/pull/40932 with the latest comments received addressed.\r\n\r\nThis is *not to merge* and it's here for testing purposes. It has been split in 8 smaller PRs, to be merged in sequence, to ease the review:\r\n\r\n- https://github.com/cms-sw/cmssw/pull/43295\r\n- https://github.com/cms-sw/cmssw/pull/41285\r\n- https://github.com/cms-sw/cmssw/pull/41286\r\n- https://github.com/cms-sw/cmssw/pull/41287\r\n- https://github.com/cms-sw/cmssw/pull/41288\r\n- https://github.com/cms-sw/cmssw/pull/43294\r\n\r\n(@ericcano)\r\n\r\n\r\n------\r\n### 21st November\r\n\r\nTested with #43064, everything is fine. Some general clean-up renaming:\r\n- all the SOA `DataFormats` now are in the form `DataFormats/XYXSoA/`;\r\n- naming uniformly the SoA classes with `XYZHost`, `XYZDevice`, `XYZsSoACollection`;\r\n- started to remove all the remaining `*GPU` objects in Alpaka code either with `*Device` or nothing (e.g. `GPUAlgo` -> `Algo`);\r\n- fixing `CopyToHost` methods to avoid useless specialization for `Host` to `Host` copy;\r\n-   added `ASSERT_DEVICE_MATCHES_HOST_COLLECTION` everywhere\r\n-  used the \"automatic dictionary\" generator with `SET_PORTABLEHOSTCOLLECTION_READ_RULES`;\r\n- using `std::conditional_t` for collection Host/Device definition.\r\n------\r\n### 15th November\r\n\r\nThis now includes #43064 up to 5f9c2e62c82c8f5a6ea6cb93a2e67bb3ec564388.\r\n \r\n------\r\n### 19th October \r\n\r\nWe will use this PR as a proxy for the full development in order to be able to run the integration tests. Changing the status to \"Ready to review\" to be able to run the bot commands and checks.\r\n\r\n\r\n### Module Naming\r\n\r\nFor the moment we applied the following rule for the naming:\r\n1. where the module had in it's name `CUDA` we simply drop the `CUDA` suffix;\r\n2. where this is not possible or doesn't apply we appended `Alpaka` to the module name.\r\n\r\nWhere 2. usually applies to SoA to legacy converters.\r\n\r\n#### Additional workflows\r\n\r\nAn `alpaka` process modifier is added togheter with a set of new workflows:\r\n\r\n- `*.55` running Pixel only in Alpaka;\r\n- `*.554` running Pixel only in Alpaka for profiling;\r\n- `*.557` running Pixel only in Alpaka for CPU vs GPU validation;\r\n\r\nA note: in order to cohabit with the CUDA workflows, for the modules providing the conversion to legacy formats, we had to live with the `SwitchProducedCUDA` logic. For example, for the local reco configurations, `siPixelRecHitsPreSplitting` is defined as:\r\n\r\n```python \r\n# SwitchProducer wrapping the legacy pixel rechit producer\r\nsiPixelRecHitsPreSplitting = SwitchProducerCUDA(\r\n    cpu = siPixelRecHits.clone(\r\n        src = 'siPixelClustersPreSplitting'\r\n    )\r\n)\r\n```\r\n\r\nand in order to be able to modify or replace it with `toModify` or `toReplaceWith`, the `alpaka` modifier acts on the `cpu` branch of the `SwitchProducedCUDA`.\r\n\r\n```python\r\n(alpaka & ~phase2_tracker).toModify(siPixelRecHitsPreSplitting,\r\n    cpu = _siPixelRecHitFromSoAAlpakaPhase1.clone(\r\n            pixelRecHitSrc = cms.InputTag('siPixelRecHitsPreSplittingAlpaka'),\r\n            src = cms.InputTag('siPixelClustersPreSplitting'))\r\n)\r\n```\r\nThis was the only way we found to keep the same naming for the final AoS products.\r\n\r\n#### Run3 Physics Results\r\n\r\nFind [here](https://adiflori.web.cern.ch/adiflori/alpaka_prof/run3_plots/) all the validation plots from MTV for Run3 ttbar.\r\n\r\nResults are almost perfectly overlapping with the exception for the $d_{xy}$ resolution that is degradated (see e.g. [here](https://adiflori.web.cern.ch/adiflori/alpaka_prof/run3_plots/gpu_quads/plots_pixel_pixel/resolutionsPt.pdf)). We are investigating this and should have spotted the culprit.\r\n\r\n#### Run3 Througput\r\n\r\nRunning a profiling workflow on Run3 data (Run 370293) on `fu-c2a02-37-02` we see a degradation in performance (around 20% in througput).\r\n\r\n\r\n![](https://adiflori.web.cern.ch/adiflori/alpaka_prof/zoom.png)\r\n\r\nNote that when running a single EDM stream CUDA and Alpaka throughput are the same.\r\n\r\n------\r\n### 20th October\r\n\r\nWith 66f48f9889b0796d184e80b19682cbf757e8c413 fixed tests (thanks to @ericcano). For the moment commented the `testOneHistoContainer` tests since the issue is solved in #43064. `RecoTracker/PixelTrackFitting/testEigenGPUNoFit_t` fails also in a clean `CMSSW_13_3_X_2023-10-18-1100`.\r\n", "branch": "master", "changed_files": 263, "comments": 53, "commits": 38, "created_at": "1679395679", "deletions": 78, "labels": ["reconstruction-pending", "simulation-pending", "dqm-pending", "hlt-pending", "alca-pending", "db-pending", "operations-pending", "pending-signatures", "tests-pending", "orp-pending", "new-package-pending", "pdmv-pending", "upgrade-pending", "code-checks-approved", "xpog-pending", "heterogeneous-pending", "tracking", "trk"], "milestone": "CMSSW_14_0_X", "number": 41117, "release-notes": [], "review_comments": 85, "state": "open", "title": "Porting Pixel Tracks to Alpaka [Not to Merge] ", "updated_at": "1700575261", "user": "AdrianoDee"}