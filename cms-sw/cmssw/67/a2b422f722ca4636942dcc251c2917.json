{"additions": 1939, "auther_ref": "implementConcurrentRuns5", "auther_sha": "fce588ec24d8b7ee2199e21d99e56c9d9478d3ec", "author": "wddgit", "body": "#### PR description:\r\n\r\nImplement support for concurrent runs in the Framework.\r\n\r\nThe design is analogous to what was done to implement\r\nconcurrent luminosity blocks as much as possible, although\r\nthere are unavoidable differences.\r\n\r\nOne can configure how many concurrent runs are allowed.\r\nThe default is one. With that setting, almost nothing externally\r\nvisible should change in the behavior of cmsRun. There\r\nare significant and complex changes in the Framework\r\nimplementation to support this new ability.\r\n\r\nThis pull request does NOT upgrade modules and services outside\r\nthe Framework to support concurrent runs. We expect many of them\r\nwill fail if the number of concurrent runs is configured to be\r\nmore than one in an existing production configuration. We have not\r\nsurveyed existing code to see which modules and services cannot\r\nsupport concurrent runs. Most should be OK because they do not\r\ndepend on run transitions. But for example, a module designed\r\nto create per run histograms might have problems with concurrent\r\nruns.\r\n\r\nOne configures the \"numberOfConcurrentRuns\" in the top level\r\noptions parameter set. If it is 0 or greater than the number\r\nof concurrent lumis, then it will be reset to equal the\r\nnumber of concurrent lumis.\r\n\r\nIf an EventSetup IOV changes at a run boundary, then one also\r\nwould need to configure concurrent IOVs for that record to two\r\nto actually have the runs on both sides of that run boundary process\r\nconcurrently. Without that cmsRun would execute properly, but the\r\nIOVs would block concurrent execution. In addition, it is technically\r\npossible for the sequence of transitions beginLumi, endRun,\r\nbeginRun, and beginLumi to all have different IOVs. An EventSetup\r\nrecord with such IOVs would need to be configured to allow\r\n4 concurrent IOVs to process both runs concurrently across\r\nsuch a run boundary.\r\n\r\nIt is the design intent that the rest of changes are transparent\r\nto the user (beyond what is discussed above).\r\n\r\n#### PR validation:\r\n\r\nThere are a few new unit tests. Existing unit tests pass. In fact\r\nexisting unit tests covered most of the features one might be\r\nconcerned about with this pull request. Of the new tests, these two\r\nconfigurations are the most significant:\r\n\r\nFWCore/Integration/test/testConcurrentIOVsAndRuns_cfg.py\r\nFWCore/Integration/test/testConcurrentIOVsAndRunsRead_cfg.py\r\n", "branch": "master", "changed_files": 72, "closed_at": "1658321535", "comments": 4, "commits": 2, "created_at": "1658321479", "deletions": 1414, "labels": ["simulation-pending", "core-pending", "pending-signatures", "tests-pending", "orp-pending", "code-checks-approved"], "milestone": "CMSSW_12_5_X", "number": 38800, "release-notes": [], "review_comments": 0, "state": "closed", "title": "Implement support for concurrent runs in the Framework", "updated_at": "1658322757", "user": "wddgit"}