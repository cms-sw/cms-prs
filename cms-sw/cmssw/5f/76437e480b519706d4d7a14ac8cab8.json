{"additions": 809, "auther_ref": "esconsumesMixingModule", "auther_sha": "7f1c3b197a1f925c2b4dfb7f926b1880df7ccdb8", "author": "makortel", "body": "#### PR description:\r\n\r\nThis PR is part of #31061. In addition of plain migration to EventSetup consumes I did some refactoring related to getting the EventSetup products (like moving the `get()` calls from beginRun/beginLumi to Event, and passing around const references to ES products instead of `edm::ESHandle`). It has two caveats (which make the \"most of\") that need to be discussed/agreed:\r\n\r\nI noticed the `MixingModule` (and `BMixingModule` base class, so affects all mixing modules) have the capability of updating the mixing parameters from the EventSetup, see e.g.\r\nhttps://github.com/cms-sw/cmssw/blob/c51856dddbcd16b2f68d98df921df9d083abcbb6/SimGeneral/MixingModule/plugins/MixingModule.cc#L290-L301\r\nhttps://github.com/cms-sw/cmssw/blob/c51856dddbcd16b2f68d98df921df9d083abcbb6/Mixing/Base/src/PileUp.cc#L235-L240\r\nFor the EventSetup consumes that alone is fine, but the pixel digitizer uses the bunchspacing to decide which of the two ES products it gets\r\nhttps://github.com/cms-sw/cmssw/blob/c51856dddbcd16b2f68d98df921df9d083abcbb6/SimTracker/SiPixelDigitizer/plugins/SiPixelDigitizerAlgorithm.cc#L587-L595\r\nIn principle it could be possible for the product-to-be-got to change in the IOV boundaries of `MixingRcd` (if this mode of operation would be enabled), on the other hand updates after the first event are, in fact, already made impossible by\r\nhttps://github.com/cms-sw/cmssw/blob/c51856dddbcd16b2f68d98df921df9d083abcbb6/SimTracker/SiPixelDigitizer/plugins/SiPixelDigitizer.cc#L260-L264\r\nNevertheless, it could be that the mixing parameters would be read from an EventSetup object instead of configuration. If this mode of operation needs to be supported, we need to figure out some way to get only (right) one of the `SiPixelDynamicInefficiency` products instead of both as in this PR. Possibilities include an ESProducer mayConsume-type feature, or abstracting the choice between the products into a new ESProducer. Anyway, the big question is **if MixingModule infrastructure has to continue to support changing mixing parameters based on `MixingModuleConfig` EventSetup product?**\r\n\r\n[Answer below](https://github.com/cms-sw/cmssw/pull/31697#issuecomment-708095420): this mode should continue to be supported. To be done in a subsequent PR.\r\n\r\nI did not migrate `DataMixingModule` (because it is not being used). Likely it becomes even more broken with this PR. **I hope this is acceptable.**\r\n\r\n[Answer below](https://github.com/cms-sw/cmssw/pull/31697#issuecomment-708095420): Breaking `DataMixingModule` even more is acceptable.\r\n\r\n#### PR validation:\r\n\r\nLimited matrix runs.", "branch": "master", "changed_files": 82, "closed_at": "1619763430", "comments": 39, "commits": 3, "created_at": "1602077130", "deletions": 871, "labels": ["alca-approved", "code-checks-approved", "db-approved", "fully-signed", "orp-approved", "reconstruction-approved", "simulation-approved", "tests-approved", "upgrade-approved"], "merge_commit_sha": "87a7cf9418849dd918e69fca4ca1a6f8ffc1f1e8", "merged_at": "1619763430", "merged_by": "cmsbuild", "milestone": "CMSSW_12_0_X", "number": 31697, "release-notes": [], "review_comments": 2, "state": "closed", "title": "Migrate most of MixingModule and PreMixingModule to EventSetup consumes", "updated_at": "1619763431", "user": "makortel"}