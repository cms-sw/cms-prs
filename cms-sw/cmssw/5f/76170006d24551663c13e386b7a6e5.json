{"additions": 469, "auther_ref": "implement_blocks_with_stride", "auther_sha": "8c859bc84150f089c1b393abaabbed230f445b34", "author": "fwyzard", "body": "#### PR description:\r\n\r\nIntroduce four new utilities for writing Alpaka kernels:\r\n  - `blocks_with_stride(acc, size)`\r\n  - `elements_in_block(acc, block, size)`\r\n  - `once_per_grid(acc)`\r\n  - `once_per_block(acc)`\r\n\r\nSimplify the unit tests, and extend them to cover the newly introduced functionality.\r\n\r\n---\r\n\r\n##### blocks_with_stride\r\n\r\n`blocks_with_stride(acc, size)` returns a range than spans the (virtual) block indices required to cover the given problem size.\r\n\r\nFor example, if size is 1000 and the block size is 16, it will return the range from 0 to 62 (63 blocks of 16 elements covers 1008 elements, enough for a total size of 1000).\r\nIf the work division has more than 63 blocks, only the first 63 will perform one iteration of the loop, and the other will exit immediately.\r\nIf the work division has less than 63 blocks, some of the blocks will perform more than one iteration, in order to cover then whole problem space.\r\n\r\nAll threads in a block see the same loop iterations, while threads in different blocks may see a different number of iterations.\r\n\r\n##### elements_in_block\r\n\r\n`elements_in_block(acc, block, size)` returns a range that spans all the elements within the given block. Iterating over the range yields values of type `ElementIndex`, that contain both `.global` and `.local` indices of the corresponding element.\r\n\r\nIf the work division has only one element per thread, the loop will perform at most one iteration.\r\nIf the work division has more than one elements per thread, the loop will perform that number of iterations, or less if it reaches size.\r\n\r\n##### once_per_grid\r\n\r\n`once_per_grid(acc)` evaluates to true for a single thread within the kernel execution grid.\r\n\r\nUsually the condition is true for block 0 and thread 0, but these indices should not be relied upon.\r\n\r\n##### once_per_block\r\n\r\n`once_per_block(acc)` evaluates to true for a single thread within the block.\r\n\r\nUsually the condition is true for thread 0, but this index should not be relied upon.\r\n\r\n#### PR validation:\r\n\r\nThe updated unit tests compile and pass.\r\n\r\n#### If this PR is a backport please specify the original PR and why you need to backport that PR. If this PR will be backported please specify to which release cycle the backport is meant for:\r\n\r\nIf the `master` branch is moved to `CMSSW_14_0_X`, this PR will be backported to `CMSSW_13_3_X`.", "branch": "master", "changed_files": 2, "comments": 46, "commits": 5, "created_at": "1699288038", "deletions": 194, "labels": ["fully-signed", "tests-approved", "orp-pending", "code-checks-approved", "heterogeneous-approved"], "milestone": "CMSSW_14_0_X", "number": 43205, "release-notes": [], "review_comments": 0, "state": "open", "title": "Introduce new utilities for writing Alpaka kernels", "updated_at": "1699997237", "user": "fwyzard"}