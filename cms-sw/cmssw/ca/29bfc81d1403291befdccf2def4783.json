{"additions": 325, "auther_ref": "PFTrackImporterUpdateForPhase2_v5", "auther_sha": "fec870f600ff2db789ddd44f9818677be3ebb6d2", "author": "hatakeyamak", "body": "#### PR description:\r\n\r\nThere have been a known double-counting or under-counting between PF candidates coming from PFAlgo and PFTICL (or simPF), as discussed in:\r\n[1] https://indico.cern.ch/event/962223/#17-validation-of-pfticl-and-pf\r\n[2] https://indico.cern.ch/event/976773/#19-hgcal-ticl-status\r\n[3] https://indico.cern.ch/event/976773/#21-pfalgo-and-pfticl-boundary\r\n[4] https://indico.cern.ch/event/980703/#24-pfalgo-and-pfticl-boundary\r\n\r\nThis PR improves this boundary and there are visible improvements in offset and jet performance (based on standard PF validation tool).\r\nAlso there are questions on how to treat muons in the hgcal region when TICL is injected to PF. Here we make PF muons based on TICL outputs based on PFMuonAlgo. We discussed the option of masking muon-like track from TICL seeding. This option is not working as intended for now, so it may be considered for future.\r\n\r\nFor further details, the sources of double-counting and under-counting are:\r\n+ generally tracks in hgcalTrackCollection are not imported for PFBlockAlgo and not used in PFAlgo, with exception of tracks with muonref [1]. And, tracks with muonref are excluded from simPF, but there is no such treatment in TICL, and this leads to double-counting. \r\n+ also tracks imported to PF(Block)Algo from TrackFromParentImporter (from pfConversions etc) were not subject to check against hgcalTrackCollection. Now this check is also added.\r\n+ importers of tracks to PFBlockAlgo has been using hgcalTrackCollection for vetoes, while ticl uses ticlSeedingTrk based on slightly different selection.\r\n\r\nWith this PR, we use pfTICL charged candidates for veto of tracks to PFBlockAlgo to improve the boundary.\r\nThis PR also merges GeneralTracksImporter.cc and GeneralTracksImporterWithVeto.cc for easier maintenance. Also, the track veto in the track importers to PFBlockAlgo now checks not only track key but also ProductID which is important for some cases (e.g. tracks from conversionstep])\r\n\r\n#### PR validation:\r\n\r\nThe detailed validation can be found in:\r\nhttp://hep.baylor.edu/hatake/PFval/val_11_2_0_pre9_PFOverlaps/\r\n\r\n**And, the updated one after a few updates to PR can be found at:\r\nhttp://hep.baylor.edu/hatake/PFval/val_11_3_0_pre2_PFOverlaps/**\r\n\r\nA few highlights:\r\n+ Offset distributions seem more smooth at the barrel-endcap boundary for charged PF candidates as expected:\r\n   - pfTICL used. with and without this PR: http://hep.baylor.edu/hatake/PFval/val_11_2_0_pre9_PFOverlaps/ticl_test_ref/OffsetStacks/stack_NuGun_ticl_ref_vs_NuGun_ticl_test.pdf\r\n   **http://hep.baylor.edu/hatake/PFval/val_11_3_0_pre2_PFOverlaps/ticl_test_ref/OffsetStacks/stack_NuGun_ticl_ref_vs_NuGun_ticl_test.pdf**\r\n   - same as above, but track pt is used in order to see how smooth charged pf candidate pt density is when low pt charged candidates are calibrated based on tracks: http://hep.baylor.edu/hatake/PFval/val_11_2_0_pre9_PFOverlaps/offset_ticl_trkPt_test_ref/OffsetStacks/stack_NuGun_ticl_ref_trkPt_vs_NuGun_ticl_test_trkPt.pdf (same, but track pt is used in order to see how smooth charged pf candiddate pt density is when low pt charged candidates are calibrated based on tracks.)\r\n   - ticl vs simPF with this PR: http://hep.baylor.edu/hatake/PFval/val_11_2_0_pre9_PFOverlaps/ticl_simpf_test/OffsetStacks/stack_NuGun_ticl_test_vs_NuGun_simpf_test.pdf\r\n  **http://hep.baylor.edu/hatake/PFval/val_11_3_0_pre2_PFOverlaps/ticl_simpf_test/OffsetStacks/stack_NuGun_ticl_test_vs_NuGun_simpf_test.pdf**\r\n   - ticl vs simPF without this PR: http://hep.baylor.edu/hatake/PFval/val_11_2_0_pre9_PFOverlaps/ticl_simpf_ref/OffsetStacks/stack_NuGun_ticl_ref_vs_DQMfiles.pdf\r\n   - **http://hep.baylor.edu/hatake/PFval/val_11_3_0_pre2_PFOverlaps/ticl_simpf_ref/OffsetStacks/stack_NuGun_simpf_ref_vs_NuGun_ticl_ref.pdf**\r\n+ There are improvements in jet resolution in that region\r\n   - QCD PU200 puppi noJEC: http://hep.baylor.edu/hatake/PFval/val_11_2_0_pre9_PFOverlaps/ticl_test_ref/FlatQCD_PU_ParticleFlow/JetResponse/slimmedJetsPuppi/noJEC/reso_pt.pdf\r\n   - **http://hep.baylor.edu/hatake/PFval/val_11_3_0_pre2_PFOverlaps/ticl_test_ref/FlatQCD_PU_ParticleFlow/JetResponse/slimmedJetsPuppi/noJEC/reso_pt.pdf**\r\n+ Checked that, when PFTICL is injected, we no longer see any double-counting of tracks in 100 ZMM events with PU with this PR.\r\n\r\nAlso made sure matrix tests run fine for TTbar 2021 and 2026 (11634.0 & 23234.0).\r\n\r\n#### if this PR is a backport please specify the original PR and why you need to backport that PR:\r\n\r\nThis is not a backport.\r\n\r\n@rovere @felicepantaleo @hqucms @bendavid ", "branch": "master", "changed_files": 16, "closed_at": "1611720445", "comments": 66, "commits": 22, "created_at": "1606330116", "deletions": 225, "labels": ["code-checks-approved", "fully-signed", "hlt-approved", "orp-approved", "reconstruction-approved", "tests-approved", "upgrade-approved"], "merge_commit_sha": "7d92e5740944926123b1cfb0e7486a63e125ca25", "merged_at": "1611720445", "merged_by": "cmsbuild", "milestone": "CMSSW_11_3_X", "number": 32291, "release-notes": [], "review_comments": 53, "state": "closed", "title": "Improving the boundary between PFAlgo and PFTICL (or simPF) for phase2", "updated_at": "1611720446", "user": "hatakeyamak"}