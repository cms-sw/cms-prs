{"additions": 141, "auther_ref": "mkfit-valgrind", "auther_sha": "306b6634d5795fa5997263c72d2c8486c290629d", "author": "dan131riley", "body": "#### PR description:\r\n\r\nvalgrind memcheck complains about uninitialised values in a few new places where we loop over NN. This PR quiets them, mostly by conditionals on N_proc and partly by initializing some MkFitter structures to 0.0f.\r\n\r\nMy working theory is that a loop over constant NN with an if on N_proc is more vectorizable than a loop over an unbounded N_proc, since the compiler can infer that N_proc <= NN, and use an N_proc mask to vectorize the loop. Therefore, this PR also switches some loop indices from N_proc to NN + a conditional on N_proc.\r\n\r\nThis PR also empties the pools of MkFitter/MkBuilder objects in the MkFit producer, to at least partially address https://github.com/cms-sw/cmssw/issues/42700. Emptying the pool is thread-safe, so this should be safe when there are multiple instances of MkFit. tbb::concurrent_queue::clear() however is not thread safe, so calling it would require some kind of concurrency protection.\r\n\r\n#### PR validation:\r\n\r\nValidation with a standard TTBar PU55-75 showed no significant differences (validation was run multi-threaded, so small differences were not unexpected).\r\n", "branch": "master", "changed_files": 13, "comments": 1, "commits": 3, "created_at": "1705438871", "deletions": 87, "labels": ["reconstruction-pending", "pending-signatures", "tests-pending", "orp-pending", "code-checks-pending", "tracking"], "milestone": "CMSSW_14_0_X", "number": 43725, "release-notes": [], "review_comments": 0, "state": "open", "title": "Fix some MkFit valgrind warnings, improve loop vectorization", "updated_at": "1705438898", "user": "dan131riley"}