{"additions": 284, "auther_ref": "nano-types", "auther_sha": "00b26e72b56c4f5661d8bb074b59edb209b3a232", "author": "guitargeek", "body": "#### PR description:\r\n\r\nThis is just a re-opening of https://github.com/cms-nanoAOD/cmssw/pull/401 from September 2019, but this time to upstream CMSSW instead of cmssw-nanoAOD. Back in the day I was interested in storing columns of so far not supported basic types in NanoAOD (like `uint16_t`), and made some developments which are I think the first steps towards this. Since https://github.com/cms-sw/cmssw/pull/30273 set the precedent that technical NanoAOD developments are acceptable outside cmssw-nanoAOD, I reopen the PR here almost a year later. Original description in the following.\r\n\r\n----------\r\n\r\nHi NanoAOD devs!\r\n\r\nI hope this is the right cmssw fork and branch for this PR.\r\n\r\nYesterday I wanted to introduce some new column types in my private nanoAOD productions (int16_t for example, to save a bit of space) and use them in the flat table producers. However, I realized that there are many parts of the NanoAOD code which have to be tweaked if you want to do this, as the way how column types are handled is not completely trivial.\r\n\r\nOne source of complication is that when you add a column to a flat table with addColumn(), you have to pass the type as a template argument as well as an enum value in the function parameters. After working a bit with the code, I understood that this is redundant, because the check_type function makes sure you always use the right enum value with the right template parameter. Therefore, we could just drop this enum parameter and deduce it from the template argument. In this situation, we would also not need check_type anymore.\r\n\r\nThe only tricky part are bool columns, which should actually be represented by a uint8_t vector. So far, the logic to take care of this had to be implemented in the plugins that made use of the FlatTable class, but I think I found a way to have this logic directly in the FlatTable class so one can just use addColumn<bool> to create bool columns and they will be internally stored in the uint8_t vector.\r\n\r\nWhat do you think? This simplifies the type handling already quite a bit, and I think it's the good path towards a FlatTable class that will support all basic types that you can also store in TTrees.\r\n\r\nI tested this with the local matrix tests so far, can the nano-bot tests still be done here? That would be very cool!\r\n\r\nThanks for considering this and cheers,\r\nJonas\r\n\r\n#### PR validation:\r\n\r\n* CMSSW compiles\r\n* local matrix tests pass\r\n* bot tests in cms-nanoAOD pass (see https://github.com/cms-nanoAOD/cmssw/pull/401)\r\n\r\n#### if this PR is a backport please specify the original PR and why you need to backport that PR:\r\n\r\nNo backport  intended.\r\n", "branch": "master", "changed_files": 19, "closed_at": "1595585389", "comments": 102, "commits": 8, "created_at": "1593199714", "deletions": 415, "labels": ["analysis-approved", "code-checks-approved", "comparison-available", "core-approved", "fully-signed", "orp-approved", "reconstruction-approved", "tests-approved", "xpog-approved"], "merge_commit_sha": "8517d5c8533d1598de1dfe5d18a4d5a246f351f2", "merged_at": "1595585388", "merged_by": "cmsbuild", "milestone": "CMSSW_11_2_X", "number": 30436, "release-notes": [], "review_comments": 19, "state": "closed", "title": "[NanoAOD] Don't handle column types redundantly anymore", "updated_at": "1595585389", "user": "guitargeek"}