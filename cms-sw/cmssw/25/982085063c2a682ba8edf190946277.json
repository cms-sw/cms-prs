{"additions": 375, "auther_ref": "sipixel_errorchecker_refactor_26_04_2021", "auther_sha": "4911f505b2e0e918a1338c4bf61465893d24b964", "author": "czangela", "body": "### PR description:\r\n\r\nThis PR should resolve some duplication issues, namely:\r\n1. from #32483 reuse existing constants in `SiPixelRawToClusterGPUKernel`\r\n2. #26731 avoid code duplication in `SiPixelRawToDigi` `ErrorChecker's`\r\n\r\nAccordingly, the changes made can be categorized this way:\r\n1. Reusing different bit manipulation constants in all the `ErrorCheckers`, as well as `PixelDataFormatter` and `SiPixelRawToClusterGPUKernel`\r\nAs part of this effort I introduced a new namespace with some `constexpr` variables and functions named `sipixelconstants` and placed it in `DataFormats/SiPixelDigi`. It should probably have a different name, and I suppose a more appropriate place would be `DataFormats/SiPixelRawToDigi`, but I let that the more experienced contributors decide. I just didn't want to do the fifth rebase yet.\r\n2. Move common functions from `ErrorCheckerPhase0` and `ErrorChecker` (this is phase 1) to `ErrorCheckerBase`\r\nThis is really not harmful.\r\n\r\n### PR validation:\r\n\r\nSince this PR influences parts of the code which don't contribute to `DQM` histograms, there was a custom validation that took place.\r\n\r\nBasically, I was just printing the `FED errors` before and after the changes and comparing them.\r\n\r\n#### This is the description of this validation:\r\n\r\n---\r\n#### Phase 0 - workflow 136.731\r\n\r\n1. Run workflow, modify # of events to `4000`\r\n```sh\r\nrunTheMatrix.py -e -l 136.731 --ibeos -t 4 -j 0 --maxSteps=3\r\n```\r\n\r\n2. Run `step2` and `step3`\r\n During `step3` log events with `FED errors`.\r\n\r\n3. Select events with at least one `FED error`:\r\n    In repository `/afs/cern.ch/work/a/aczirkos/public/errorchecker_validation/phase1`\r\n    the file `runlumievent.txt` contains `378` entries of `run:lumi:event`\r\n\r\n4. With `edmPickEventy.py` use this file to filter the events\r\n```sh\r\nedmPickEvents.py \"SinglePhoton/Run2016B-v2/RAW\" <filename> --crab\r\n```\r\n\r\n5. Run with `crab`\r\n```sh\r\ncrab submit -c pickevents_crab.py\r\ncrab getoutput\r\n```\r\n\r\nExample result file in repository `/afs/cern.ch/work/a/aczirkos/public/errorchecker_validation/phase0` the file `step2.root`\r\n\r\n6. Run on reduced dataset `step3` before and after the changes.\r\n\r\nUse some custom `LogDebug` to track error collection. Make sure that no messages get dropped (indicated at the end of some generated log file).\r\n\r\nExample of adding `LogDebug` entry:\r\n```diff\r\ndiff --git a/EventFilter/SiPixelRawToDigi/src/PixelDataFormatter.cc b/EventFilter/SiPixelRawToDigi/src/PixelDataFormatter.cc\r\nindex 5557f806144..02a177018b5 100644\r\n--- a/EventFilter/SiPixelRawToDigi/src/PixelDataFormatter.cc\r\n+++ b/EventFilter/SiPixelRawToDigi/src/PixelDataFormatter.cc\r\n@@ -417,6 +417,11 @@ void PixelDataFormatter::unpackFEDErrors(PixelDataFormatter::Errors const& error\r\n                                          DetErrors& nodeterrors) {\r\n   const uint32_t dummyDetId = 0xffffffff;\r\n   for (const auto& [errorDetId, rawErrorsVec] : errors) {\r\n+\tfor (auto const& aPixelError : rawErrorsVec) {\r\n+        LogDebug(\"FedErrors\") << \"DETID: \" << errorDetId << \"; FED: \" << aPixelError.getFedId()\r\n+                              << \", TYPE: \" << aPixelError.getType() << \", WORD: \" << aPixelError.getWord32()\r\n+                              << \", MSG: \" << aPixelError.getMessage();\r\n+      }\r\n     if (errorDetId == dummyDetId) {  // errors given dummy detId must be sorted by Fed\r\n       nodeterrors.insert(nodeterrors.end(), rawErrorsVec.begin(), rawErrorsVec.end());\r\n     } else {\r\n```\r\n\r\nExample `MessageLogger` entry for `cmsDriver.py` python config file:\r\n```py\r\n# Output info to file detailedInfo.log\r\nprocess.MessageLogger = cms.Service(\"MessageLogger\",\r\n    destinations = cms.untracked.vstring('detailedInfo'),\r\n    categories         = cms.untracked.vstring('FedErrors'),\r\n    debugModules  = cms.untracked.vstring('*'),\r\n        detailedInfo          = cms.untracked.PSet(\r\n        threshold =  cms.untracked.string('DEBUG'),\r\n        default    =  cms.untracked.PSet(limit = cms.untracked.int32(0)),\r\n        INFO       =  cms.untracked.PSet(limit = cms.untracked.int32(0)),\r\n        DEBUG   = cms.untracked.PSet(limit = cms.untracked.int32(0)),\r\n        FedErrors = cms.untracked.PSet(limit = cms.untracked.int32(10000000))\r\n    )\r\n)\r\n```\r\n\r\n8. Compare the two log files\r\n\r\nExtract lines with FED errors\r\n```sh\r\ngrep DETID detailedInfo.log > errors01.log\r\n```\r\n\r\n##### Results\r\n##### Number # of FED errors by type in the validation data\r\n```\r\n      1 TYPE:30\r\n     15 TYPE:31\r\n    148 TYPE:37\r\n    249 TYPE:40\r\n```\r\n\r\nIn the repository `/afs/cern.ch/work/a/aczirkos/public/errorchecker_validation/phase0` there are the log files, root file and python config of the validation:\r\n```sh\r\nls -halt /afs/cern.ch/work/a/aczirkos/public/errorchecker_validation/phase0 \r\ntotal 238M\r\ndrwxr-xr-x. 2 aczirkos zh 2,0K mj  28 15.38 .\r\n-rw-r--r--. 1 aczirkos zh  62K mj  28 15.38 step3.py\r\ndrwxr-xr-x. 4 aczirkos zh 2,0K mj  28 15.31 ..\r\n-rw-r--r--. 1 aczirkos zh  36K mj  25 16.01 errors_01.log\r\n-rw-r--r--. 1 aczirkos zh  36K mj  25 16.01 errors_02.log\r\n-rw-r--r--. 1 aczirkos zh 7,1K mj  25 16.01 select_events.txt\r\n-rw-r--r--. 1 aczirkos zh 237M mj  25 14.37 step2.root\r\n```\r\n\r\nOne can compare the errors (in `bash` shell) such as\r\n```sh\r\ndiff <(sort errors_01.log) <(sort errors_02.log)\r\n```\r\nIn this example `errors_01.log` is before and `errors_02.log` is after changes.\r\nThey should have no differences.\r\n\r\n---\r\n#### Phase 1 workflow 136.816\r\n\r\n1. Run workflow, only single-threaded\r\n```sh\r\nrunTheMatrix.py -e -l 136.816 --ibeos -t 1 -j 0 --maxSteps=3\r\n```\r\n\r\nSince FED errors are more common in the phase 1 data, running on *100* events will suffice.\r\n\r\n2. Basically do the same as with phase 0 just without steps 2-5. (since almost all events have errors)\r\n\r\n##### Results\r\n##### Number # of FED errors by type in the validation data\r\n```\r\n  21500 TYPE:25\r\n     93 TYPE:30\r\n     55 TYPE:31\r\n   6683 TYPE:37\r\n```\r\nNow from the repository `/afs/cern.ch/work/a/aczirkos/public/errorchecker_validation/phase1`\r\n```sh\r\nls -halt /afs/cern.ch/work/a/aczirkos/public/errorchecker_validation/phase1/\r\ntotal 882M\r\ndrwxr-xr-x. 2 aczirkos zh 2,0K mj  28 17.26 .\r\n-rw-r--r--. 1 aczirkos zh 2,7M mj  28 17.25 errors_02.log\r\n-rw-r--r--. 1 aczirkos zh 2,7M mj  28 16.49 errors_01.log\r\n-rw-r--r--. 1 aczirkos zh  20K mj  28 15.38 step3.py\r\n-rw-r--r--. 1 aczirkos zh 876M mj  28 15.36 step2.root\r\ndrwxr-xr-x. 4 aczirkos zh 2,0K mj  28 15.31 ..\r\n```\r\nAnd comparing the results (again, `errors_01.log` is before and `errors_02.log` is after changes)\r\n```sh\r\ndiff <(sort errors_01.log) <(sort errors_02.log)\r\n```\r\nAgain, no differences should appear.\r\n\r\n### if this PR is a backport please specify the original PR and why you need to backport that PR:\r\nit is not", "branch": "master", "changed_files": 13, "closed_at": "1622849355", "comments": 12, "commits": 24, "created_at": "1622208609", "deletions": 570, "labels": ["code-checks-approved", "fully-signed", "orp-approved", "reconstruction-approved", "simulation-approved", "tests-approved"], "merge_commit_sha": "a0ba0d9f4567520eaa338d2f64a40f615faca678", "merged_at": "1622849354", "merged_by": "cmsbuild", "milestone": "CMSSW_12_0_X", "number": 33884, "release-notes": [], "review_comments": 0, "state": "closed", "title": "Pixel local reco: reduce code duplication in SiPixelRawToDigi related code", "updated_at": "1622849355", "user": "czangela"}