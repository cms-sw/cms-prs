{"additions": 1117, "auther_ref": "fc-dd4hep-mtdnumbering", "auther_sha": "b6183de4f8849eabbec4e489ccf18df79723eebd", "author": "fabiocos", "body": "#### PR description:\r\n\r\nThis PR builds on top of #29599 and previous developments a porting of ```Geometry/MTDNumberingBuilder``` to DD4hep. In order to accomplish this task, additional ```SpecPars``` have been added in ```mtdStructureTopology``` to specify the list of volumes to be considered in the loop to build subdetectors, layers and modules. The names of BTL Layer1 and ETL discs have been extended with the addition of the ```Timing``` suffix to distinguish them from the tracker subvolumes, and resolve an ambiguity that DDCMS at present seems unable to handle (as reported to @ianna). The DDD code has been updated accordingly.\r\n\r\nNon negligible memory issues have been noticed with the ```navPos()``` method of DDCMS in this porting, and its use has been dropped from everywhere, and it is not used to fill ```GeometricTimingDet```, as it looks like this information is not anyway used afterwards (this was carbon-coped from tracker). They can be seen just adding the print of ```fv->navPos().size() ``` in the new test added in ```DDCMS``` for the ```cms::DDFilteredView```.  \r\n\r\nThe porting to DD4hep tries to:\r\n\r\n- use the FilteredView philosophy based on SpecPar selection, avoiding a full loop  based on ```fv.next(0)```;\r\n\r\n- keep the loop on the entire geometry inside a single method, avoiding nested calls to different levels as done in the Tracker geometry;\r\n\r\n- circumvent the nested filling of ```GeometricTimingDet``` containers by using intermediate temporary ```subdet``` and ```layer``` vectors. For the time being the bare pointer original structure of the containers has been kept to minimize simultaneous changes and disruption.\r\n\r\n#### PR validation:\r\n\r\nThe test configuration in ```Geometry/MTDNumberingBuilder``` runs on both scenario D50 and D53, providing identical lists of detIds. The DDD version is unchanged compared to the base reference. Differences in rotation matrices are due to the sign of terms that are null up to the 6th decimal digit. The calculation of ```Phi``` looks different for the top level volumes, but I believe this might be an artefact of translation vectors along the z direction. No difference is observed for modules. \r\n\r\nThe ```Geometry/MTDGeometryBuilder``` tests have been updated, they give the same result as before for DDD, there is a factor of 10 to be fixed in next developments for DD4hep.", "branch": "master", "changed_files": 42, "closed_at": "1589296559", "comments": 75, "commits": 13, "created_at": "1588665077", "deletions": 915, "labels": ["code-checks-approved", "comparison-available", "fully-signed", "geometry-approved", "orp-approved", "tests-approved", "upgrade-approved"], "merge_commit_sha": "51df64641d290613c5e60cc69fee1337ccd4dcd2", "merged_at": "1589296559", "merged_by": "cmsbuild", "milestone": "CMSSW_11_1_X", "number": 29647, "release-notes": [], "review_comments": 3, "state": "closed", "title": "MTD geometry: porting of MTDNumberingBuilder to DD4hep", "updated_at": "1589296937", "user": "fabiocos"}