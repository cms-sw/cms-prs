{"additions": 440, "auther_ref": "memory_leak_fixes", "auther_sha": "5284b19ece8a0273b1f7c2e6d9dbc8039d10d93b", "author": "guitargeek", "body": "Since I learned so much from the friendly CMSSW community on my last pull request fixing the RecoEgamma code quality issue, I now decided to attack the memory errors pointed out by the static analyzer. I hope to cause not too much trouble. The addressed bug types were:\r\n\r\n* Bad deallocator\r\n* Double delete\r\n* Memory leak\r\n* Offset free\r\n* Use of zero allocated\r\n\r\nThis corresponds to all memory error bug types, except for Use-after-free. These can be very twisted so I didn't tackle them for the moment.\r\n\r\nSome bugs were trivial, but I elaborate my reasoning on the two more intricate kind of problems:\r\n\r\n__Memory allocation in function arguments__\r\n\r\nThis appeared quite a lot with functions that have basically the signature `template <class T> someFunction(T* object)` and use `object` only to infer the template class. They were used like `someFunction(new Object)`. I thought it's better to use the signature `template <class T> someFunction();`, and then call the function as `someFunction<Object>()` with the template class given explicitly.\r\n\r\n__Custom reference counter implementations__\r\n\r\nThis appeared twice.\r\n\r\n* First incident here:\r\n  https://github.com/cms-sw/cmssw/blob/master/TopQuarkAnalysis/TopHitFit/src/Fit_Results.cc#L98\r\n  The static analyzer doesn't understand that the object will delete itself because it inherits from `TopQuarkAnalysis/TopHitFit/interface/Refcount.h`. Since the use of this Refcount class was very rare, I just deleted it and used `std::shared_ptr` instead, which is afaik implemented as a kind of reference counter. If you think that wasn't a particularly good idea, I'm curious to learn about the use about these custom reference counter implementations!\r\n\r\n* Second incident here:\r\n  https://github.com/cms-sw/cmssw/blob/master/Calibration/Tools/src/DetIdAssociator.cc#L35\r\n  The reference counter is implemented here:\r\n  https://github.com/cms-sw/cmssw/blob/master/DataFormats/GeometrySurface/interface/ReferenceCounted.h\r\n  This custom reference counter is deeply rooted in CMSSW, so I guess it must have some advantage over `std::shared_ptr`. Therefore I didn't dare to touch it and just turned the pointers into unique pointers. This way the static analyzer will stop complaining and I hope it doesn't somehow conflict with the objects being reference counted. However, an expert advice would be very appreciated, and maybe some background on why `ReferenceCounted` was introduced and what makes it different from a shared pointer.\r\n\r\nIn the more trivial memory leaks I proceeded as follows:\r\n* Allocated memory only used in local scope => wrap in shared pointer.\r\n* Otherwise (e.g. because ownership is transferred) => use `delete` at the places where the memory was leaking. That's 90 % of the cases.", "branch": "master", "changed_files": 54, "comments": 34, "commits": 4, "created_at": "1533043932", "deletions": 881, "labels": ["alca-pending", "analysis-pending", "code-checks-approved", "comparison-available", "db-pending", "dqm-approved", "generators-approved", "geometry-approved", "orp-pending", "pending-signatures", "reconstruction-approved", "tests-approved", "upgrade-pending"], "milestone": "CMSSW_10_3_X", "number": 24146, "release-notes": [], "review_comments": 29, "state": "open", "title": "Most static analyzer memory errors fixed", "updated_at": "1533736286", "user": "guitargeek"}