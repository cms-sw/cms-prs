{"additions": 1242, "auther_ref": "stripunpacker_exceptions", "auther_sha": "f0c4e61934314a36230ed2394b440374fcd726de", "author": "pieterdavid", "body": "#### PR description:\r\n\r\nThese changes address https://github.com/cms-sw/cmssw/issues/24825 (also tracked in jira as [CMSTRACK-161](https://its.cern.ch/jira/browse/CMSTRACK-161)): the strip unpacker does not throw exceptions anymore (those left in EventFilter/SiStripRawToDigi are only used in the packer, and signal a bad input, so I think they are acceptable). Instead, status codes are returned.\r\nThe extra information that used to be in the exception message is printed through `LogDebug`, so it won't be there in release builds anymore, but the warnings (by default: maximally once per type, and then a count at the end of the job) that were printed are still there (minus the information that came from the exception message - FED and channel ID are still there, these are the most relevant anyway).\r\n\r\nMost potential exceptions came from the `sistrip::FEDBuffer` (and `sistrip::FEDSpyBuffer`, together with their common base class `sistrip::FEDBufferBase`) constructor, so I moved the checks this does into a separate method that should be called before constructing a FED(Spy)Buffer, and returns a status code. For the FEDBuffer class there is also an initialisation step that could throw; I made it public and return a status code as well; a typical FEDBuffer construction then looks like this:\r\n```C++\r\nconst auto st_buffer = sistrip::preconstructCheckFEDBuffer(input);\r\n// check st_buffer\r\nsistrip::FEDBuffer buffer{input};\r\nconst auto st_chan = buffer.findChannels();\r\n// check st_chan\r\n```\r\nsee [the AlignmentEventFilter diff](https://github.com/cms-sw/cmssw/compare/master...pieterdavid:stripunpacker_exceptions?expand=1#diff-65baa272872b1b76219e23f67163e9b5) for a full example (behaviour should be the same as before for this, except for the exception message) - this is also mentioned in the methods' documentation now.\r\n\r\nSince I had to change the `operator++()` functions of the channel unpackers (from where some exceptions could be thrown), and these were all used from a loop like this:\r\n```C++\r\nwhile ( unpacker.hasData() ) {\r\n  output.push_back(...); // (raw) digi with unpacker adc (and strip, for ZS)\r\n  unpacker++;\r\n}\r\n```\r\nI changed them into methods (see [here](https://github.com/pieterdavid/cmssw/blob/stripunpacker_exceptions/EventFilter/SiStripRawToDigi/interface/SiStripFEDBuffer.h#L181-L324)) that take an output iterator instead, and unpack the whole channel (this allows for a bit of simplification, and makes the code more readable; this was already all inlined before, so I don't expect significant changes in CPU performance, but in principle a few more things could be optimised by the compiler now)<sup>1</sup>.\r\nWith this, I could also move the code that select the correct unpacking mode depending on the readout mode and packet code into a helper method (the earlier changes in https://github.com/cms-sw/cmssw/pull/24339 to the regional unpacker already went in this direction), that is shared between the \"full\" and \"regional\" unpacker (as a side-effect, the latter now supports all modes, except scope mode, which is only used for calibration, as far as I know), and quite a bit of code could be removed from these plugins.\r\n\r\nThese changes are purely technical, no changes are expected (also not on the computing performance; most of the unpacker time should be spent in allocating memory for all the digis, and the way that is done is not changed by this PR).\r\n\r\n#### PR validation:\r\n\r\nI took 100 events from a file taken in virgin raw mode (2015 HI, with 10bits packing), unpacked and saved all the raw digis, with the unmodified release. Then I ran, for all VR modes, a packer+unpacker combination on top of those and compared the raw digis before and after; likewise for the ZS modes, after running the zero-suppression - no unexpected differences ([config](https://github.com/pieterdavid/SiStripLocalRecoDebugging/blob/master/test/unpackVRAndCompare.py)).\r\n`runTheMatrix.py -l 140.55` (2018 HI hybrid emulation + repacking + reco workflow, this is one of the more exotic unpacker use cases)\r\nIf anyone knows of data with problems that should trigger one of these exceptions-turned-warnings, that would be very useful to test as well.\r\n\r\nCC: @robervalwalsh @mmusich @tsusa @alesaggio\r\n\r\n<hr/> \r\n\r\n<sup>1</sup> in passing I made a few small changes to SiStripRawDigi (which is nothing more than a `uint16_t` that inherits from `edm::DoNotSortUponInsertion`) - the one that was convenient is conversion back to `uint16_t`, but I think the other ones are sensible and binary compatible (I don't know of anywhere these are persisted anyway).", "branch": "master", "changed_files": 27, "closed_at": "1580283643", "comments": 35, "commits": 33, "created_at": "1579266634", "deletions": 1547, "labels": ["alca-approved", "code-checks-approved", "comparison-available", "dqm-approved", "fully-signed", "orp-approved", "reconstruction-approved", "simulation-approved", "tests-approved"], "merge_commit_sha": "6114880d47067297d591e8669146f6ac65ead782", "merged_at": "1580283643", "merged_by": "cmsbuild", "milestone": "CMSSW_11_1_X", "number": 28756, "release-notes": [], "review_comments": 12, "state": "closed", "title": "Remove exceptions from the strip unpacker", "updated_at": "1580283643", "user": "pieterdavid"}