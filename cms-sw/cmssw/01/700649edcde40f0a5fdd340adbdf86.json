{"additions": 354, "auther_ref": "PFA", "auther_sha": "6b45dfe4df7904ba91919e4268f838ad6d198d16", "author": "linacre", "body": "This PR implements the Peak Finding Algorithm (PFA) described in Giovanna Salvi's [thesis](https://eprints.soton.ac.uk/492698/).\r\n\r\nTwo new `Algorithm`s with `Precision::Simulation` are added to `VertexFinder`.\r\n\r\n`Algorithm::PFA` can be configured to exactly reproduce Giovanna's thesis algorithm, with the option for a 2-step vertex-finding process (first finding local maxima based on Gaussian-weighted multiplicity alone, before choosing the one with the largest Gaussian-and-pT-weighted sum). Subsequent to Giovanna's thesis, the algorithm was [further developed](https://indico.cern.ch/event/1486447/contributions/6265950/attachments/2981672/5251234/PFA%20studies.pdf) to allow different choices of PFA weighting function and to refine the vertex z position using a weighted average over the tracks.\r\n\r\nUltimately it was found (and [presented](https://indico.cern.ch/event/1519772/contributions/6394788/attachments/3023831/5336170/PFA%20studies%20update.pdf) in a GTT meeting) that a simplified version of the algorithm, `Algorithm::PFASimple`, shows no significant performance degradation. This is a simple 1-step vertex-finding process using tracks from a more restricted range in z (corresponding to a set of overlapping bins like in `Algorithm::fastHistoLooseAssociation`, but where the \"bin\" width can optionally be track-eta-dependent) and with no PFA weighting function (i.e. all tracks in the bin effectively have PFA weight = 1), but still optionally refining the vertex z position using a weighted average of the tracks in the bin. When considering a range of processes, it was found that using track pT2 weighting (`WeightedMean=2`) and track-eta dependent width (`PFA_EtaDependentResolution=True`) with a scale factor of about 1.3 (`PFA_ResolutionSF=1.3`) for the vertex finding combined with track pT weighting in the weighted-average z computation (`PFA_WeightedZ0=10`) give best performance, and the default PFA parameters are configured as such in `L1Trigger/VertexFinder/python/l1tVertexProducer_cfi.py`. \r\n\r\n`Algorithm::PFASimple` is identical to `Algorithm::fastHistoLooseAssociation` when using `PFA_WeightedZ0=3`, `PFA_EtaDependentResolution=False`, and setting `PFA_ResolutionSF` to give bin widths that match those set by `FH_VertexWidth`, so PFA can be considered a generalisation of fastHisto.\r\n\r\nThe code was [tested](https://indico.cern.ch/event/1519772/contributions/6394788/attachments/3023831/5336170/PFA%20studies%20update.pdf) by running `L1Trigger/L1TTrackMatch/test/L1TrackObjectNtupleMaker_cfg.py` on a variety of processes. There are no changes in the output when running one of the existing vertexing algorithms. [Except the default parameters in `L1Trigger/VertexFinder/python/l1tVertexProducer_cfi.py` were updated to make the fastHisto settings consistent with fastHistoEmulation.]\r\n\r\n\r\n\r\n\r\n_Old description (Dec 20 2024):_\r\nDraft for internal review in the GTT group.\r\n\r\nSome of the code was only for testing purposes. It simplifies a lot if ```settings_->vx_nvtx()=1``` is now the default (can use ```VertexFinder::PFASingleVertex()``` instead of ```VertexFinder::PFA()``` in that case). \r\n\r\nDepending on the above, it may also make more sense to modify the original ```computeAndSetVertexParameters``` function rather than making a new ```computeAndSetVertexParametersPFA```, since the two have a lot in common.", "branch": "master", "changed_files": 6, "comments": 44, "commits": 22, "created_at": "1734714946", "deletions": 17, "labels": ["l1-pending", "pending-signatures", "tests-pending", "orp-pending", "code-checks-approved"], "milestone": "CMSSW_16_0_X", "number": 47020, "release-notes": [], "review_comments": 2, "state": "open", "title": "[L1T] Peak Finding Algorithm for Vertex Reconstruction (Phase 2)", "updated_at": "1758199396", "user": "linacre"}