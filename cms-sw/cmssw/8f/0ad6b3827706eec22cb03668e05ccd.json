{"additions": 711, "auther_ref": "CUDACOOP", "auther_sha": "8f387b09540bdd7b28ac80a31fced7e723f45e52", "author": "VinInn", "body": "In this PR I wish to share code that used cooperative groups to reduce the number of kernels used to populate \"Histograms\" (actually OneToMany Associations) in Patatrack.\r\n\r\nIn unit tests (single Thread) the gain in speed is noticeable (even in just the prefix scan).\r\nIn standard multithread multi-stream workflows a loss in throughput can easily be observed if the maximum number of blocks is allocated. Some fine tuning of the number of blocks allocated to each kernel (even just one block?) makes this PR at least as fast as the standard multi-kernel implementation. \r\n\r\nMore comments inline. \r\n\r\nThe code is \"configured\" to run with cooperative groups: of course the actual PR can be merged with the standard multi-kernel implementation as default.", "branch": "master", "changed_files": 27, "comments": 45, "commits": 27, "created_at": "1634540249", "deletions": 192, "labels": ["reconstruction-pending", "pending-signatures", "tests-pending", "orp-pending", "code-checks-rejected", "heterogeneous-pending"], "milestone": "CMSSW_12_3_X", "number": 35713, "release-notes": [], "review_comments": 29, "state": "open", "title": "Use cooperative groups to populate Associations (Histograms) in Pixel Patatrack", "updated_at": "1639046473", "user": "VinInn"}