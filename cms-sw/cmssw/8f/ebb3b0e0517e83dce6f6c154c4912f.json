{"additions": 312, "auther_ref": "EgammaTools_deps", "auther_sha": "9d189b5d031e1462e59b099f178755e086e80ec7", "author": "guitargeek", "body": "#### Updated PR description after sign-off:\r\n\r\n1. Move [EffectiveAreas](https://github.com/cms-sw/cmssw/blob/master/RecoEgamma/EgammaTools/interface/EffectiveAreas.h) and [ConversionTools](https://github.com/cms-sw/cmssw/blob/master/RecoEgamma/EgammaTools/interface/ConversionTools.h) from RecoEgamma/EgammaTools into new package **CommonTools/Egamma**. This new package should have only minimal dependencies (DataFormats and FWCore) and the idea is that non-reco subsystems like NanoAOD or DQM can use these common EgammaTools without inheriting many Reco dependencies.\r\n2. Moved the former `ThreadSafeStringCut` class from **RecoEgamma/EgammaTools** to **CommonTools/Utils**, generalized it and renamed it to `ThreadSafeFunctor`\r\n3.  [`MVAVariableManager`](https://github.com/cms-sw/cmssw/blob/master/RecoEgamma/EgammaTools/interface/MVAVariableManager.h) was refactored a tiny bit to make it theoretically independent from the rest of **RecoEgamma/EgammaTools**\r\n\r\n#### Original PR description:\r\n\r\nThe only **RecoEgamma** library that is used outside the **RecoEgamma** subsystem itself is **RecoEgamma/EgammaTools**, mostly for the [`ConversionTools`](https://github.com/cms-sw/cmssw/blob/master/RecoEgamma/EgammaTools/interface/ConversionTools.h) and the [`EffectiveAreas`](https://github.com/cms-sw/cmssw/blob/master/RecoEgamma/EgammaTools/interface/EffectiveAreas.h) helper class. Unfortunately, this comes with a big [party of reco-dependencies](https://github.com/cms-sw/cmssw/blob/master/RecoEgamma/EgammaTools/BuildFile.xml), which is not desirable. The `EffectiveAreas` helper class for example only depends on `FWCore/Utilites`, so all these reco dependencies from local calo and ecal reconstruction are not needed. What bothers me most is that **NanoAOD** inherits all these low-level reco dependencies like **RecoLocalCalo/HGCalRecAlgos** just for using the `EffectiveAreas`.\r\n\r\nTo solve this issue, I suggest to move the `EffectiveAreas` class to **CommonTools/Utils**. That package also [only depends on FWCore](https://github.com/cms-sw/cmssw/blob/master/CommonTools/Utils/BuildFile.xml), and all the users of `EffectiveAreas` already depend on it anyway. While at it, I moved the former `ThreadSafeStringCut` class from **RecoEgamma/EgammaTools** to **CommonTools/Utils** as well, generalized it and renamed it to `ThreadSafeFunctor`. Finally, the [`MVAVariableManager`](https://github.com/cms-sw/cmssw/blob/master/RecoEgamma/EgammaTools/interface/MVAVariableManager.h) was also refactored a tiny bit to make it theoretically independent from the rest of **RecoEgamma/EgammaTools** too.\r\n\r\nLet me know what you think, and if you agree that **CommonTools/Utils** is the right packaged to move these classes into.\r\n\r\n#### PR validation:\r\n\r\nCMSSW compiles and local matrix tests pass.\r\n\r\n#### if this PR is a backport please specify the original PR and why you need to backport that PR:\r\n\r\nNo backport intended.", "branch": "master", "changed_files": 72, "closed_at": "1590559986", "comments": 50, "commits": 3, "created_at": "1589400766", "deletions": 332, "labels": ["analysis-approved", "code-checks-approved", "comparison-available", "dqm-approved", "fully-signed", "l1-approved", "orp-approved", "pdmv-approved", "reconstruction-approved", "tests-approved", "xpog-approved"], "merge_commit_sha": "3ffd39c9dbca6e36eb32c5d97c73dc5be7aa1a4e", "merged_at": "1590559986", "merged_by": "cmsbuild", "milestone": "CMSSW_11_2_X", "number": 29832, "release-notes": [], "review_comments": 0, "state": "closed", "title": "Move EffectiveAreas and ThreadSafeFunctor classes out of EgammaTools", "updated_at": "1590559987", "user": "guitargeek"}