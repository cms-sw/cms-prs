{"additions": 8, "auther_ref": "FixMuonMVAVariables2", "auther_sha": "f2e1ddb193fde892b87a00fcf8f30c44222394b1", "author": "namapane", "body": "#### PR description:\r\n\r\nWe recently realized that the inputs for the [muonPROMPTMVA ](https://github.com/cms-sw/cmssw/blob/d34e3af53bf3f1fe6e8041c0980f8b3a6d2f064e/PhysicsTools/NanoAOD/python/muons_cff.py#L98-L112) (and likewise for [electronPROMPTMVA](https://github.com/cms-sw/cmssw/blob/635e97f877faa01f2c8f43b55de2e72edf2957f0/PhysicsTools/NanoAOD/python/electrons_cff.py#L273-L285)) are _almost_, but not fully recoverable from nanoAODs. This means that it is not possible to check data/MC agreement for input variables from central productions, nor to test new trainings. \r\nThis can be fixed easily and cheaply with two small changes (using muons for illustration, same applies to electrons):  \r\n\r\n- add 1 float variable `Muon_jetDF`, corresponding to the [`LepGood_jetDF`](https://github.com/cms-sw/cmssw/blob/d34e3af53bf3f1fe6e8041c0980f8b3a6d2f064e/PhysicsTools/NanoAOD/python/muons_cff.py#L106) MVA input\r\n- fix an inconsistency in the definition of [`Muon_jetRelIso`](https://github.com/cms-sw/cmssw/blob/d34e3af53bf3f1fe6e8041c0980f8b3a6d2f064e/PhysicsTools/NanoAOD/python/muons_cff.py#L179) with respect to the variable that is intended to correspond to, [`LepGood_jetPtRatio`](https://github.com/cms-sw/cmssw/blob/d34e3af53bf3f1fe6e8041c0980f8b3a6d2f064e/PhysicsTools/NanoAOD/python/muons_cff.py#L107). With the current definition, `jetRelIso = (1/ptRatio-1)` if a jet is present, `pfRelIso04_all` otherwise. The `(1/x-1)` transformation was intended to save space. Unfortunately the actual MVA input variable is defined in a slightly different way, with a `max(ptRatio, 1.5)` applied in the case a jet is associated. Since it is not possible to figure out unambiguously if this was the case, recovering the exact definition of `LepGood_jetPtRatio` that was used for the MVA is tricky.\r\n\r\nOur proposal is to replace `Muon_jetRelIso` with the plain `ptRatio`, without a transformation, and with a default of -1 if no jet is matched. This has some advantages:\r\n\r\n- much easier to recover the MVA input variable correctly\r\n- Marks the case of no jet is found unambiguously (-1)\r\n- Does not mix `ptRatio` with `pfRelIso04_all`, which is already available in its own variable. This improves clarity and also saves some disk space as -1 gets compressed better\r\n- if anybody needs `Muon_jetPtRatio` as defined now, it can be computed easily as well (but I doubt there is much use of it apart for studies related to the MVA, for which having the plain `ptRatio` is more handy anyhow)\r\n- changing the name of the variable ensures that the change will not go unnoticed (in case anybody is using `Muon_jetPtRatio` explicitly)\r\n- Same considerations for the corresponding `Electron` variables.\r\n\r\n#### PR validation:\r\n- tested processing a DYJets sample and checking distribution and sizes with inspectNanoFile.py.\r\n- To ensure that removing the` (1/x-1)` transformation does not increase the rounding error, compared the rounding error of deriving `ptRatio` from the curent `Muon_jetPtRatio` with the one of storing  `ptRatio` directly. We found that precision=10 gives a smaller rounding error while still reducing the space from 2.4 b/muon to 2.2 b/muon (this is because we fill -1 instead of `pfRelIso04_all` when  no jet is found).\r\n- Likewise, `Electron_jetPtRatio` takes 2.3 b/item instead of 2.4 b/item of  `Electron_jetRelIso`.\r\n- The addition of  `Muon_jetDF` and `Electron_jetDF` cost 2.2 b/item each, so the overall effect of this proposed fix would be just +2.0 b/muon and +2.1 b/electron.\r\n\r\n", "branch": "master", "changed_files": 3, "comments": 5, "commits": 3, "created_at": "1724167012", "deletions": 6, "labels": ["pending-signatures", "tests-pending", "orp-pending", "code-checks-approved", "xpog-pending"], "milestone": "CMSSW_14_1_X", "number": 45754, "release-notes": [], "review_comments": 0, "state": "open", "title": "Minor fixes to variables for muon MVA", "updated_at": "1724317121", "user": "namapane"}