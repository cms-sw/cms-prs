{"additions": 4603, "auther_ref": "ecal-reco-gpu-alpaka-migration-multifit-integration-140x", "auther_sha": "dd2b6a332a39830b48a500ccbcbb0309adddf53a", "author": "thomreis", "body": "#### PR description:\r\n\r\nThis PR migrates the ECAL unpacker and ECAL multifit algorithm to alpaka. This is a follow up PR to #42930 , in which the data formats and conditions formats have been defined.\r\n\r\nEventFilter modules:\r\n- Unpacker\r\n- Portable digis to legacy digis converter\r\n- Electronics mapping ESProducer\r\n\r\nAmplitude and time reconstruction modules:\r\n- Multifit conditions ESProducer\r\n- Multifit parameters ESProducer\r\n- Multifit uncalibrated rechits producer\r\n- Portable uncalibrated rechit to CPU uncalibrated rechit converter\r\n\r\nA customization function for the HLT menu is included that replaces the ECAL CUDA modules in the menu with alpaka ones. The customization function is not called, however, and is intended to be used in a customization function for all alpaka modules.\r\n\r\nThe `alpaka` modifier is used to run the alpaka modules instead of the legacy CPU modules and the CUDA modules. \r\nThe matrix workflow 12434.515 runs the alpaka ECAL local reconstruction in the HLT and the offline reconstruction step.\r\nAlternatively, for tests the `gpu` modifier in the `cmsDriver.py` command for obtaining a reconstruction configuration can be replaced with the `alpaka` modifier. For example in the step3 of the 12434.512 matrix workflow.\r\n\r\n@valsdav and @Jakub-Gajownik contributed to these development as well.\r\n\r\n#### PR validation:\r\n\r\nTested with the matrix workflow 12434.513, which produces a legacy CPU vs. alpaka(-nvidia/-serial) comparison in DQM. This test requires some modifications to keep running the legacy CPU code for the `cpu` branch of the `SwitchProducerCUDA`.\r\n \r\nFor the validation 9k events from the `/store/relval/CMSSW_13_3_0_pre4/RelValZEE_14/GEN-SIM-DIGI-RAW/\r\n133X_mcRun3_2023_realistic_v1_Standard_13_3_0_pre4-v1` sample were used.\r\n\r\nAn almost perfect agreement is found between results from the the nvidia and serial backends.\r\nCompared to the original CUDA implementation a very good agreement is found as well.\r\n\r\nFrom the TimeReport, the timing of the alpaka-nvida version is close to the native CUDA implementation, while the alpaka-serial version is about 18% slower than the legacy CPU module.", "branch": "master", "changed_files": 62, "comments": 123, "commits": 1, "created_at": "1699883945", "deletions": 143, "labels": ["simulation-pending", "dqm-pending", "operations-pending", "alca-approved", "hlt-approved", "reconstruction-approved", "pending-signatures", "tests-approved", "orp-pending", "pdmv-approved", "upgrade-approved", "code-checks-approved", "heterogeneous-approved", "ecal"], "milestone": "CMSSW_14_0_X", "number": 43257, "release-notes": [], "review_comments": 148, "state": "open", "title": "ECAL unpacker and ECAL multifit algorithm migration to alpaka", "updated_at": "1706163136", "user": "thomreis"}