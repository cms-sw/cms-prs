{"additions": 117, "auther_ref": "devel_112X_puppi_speedup2", "auther_sha": "e0f02d36a5b2d0fd5c5fbe53358cbb902f1700cf", "author": "missirol", "body": "#### PR description:\r\n\r\nThis PR is an attempt to improve the performance (in terms of execution time) of the `PuppiProducer` plugin.\r\n\r\nNo changes in the outputs are expected.\r\n\r\nMost of these technical changes are not in the producer itself, but in the `PuppiContainer` class; all changes are related (directly or indirectly) to the function `var_within_R` (the \"alpha\" variable on which the PUPPI weight is based), which appears to be the most time-consuming part of the algorithm.\r\n\r\nThe table below summarizes a few timing estimates for the `puppi` module in the RECO step for a Run-3 and Phase-2 workflow.\r\n\r\n| wf | time pre-PR [ms] | time post-PR [ms] |\r\n|---:|---:|---:|\r\n| Run-3 RECO [(QCD MC)](https://cmsweb.cern.ch/das/request?input=dataset%3D%2FRelValQCD_FlatPt_15_3000HS_14%2FCMSSW_11_2_0_pre3-PU_112X_mcRun3_2021_realistic_v5-v1%2FGEN-SIM-DIGI-RAW&instance=prod/global)    |  74.2 |  33.2 |\r\n| Phase-2 RECO [(QCD MC)](https://cmsweb.cern.ch/das/request?input=dataset%3D%2FRelValQCD_Pt15To7000_Flat_14%2FCMSSW_11_2_0_pre3-PU25ns_110X_mcRun4_realistic_v3_2026D49PU200_rsb-v1%2FGEN-SIM-DIGI-RAW&instance=prod/global) |  620.1 | 255.9  |\r\n\r\nThe numbers are taken from the `FastTimerService`, running on 100 events; they suggest that the overall reduction in timing is approx. 55-60%.\r\n\r\nHere is a short summary of the changes in the PR (below, `goodVar` and `var_within_R` are used interchangeably, since the former function is simply a call to the latter):\r\n\r\n* `PuppiCandidate` is converted to a simple `struct`, removing its inheritance from `fastjet::PseudoJet` (looking at the PUPPI implementation as a whole, the usage of `fastjet` does not seem necessary); this change accounts for most of the speedup (approx. 35-40% speedup);\r\n\r\n* skip the calculation of `goodVar` when not needed, e.g. for candidates that are assigned a default weight (0, or 1); this seems to bring roughly a 10-15% improvement in performance.\r\n\r\n* another bit of speedup is obtained by taking one condition (`puppi_id != 3`) out of `var_within_R`, and using it just once in `PuppiContainer::initialize` to fill the collections later used as inputs to `goodVar`; this leads to adding one more data member (a `vector` of `PuppiCandidate`s) to the `PuppiContainer` class.\r\n\r\nIn this PR, there are two spots where things could certainly be improved (but improving them will lead to small changes in the outputs):\r\n\r\n* in `PuppiContainer::initialize`, an instance of `fastjet::PseudoJet` ([here](https://github.com/cms-sw/cmssw/compare/master...missirol:devel_112X_puppi_speedup2?expand=1#diff-920ad87cd21790b241508fda9a732044R49)) is used to obtain the 4-momenta of the candidates used by PUPPI; this was the only way I could find to maintain the same numbers as pre-PR (this may be due to the fact that the inputs used for `reset_PtYPhiM` are floats, and then `fastjet` recomputes and stores the p4 using doubles); one way to simplify this (assuming the differences in the outputs are ultimately not significant) would be to remove `PuppiCandidate` altogether and simply use the `RecoObj` class already in use in the `PuppiProducer` (maybe, changing the floats in `RecoObj` to doubles).\r\n\r\n* in `goodVar`, the `DeltaR2` between two given candidates is calculated (at most) twice ([here](https://github.com/cms-sw/cmssw/compare/master...missirol:devel_112X_puppi_speedup2?expand=1#diff-920ad87cd21790b241508fda9a732044R96)), first with rapidity, then with pseudo-rapidity; this is not modified by this PR (otherwise, the outputs would inevitably change), but maybe its something that could be simplified.\r\n\r\nFYI: @ahinzmann @lathomas @kirschen\r\n\r\n#### PR validation:\r\n\r\nChecked that the PUPPI weights of all PF candidates are unchanged for 200 events (100 for a Run-3 workflow, and 100 for a Phase-2 workflow), for both `puppi` (used for jets) and `puppiNoLep` (used for MET).\r\nStandard workflows, i.e. `runTheMatrix.py -l limited -i all --ibeos`, ran successfully.\r\n\r\n#### if this PR is a backport please specify the original PR and why you need to backport that PR:\r\n\r\nN/A\r\n", "branch": "master", "changed_files": 8, "closed_at": "1598336574", "comments": 27, "commits": 6, "created_at": "1597747749", "deletions": 143, "labels": ["analysis-approved", "code-checks-approved", "comparison-available", "fully-signed", "orp-approved", "reconstruction-approved", "tests-approved"], "merge_commit_sha": "25a40ace81c174070d5c80c9ce2cfaf552c9e08a", "merged_at": "1598336574", "merged_by": "cmsbuild", "milestone": "CMSSW_11_2_X", "number": 31164, "release-notes": [], "review_comments": 19, "state": "closed", "title": "improving performance of PuppiProducer", "updated_at": "1598336574", "user": "missirol"}