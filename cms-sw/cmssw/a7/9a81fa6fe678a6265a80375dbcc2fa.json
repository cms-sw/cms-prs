{"additions": 2616, "auther_ref": "beamspot-dipserver-11_1_X", "auther_sha": "3e423ddd8a019ee2edd602b82d66587d7d22ba2d", "author": "sikler", "body": "#### PR description:\r\n\r\n- the aim was to get rid of the java-based DIP server (DQM/BeamMonitor/test/dip/BeamSpotDipServer.java) used in the past years to transmit beamspot information to LHC\r\n- detailed information on the Data Interchange Protocol is at https://readthedocs.web.cern.ch/display/ICKB/DIP+and+DIM\r\n- our beamspot server is now rewritten in C++, in the form of a normal DQM client; based on CMSSW_11_1_7\r\n- the central piece of code is the plugin DQM/BeamMonitor/plugins/BeamSpotDipServer.{cc,h}, the config at DQM/BeamMonitor/python/BeamSpotDipServer_cff.py, and the live client at DQM/Integration/python/clients/beamspotdip_dqm_sourceclient-live_cfg.py\r\n- it uses _two external tools_: dip (version 5.7.0) and log4cplus [in fact log4cplus is containted in the dip distribution], available at https://readthedocs.web.cern.ch/display/ICKB/DIP+API; potential issue: the provided shared objects were compiled with gcc 4.8.6, but not much to do about it\r\n- for the moment, the necessary files for dip an log4cplus are _provided locally_ (DQM/BeamMonitor/dip-5.7.0), _configured locally_ with scram setup (DQM/BeamMonitor/dip-5.7.0/dip.xml)\r\n- mode of operation: the client is alive from begin to end of run; it checks the result of the previous beamspot fit at the end of each lumisection (in dqmEndLuminosityBlock); for now it looks at files containing the last beamspot fit and the actual status of the tracker under /nfshome0/dqmpro/BeamMonitorDQM/\r\n\r\n#### PR validation:\r\n\r\n- compiles (with manual configuration for external tools) and runs on lxplus without warning or error message\r\n- test using a working DIP browser or java application is _not yet possible_ (javaws is not supported anymore, jws is not available neither on the technical network, nor on lxplus; the page https://dash.web.cern.ch/DIP/ does not work)\r\n\r\n#### PR issues, questions:\r\n\r\n- question: if the above approach is viable, can we get the external tools into cmsdist?\r\n- question: should we get rid of /nfshome0 files and read directly the beamspot information from database?\r\n- remark: the status of the tracker (/nfshome0/dqmpro/BeamMonitorDQM/BeamFitResults_TkStatus.txt) is provided by DQM/BeamMonitor/plugins/TKStatus.cc, read from DcsStatusCollection\r\n", "branch": "CMSSW_11_1_X", "changed_files": 33, "closed_at": "1631102331", "comments": 4, "commits": 1, "created_at": "1612807477", "deletions": 0, "labels": ["dqm-pending", "pending-signatures", "tests-pending", "orp-pending"], "milestone": "CMSSW_11_1_X", "number": 32845, "release-notes": [], "review_comments": 0, "state": "closed", "title": "Beamspot DIP server (normal DQM client) for 11_1_X", "updated_at": "1631102331", "user": "sikler"}