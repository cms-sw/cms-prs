{"additions": 1357, "auther_ref": "CMSSW_12_4_0_pre3_WIP_test_alpaka_data_formats", "auther_sha": "fb290e51cd00c1849567b2e5629fe5041b09b4b3", "author": "fwyzard", "body": "#### PR description:\r\n\r\nThis PR experiments with the integration of alpaka in CMSSW, and tries to identify both the necessary changes at various levels:\r\n  - how to organise packages and files that use alpaka;\r\n  - how to update scram and the build rules to support building alpaka-based libraries, plugins and executables;\r\n  - how to write alpaka-based data formats;\r\n  - how to persist them adding minimal or no dependency on alpaka itself for reading back the files;\r\n  - ...\r\n\r\nThe current implementation is still a draft.\r\n\r\n#37790 will be used to keep track of the issues related to the build tools encountered while discussing this PR.\r\n\r\n#### PR validation:\r\n\r\n```bash\r\ncmsRun HeterogeneousCore/AlpakaTest/test/writer.py\r\ncmsRun HeterogeneousCore/AlpakaTest/test/reader.py\r\n```\r\nrun successfully, both _with_ and _without_ a GPU, using a `SwitchProducerCUDA` to choose the modules to run.\r\n\r\nIn both cases, the `test.root` file created by the `writer.py` configuration contains the same collections:\r\n```bash\r\n$ edmDumpEventContent --all test.root \r\nType                                  Module                 Label     Process         Full Name\r\n------------------------------------------------------------------------------------------------\r\nPortableHostCollection<XyzIdSoA>      \"testProducer\"         \"\"        \"Writer\"        XyzIdSoAPortableHostCollection_testProducer__Writer\r\nPortableHostCollection<XyzIdSoA>      \"testProducerSerial\"   \"\"        \"Writer\"        XyzIdSoAPortableHostCollection_testProducerSerial__Writer\r\n```\r\n\r\n#### Open issues\r\n\r\nPointed out by @makortel:\r\n  - [ ] rename the `XyzId` package to e.g. `PortableTestObjects`, and move all objects there in the _e.g._ `portabletest` (or `edmtest`, `cms::test`, or some other `*test`) namespace\r\n  - [ ] something should be done for the `host` variable in global scope (the name feels too generic). Could it be placed _e.g._ in `alpaka_common` namespace?\r\n    - [ ] @fwyzard: it should probably be moved to be a static variable in some kind of `getHost()` function\r\n  - [ ] replace the use of `std::cout` with the `MessageLogger`\r\n  - [ ] address `const` correctness with Alpaka buffers (see https://github.com/cms-sw/cmssw/pull/37716#discussion_r888152966 and https://github.com/alpaka-group/alpaka/issues/1729)\r\n  - [ ] review the use of `beginStream()` and `endStream()`, because they can be called under unexpected conditions (see https://github.com/cms-sw/cmssw/pull/37716#discussion_r888254868)\r\n\r\nOngoing work by @ericcano and @fwyzard:\r\n  - [ ] make the `XyzId` structures match the macro-generated ones for a corresponding SoA\r\n  - [ ] add the `view` and `const_view` and pass those to the kernels", "branch": "master", "changed_files": 62, "comments": 87, "commits": 9, "created_at": "1651088372", "deletions": 0, "labels": ["pending-signatures", "tests-pending", "orp-pending", "new-package-pending", "code-checks-pending", "heterogeneous-pending"], "milestone": "CMSSW_12_5_X", "number": 37716, "release-notes": [], "review_comments": 47, "state": "open", "title": "Test alpaka integration in CMSSW", "updated_at": "1654712267", "user": "fwyzard"}