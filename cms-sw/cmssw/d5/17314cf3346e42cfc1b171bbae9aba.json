{"additions": 23, "auther_ref": "mm_dev_clients_protect_inputFiles", "auther_sha": "452ab1e701c97e39aef9fc51ab602524f56b8338", "author": "mmusich", "body": "#### PR description:\r\n\r\nTitle says it all. \r\nWhen developing a test for [CMSHLT-3534](https://its.cern.ch/jira/browse/CMSHLT-3534) I realized that certain online client configurations customize the event source as if it was a `DQMStreamerReader` even in the case it which `options.inputFiles` is not null. In that case as per this code here:\r\n\r\nhttps://github.com/cms-sw/cmssw/blob/6a7da0e1aa9caba35aa222c5e6f3437af17be008/DQM/Integration/python/config/inputsource_cfi.py#L125-L132\r\n\r\nthe source gets changed to a traditional `PoolSource` and the customization doesn't make sense, hence leading to runtime errors.\r\nThis PR introduces protections to circumvent the issue.\r\n\r\n#### PR validation:\r\n\r\nRun successfully the following script in `CMSSW_15_0_12` on a file produced with the `GRun` menu proposed in [CMSHLT-3534](https://its.cern.ch/jira/browse/CMSHLT-3534). \r\n\r\n```bash\r\n#!/bin/bash\r\n\r\necho \"starting to run the DQM tests\"\r\n\r\ncd CMSSW_15_0_12/src/\r\n# Input ROOT file (adjust if needed)\r\nINPUT_FILE=\"../../testCMSHLT3534_hlt.root\"\r\n\r\n# Directory containing the DQM client config files\r\nCFG_DIR=\"DQM/Integration/python/clients\"\r\n\r\n# List of client config filenames\r\nCLIENTS=(\r\n    beam_dqm_sourceclient-live_cfg.py\r\n    beampixel_dqm_sourceclient-live_cfg.py\r\n    beamspotdip_dqm_sourceclient-live_cfg.py\r\n    csc_dqm_sourceclient-live_cfg.py\r\n    ctpps_dqm_sourceclient-live_cfg.py\r\n    #dt4ml_dqm_sourceclient-live_cfg.py\r\n    dt_dqm_sourceclient-live_cfg.py\r\n    ecal_dqm_sourceclient-live_cfg.py\r\n    es_dqm_sourceclient-live_cfg.py\r\n    fed_dqm_sourceclient-live_cfg.py\r\n    gem_dqm_sourceclient-live_cfg.py\r\n    hcal_dqm_sourceclient-live_cfg.py\r\n    hcalreco_dqm_sourceclient-live_cfg.py\r\n    hlt_dqm_sourceclient-live_cfg.py\r\n    info_dqm_sourceclient-live_cfg.py\r\n    l1tstage2_dqm_sourceclient-live_cfg.py\r\n    l1tstage2emulator_dqm_sourceclient-live_cfg.py\r\n    mutracking_dqm_sourceclient-live_cfg.py\r\n    onlinebeammonitor_dqm_sourceclient-live_cfg.py\r\n    pixel_dqm_sourceclient-live_cfg.py\r\n    pixellumi_dqm_sourceclient-live_cfg.py\r\n    rpc_dqm_sourceclient-live_cfg.py\r\n    sistrip_dqm_sourceclient-live_cfg.py\r\n    visualization-live_cfg.py\r\n)\r\n\r\n# Make a logs directory if not present\r\nmkdir -p logs\r\n\r\nfor client in \"${CLIENTS[@]}\"; do\r\n    echo \"Running $client...\"\r\n\r\n    LOGFILE=\"logs/${client%.py}.log\"\r\n\r\n    cmsRun \"$CFG_DIR/$client\" inputFiles=\"$INPUT_FILE\" > \"$LOGFILE\" 2>&1\r\n\r\n    if [ $? -ne 0 ]; then\r\n        echo \"$client FAILED. Check $CMSSW_BASE/src/$LOGFILE\"\r\n    else\r\n        echo \"$client completed successfully.\"\r\n    fi\r\ndone\r\n```\r\n\r\n#### If this PR is a backport please specify the original PR and why you need to backport that PR. If this PR will be backported please specify to which release cycle the backport is meant for:\r\n\r\nN/A", "branch": "master", "changed_files": 7, "comments": 4, "commits": 1, "created_at": "1754659365", "deletions": 25, "labels": ["dqm-pending", "pending-signatures", "orp-pending", "tests-started", "code-checks-approved"], "milestone": "CMSSW_15_1_X", "number": 48705, "release-notes": [], "review_comments": 0, "state": "open", "title": "protect online DQM clients when running in `inputFiles` mode against meaningless customizations", "updated_at": "1754659602", "user": "mmusich"}