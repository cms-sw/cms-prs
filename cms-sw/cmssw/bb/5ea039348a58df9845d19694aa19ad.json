{"additions": 7, "auther_ref": "dqm-optimize-dqmio", "auther_sha": "c8675544d5d314ddf589d93bca7f6064e26daaa9", "author": "schneiml", "body": "#### PR description:\r\n\r\nAs suggested by @dpiparo around ROOT-10927, the way we use TTrees in DQMIO reading is not very optimal from memory utilization point of view.\r\n\r\nI suggested that we could create/destroy the trees as needed (since in the end, we only do a fairly small number of sequential reads), but that lead to segfaults everywhere (at least in my stand-alone test). But, a tactically placed `TTree::Reset` call might give us the same benefit, for very little effort, so that is what I try here.\r\n\r\n#### PR validation:\r\n\r\nSo far I only tried Phat's merge job sample (with the huge HGCAL MEs in it). Results look like this: https://mschneid.web.cern.ch/mschneid/merge/mbGraph.html#?profile=withreset.json&reference=base.json&pid=_sum\r\n\r\nThere is a slight reduction in memory usage. It might be more on a job where the TTree baskets are more significant compared to the total job; we expect maybe saving 10MB in each of 10 trees? Not sure.\r\n\r\nAlso, needs more tests to see if the slowdown is systematic or just a random variation.", "branch": "master", "changed_files": 1, "closed_at": "1596090133", "comments": 21, "commits": 2, "created_at": "1595516417", "deletions": 0, "labels": ["code-checks-approved", "comparison-available", "dqm-approved", "fully-signed", "orp-approved", "tests-approved"], "merge_commit_sha": "5d1f62c2a355c70edcbb4e1d2e531f73881f7e76", "merged_at": "1596090133", "merged_by": "cmsbuild", "milestone": "CMSSW_11_2_X", "number": 30889, "release-notes": [], "review_comments": 0, "state": "closed", "title": "DQM: Optimize DQMIO memory use", "updated_at": "1596090133", "user": "schneiml"}