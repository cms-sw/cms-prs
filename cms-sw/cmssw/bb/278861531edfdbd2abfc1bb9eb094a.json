{"additions": 119, "auther_ref": "concurrentIOVsCastorProducer", "auther_sha": "17e6165d79b937010ba06a8435cd087586433824", "author": "wddgit", "body": "Prior to this PR there was one CastorDbService and the ESProducer held as a data member a shared pointer to this object. If there are multiple IOVs being processed concurrently, there must be multiple CastorDbService objects because the contents must be different for different IOVs. In addition, if we want to maximize the concurrency the produce method should be able to run for the different IOVs concurrently and the produce function modifies the CastorDbService. It would create data races for them to work on the same object.\r\n\r\nIn the modified version, there are multiple CastorDbService objects, one for each concurrent IOV. The ReusableObjectHolder owns and manages those objects in a thread safe manner and replaces the single shared_ptr. \r\n\r\nThe dependsOn feature of the EventSetup has difficulty communicating which instance CastorDbService a particular callback and produce function are referring to.  So the usage of the dependsOn function and its callbacks is replaced by usage of the new ESProductHost class. It has a similar purpose, but works better when there are multiple IOVs because its interface allows direct communication between the produce methods and the lambda function that gets called when the record changes via arguments.\r\n", "branch": "master", "changed_files": 7, "comments": 9, "commits": 1, "created_at": "1536065417", "deletions": 54, "labels": ["alca-pending", "code-checks-approved", "comparison-available", "orp-pending", "pending-signatures", "simulation-approved", "tests-approved"], "milestone": "CMSSW_10_3_X", "number": 24462, "release-notes": [], "review_comments": 0, "state": "open", "title": "Prepare CastorDbProducer for concurrent IOVs", "updated_at": "1536250523", "user": "wddgit"}