{"additions": 89, "auther_ref": "fedErrorsInSiStripHitEffPCL_12_4_X", "auther_sha": "dee035970063c42e5c3d2838a34c7bd8d2d4041e", "author": "mmusich", "body": "backport of https://github.com/cms-sw/cmssw/pull/39351\r\n\r\n#### PR description:\r\n\r\nWhen using the DQM files produced by the `SiStripHitEfficiency` PCL in 2022 data, it was noticed that not all the modules that should be masked with the `SiStripQuality` are effectively masked within the DQM workflow, when comparing with the traditional calibrations-tree based workflow.\r\nThe issue has been traced down on the usage of the modules affected by `FEDErrors` in the  computation of the efficiency.\r\nIn PR https://github.com/cms-sw/cmssw/pull/38592 a mechanism to count the `FEDErrors` per module (via commit https://github.com/cms-sw/cmssw/pull/38592/commits/44999ca0086ab0a28320bc9c815c68bfa94c5aef ) was introduced since at the harvesting step level it's not possible to access directly at the per-event `FEDErrors` edm collection. This entailed populating a `TkHistoMap` with the occupancy of modules in FEDError per event, but this approach had two problems:\r\n   * the filling of the map occurred in the `endJob` transition of `StripHitEfficiencyWorker` (that in a `DQMEDAnalyzer` is not run by the framework, resulting in empty maps cf https://tinyurl.com/2p5tdgqs)\r\n   * secondly the information was never propagated to the `SiStripHitEfficiencyHarvester` such that those modules could be excluded from the list of inefficient ones.\r\n   \r\nThis PR solves the issue by changing the `SiStripHitEffData` ancillary `struct` and its usage in the classes of the `SiStripHitEfficiency` PCL workflow. A somewhat arbitrary threshold of 75% of the events is used to flag modules that have problems with FEDErrors, permanently excluding them from the computation.\r\n\r\nFinally I profit of this to transform a relic thread-unsafe `cout` to the message logging system in commit dee035970063c42e5c3d2838a34c7bd8d2d4041e.\r\n\r\n#### PR validation:\r\n\r\nRun the following commands:\r\n\r\n```console\r\ncmsDriver.py stepReAlCa -s ALCA:PromptCalibProdSiStripHitEff --conditions 124X_dataRun3_Express_v5 --scenario pp --data --era Run3 --datatier ALCARECO --eventcontent ALCARECO --processName=ReAlCa -n 100000 --dasquery='file dataset=/StreamExpress/Run2022D-SiStripCalMinBias-Express-v2/ALCARECO run=357898' --nThreads=4\r\n``` \r\n\r\nfollowed by:\r\n\r\n```console\r\ncmsDriver.py stepHarvest -s ALCAHARVEST:SiStripHitEff --conditions 124X_dataRun3_Express_v5 --scenario pp --data --era Run3 --filein file:PromptCalibProdSiStripHitEff.root -n -1\r\n```\r\n\r\nwith this branch and without it and observed the following features:\r\n   - the `FEDErrorTkDetMaps` folder now contains full plots (as can be checked at https://tinyurl.com/2z7nrg9a after logging with ` ssh -NL 8060:localhost:8060 <USER>@lxplus724.cern.ch`)\r\n   - some regions in TEC that were contributing to the inefficiency (because in FED Error) are now correctly excluded:\r\n   \r\n| Name     | Pre-fix | Post-fix |\r\n| ---           | ---       |  ---       |\r\n| Efficiency Map |  ![image](https://user-images.githubusercontent.com/5082376/189116210-0ae09a44-229d-4f62-aed4-67560532e47e.png) | ![image](https://user-images.githubusercontent.com/5082376/189123336-dc252a86-28dc-4a4f-b6fc-a5bfc026f20a.png) |\r\n| Inefficient Modules       |   ![image](https://user-images.githubusercontent.com/5082376/189116635-ae39f26d-122a-42c9-a2d5-534a8a570e56.png) | ![image](https://user-images.githubusercontent.com/5082376/189116575-f2ee86ae-e510-402c-920d-864c1b182149.png) |\r\n  \r\n#### If this PR is a backport please specify the original PR and why you need to backport that PR. If this PR will be backported please specify to which release cycle the backport is meant for:\r\n\r\nVerbatim backport of https://github.com/cms-sw/cmssw/pull/39351 to CMSSW_12_5_X (for data-taking purposes)", "branch": "CMSSW_12_4_X", "changed_files": 4, "comments": 1, "commits": 2, "created_at": "1662724126", "deletions": 45, "labels": ["alca-pending", "pending-signatures", "tests-pending", "orp-pending", "backport-ok"], "milestone": "CMSSW_12_4_X", "number": 39357, "release-notes": [], "review_comments": 0, "state": "open", "title": "[12.4.X] `SiStripHitEfficiency` PCL workflow, take into account modules with `FEDErrors`", "updated_at": "1662724167", "user": "mmusich"}