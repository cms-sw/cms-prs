{"additions": 333, "auther_ref": "adding-angle-utilities", "auther_sha": "ab1cfde29266059fc6c5ed9351d57ac4b44daa0d", "author": "cvuosalo", "body": "#### PR description:\r\n\r\nIn many spots in CMSSW, code like the following appears:\r\n```\r\nif (pointphi >= twopi)\r\n     pointphi -= twopi;\r\nif(pointphi < 0)\r\n     pointphi += twopi;\r\n```\r\nThe intent is to constrain the angle to the range 0<= angle < 2pi, but the code, as in this example, sometimes doesn't handle the case of an |angle| >= 4pi.\r\nTo provide a simpler and more reliable method of constraining an angle, this PR adds the function `make0to2pi`, to be used like this:\r\n\r\n`pointphi = make0to2pi(pointphi);`\r\n\r\nEvery time an angle takes an input value and every time an operation is performed on it that could change its value, this function should be called to make sure the angle stays within range.\r\n\r\nFor developer convenience, this PR also provides a class `Angle0to2pi<>` that automatically maintains a value >=0 and < 2pi. Class objects are the same size as base type variables, and with the O2 compiler optimization used by default by CMSSW, there is usually no significant difference in performance compared with base type angle variables. However, in certain use cases, there could be CPU performance costs from using this class.\r\n\r\n#### PR validation:\r\n\r\nA unit test program is included in this PR, and it verifies basic functions of the code and gives some rough performance measures.\r\n\r\nNo backport is needed.", "branch": "master", "changed_files": 4, "comments": 19, "commits": 4, "created_at": "1553115839", "deletions": 33, "labels": ["code-checks-approved", "comparison-pending", "hold", "orp-pending", "pending-signatures", "reconstruction-pending", "tests-pending"], "milestone": "CMSSW_10_6_X", "number": 26227, "release-notes": [], "review_comments": 0, "state": "open", "title": "Adding angle utilities", "updated_at": "1553804739", "user": "cvuosalo"}