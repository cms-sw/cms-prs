{"additions": 444, "auther_ref": "adding-angle-utilities", "auther_sha": "3265dea9b51e768e3232275fe0ef047139db41b6", "author": "cvuosalo", "body": "#### PR description:\r\n\r\nIn many spots in CMSSW, code like the following appears:\r\n```\r\nif (pointphi >= twopi)\r\n     pointphi -= twopi;\r\nif(pointphi < 0)\r\n     pointphi += twopi;\r\n```\r\nThe intent is to constrain the angle to the range 0<= angle < 2pi, but the code, as in this example, sometimes doesn't handle the case of an |angle| >= 4pi.\r\n\r\n`DataFormats/Math/interface/deltaPhi.h` provides a `reduceRange()` function for this purpose, but tests show this function is not as fast as it could be, and it suffers from sensitivity in its `if` statement to small deviations from pi.\r\n\r\nThis PR adds a new function `make0to2pi`, that can be significantly faster than `reduceRange()` and that greatly reduces value drift due to floating-point comparisons. This new function is added without changing the implementation of `reduceRange()` because changing `reduceRange()` could cause slight differences in program behavior. Usage of `reduceRange()` can later be replaced on a case-by-case basis where better performance and precision is required.\r\n\r\nThe `Phi` class in `DataFormats/GeometryVector/interface/Phi.h` represents an angle that maintains a value from -pi to pi. This PR enhances this class in a backwardly compatible fashion to allow the option of keeping the angle in the range from 0 to 2pi.\r\n\r\nIn addition, the generic angle utilities in the `GeantUnits.h` file are moved to `deltaPhi.h` because they are not Geant-specific and should be usable without subjecting code to Geant conventions.\r\n\r\n#### PR validation:\r\n\r\nA unit test program is included in this PR, and it verifies basic functions of the code and gives some rough performance measures.\r\n\r\nSome performance results comparing `reduceRange()` and `make0to2pi` are shown below.\r\n\r\nThe entry for the `Phi` templates in the `classes_def.xml` file uses ClassVersion 3 because the revised template is effectively a new class. No problems with the ROOT dictionary for `Phi` were observed. Using baseline CMSSW_10_6_0_pre2 code without this PR, I wrote a `Phi` variable to a ROOT file. Then, with the new PR code, I could successfully read the `Phi` variable out of that same ROOT file, so there appears to be backwards compatibility in reading old ROOT files containing the `Phi` class. However, a scan of CMSSW finds no cases where `Phi` variables were written to ROOT files, so it doesn't look like the ability to read the old version of `Phi` variables in ROOT files is even needed.\r\n\r\nNo backport is needed.", "branch": "master", "changed_files": 9, "closed_at": "1559055581", "comments": 125, "commits": 15, "created_at": "1553115839", "deletions": 102, "labels": ["code-checks-approved", "comparison-available", "fully-signed", "geometry-approved", "orp-approved", "reconstruction-approved", "simulation-approved", "tests-approved", "upgrade-approved"], "merge_commit_sha": "1007a448f81e41019774cc7ac6fe0d8eff7ec62a", "merged_at": "1559055580", "merged_by": "cmsbuild", "milestone": "CMSSW_11_0_X", "number": 26227, "release-notes": [], "review_comments": 23, "state": "closed", "title": "Adding angle utilities", "updated_at": "1559055581", "user": "cvuosalo"}