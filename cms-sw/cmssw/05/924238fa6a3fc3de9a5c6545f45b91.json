{"additions": 14, "auther_ref": "avoid_xrootd_deadlock", "auther_sha": "ac0156350d2aa2539cf91ad2ec5f7318dd520807", "author": "bbockelm", "body": "Observed deadlock:\n\nThread 1:\n- FileTimer::Run holds FileTimer::pMutex\n- FileStateHandler::Tick wants to take the FileStateHandler::pMutex\n\nThread 2:\n- FileStateHandler::OnStateError holds the FileStateHandler::pMutex lock\n- RequestManager::requestFailure calls\n- OpenHandler::current_source, which wants the OpenHandler::m_mutex\n\nThread 3:\n- OpenHandler::HandleResponseWithHosts holds OpenHandler::m_mutex,\n- ~FileStateHandler calls FileTimer::UnRegisterFileObject which tries\n  to get the FileTimer::pMutex.\n\nWe remove the call to OpenHandler::current_source to break the deadlock.\n\nIf a file-open is in progress, we cannot take the open handler\nmutex from within (RequestManager::requestFailure).\n\nIt is safe to call XrdAdaptor::RequestManager::OpenHandler::open\nfrom within the requestFailure callback; if the file-open was in progress, it will return the shared\nfuture and not touch Xrootd code.  If the file-open was not in progress, it\nis safe to take the open handler mutex in the first place.\n\nSee also #8129 - that also fixes the deadlock quoted above.  However, this patch has the advantage of not trying to acquire OpenHandler::m_mutex when OpenHandler::HandleResponseWithHosts is alive and calling into the Xrootd library.\n", "branch": "CMSSW_7_5_X", "changed_files": 2, "closed_at": "1425753233", "comments": 10, "commits": 1, "created_at": "1425697212", "deletions": 2, "labels": ["comparison-available", "core-approved", "fully-signed", "tests-approved"], "merge_commit_sha": "59eb439ceea2a0bf505ff004d0ad1fd9ed4593c8", "merged_at": "1425753233", "merged_by": "cmsbuild", "milestone": "CMSSW_7_5_X", "number": 8130, "release-notes": [], "review_comments": 0, "state": "closed", "title": "Avoid taking open handler mutex from request manager failure.", "updated_at": "1425753233", "user": "bbockelm"}