{"additions": 1540, "auther_ref": "TritonService113X", "auther_sha": "b2f470275c131ba363caebf0a06b9afaae608624", "author": "kpedro88", "body": "#### PR description:\r\n\r\nThis PR introduces a new `edm::Service`, `TritonService`, as a central point for the management of Triton inference servers. The service does the following:\r\n1. The `TritonService` parameter set includes a list of known servers. For each server, a name, address, and port should be provided.\r\n2. At initialization, the service lists the models hosted by each server, and creates maps of server:model and model:server.\r\n3. During construction of `SonicTriton` modules, the service is informed of the model requested by each module. Any requested model not provided by a known server is kept in a separate list.\r\n4. Before `beginJob`, if the \"fallback\" option is enabled and the list of unserved models is non-empty, a local server is launched using Singularity. This fallback server can use a local GPU if one is available (currently detected via `nvidia-smi`); otherwise, it uses the local CPU.\r\n5. `TritonClient` construction is moved to occur during `beginJob`; at this time, the service provides a server address that serves the model for the client. (The client can request a specific server by name.) If the CPU fallback server is being used, the client is forced into `Sync` mode to prevent contention.\r\n6. At destruction time, the service shuts down the local fallback server, if one was started.\r\n\r\nThis behavior is now automatically tested in a unit test. The actual unit test only runs if the necessary ingredients (AVX instructions, model file, and Singularity runtime) are available; otherwise it trivially returns true. The \"graph\" test modules are chosen for the unit test because they a) use more features (multiple named inputs, variable dimensions) and b) use a smaller model file.\r\n\r\nThe creation of a `cms-data` area for `HeterogeneousCore-SonicTriton` is requested, in order to host the model files necessary for the unit test. (Once this is provided, those model files will be removed from the `fetch_model.sh` script.)\r\n\r\nOther miscellaneous changes in this PR:\r\n* A special upgrade workflow and corresponding `ProcessModifier`s for `SonicTriton` are introduced. This workflow will enable more testing of `SonicTriton` modules.\r\n    * `enableSonicTriton` adds the `TritonService` to the process and enables the local fallback server.\r\n    * `allSonicTriton` is intended to aggregate any other modifiers needed to enable SonicTriton modules.\r\n* There are now dedicated `SonicTriton` module base classes, following the types defined in `SonicCore`: `TritonEDProducer`, `TritonEDFilter`, `TritonOneEDAnalyzer`. These types are all tested in the new unit test.\r\n    * `TritonGraphProducer` is refactored to create instances of all module types with minimal duplication, with the amount of artificially-generated input data reduced for the case of the unit test.\r\n    * There are some minor implications for the use of `GlobalCache` with `SonicTriton` modules, which are discussed in the documentation.\r\n* The shell script `triton` to start and stop the local servers is moved to `HeterogeneousCore/SonicTriton/scripts`, in order to make it available in the path. A number of new options are added and described in the documentation, notably:\r\n    * usage of multiple model repositories\r\n    * retry starting the container (Singularity can timeout the first time)\r\n\r\nThe `TritonClient` API is modified:\r\n* removed fields: `batchSize`, `address`, `port`\r\n* added fields: `modelConfigPath`, `preferredServer`\r\n\r\nCaveats and future work:\r\n* The unit test, which launches a fallback server using Singularity, can be run inside of another Singularity container if certain conditions are met. This requires:\r\n    * The Singularity runtime should be available inside the top-level container (can be accomplished by building it into the container image, or mounting necessary directories when starting the container)\r\n    * `setuid` should be disabled and unprivileged user namespaces should be enabled (as far as I understand, this is the current recommended best practice for CMS sites)\r\n* The server:model and model:server maps in `TritonService` could be more efficiently implemented using `boost::bimap`. However, the necessary libraries to use some of the support classes (such as `boost::bimaps::unordered_multiset_of`) are not distributed with CMSSW. If the `boost` external is updated, this option could be pursued again in a followup PR.\r\n* The `triton` shell script could be reimplemented in Python to be more maintainable and robust. However, Python's built-in shell interaction capabilities are limited and cumbersome. As a future development item, the `sh` Python library could be added as a CMS external and then used in this script.\r\n\r\nThe noted development items above are intended for future PRs because they don't impact functionality or APIs, and therefore further delaying this PR (on which several other PRs and working branches will need to be rebased) is not warranted.\r\n\r\nThe initial presentation of this idea in the core software meeting can be found here: https://indico.cern.ch/event/983377/#16-design-of-the-tritonservice.\r\n\r\n#### PR validation:\r\n\r\nRan the unit test successfully (many times), using both CPU and GPU for the fallback server.\r\n\r\nFor reference, Singularity-within-Singularity instructions (tested on cmslpc at FNAL and lxplus at CERN) are provided.\r\n\r\nSetup:\r\n```bash\r\ncmsrel CMSSW_11_3_0_pre1\r\ncd CMSSW_11_3_0_pre1/src\r\ncmsenv\r\ngit cms-checkout-topic -u kpedro88:TritonService113X\r\nscram b\r\ncd HeterogeneousCore/SonicTriton/test\r\n./fetch_model.sh\r\n```\r\n\r\nRunning test in Singularity:\r\n```bash\r\ncmssw-cc7 -B $(readlink -f $HOME) -B $(readlink -f $CMSSW_BASE) -B $(mktemp -d):/eos\r\ncmsenv\r\ncmsRun tritonTest_cfg.py maxEvents=1 modules=TritonGraphProducer unittest=1\r\n```\r\n\r\n The fake eos directory is needed because `cmssw-cc7` binds `/eos` and the Triton server's `nvidia_entrypoint.sh` does a `find /`, which can take forever especially on CERN EOS.\r\n\r\n In the course of this PR, the `cmssw-cc7` Singularity container was updated to include the Singularity runtime natively. For future reference, if it did not contain the Singularity runtime, the following bind arguments should be added to the invocation, in order to include the runtime + dependencies from the host:\r\n```bash\r\n-B /usr/bin/singularity -B /lib64/libseccomp.so.2 -B /etc/singularity -B /usr/libexec/singularity -B /var/singularity\r\n```", "branch": "master", "changed_files": 38, "closed_at": "1612427373", "comments": 141, "commits": 31, "created_at": "1608679165", "deletions": 457, "labels": ["code-checks-approved", "fully-signed", "heterogeneous-approved", "operations-approved", "orp-approved", "pdmv-approved", "requires-external", "tests-approved", "upgrade-approved"], "merge_commit_sha": "21bdd2555a2d67f0c8241310b49ad1e02c7fba14", "merged_at": "1612427373", "merged_by": "cmsbuild", "milestone": "CMSSW_11_3_X", "number": 32576, "release-notes": [], "review_comments": 55, "state": "closed", "title": "Introduce TritonService and workflows", "updated_at": "1612427373", "user": "kpedro88"}