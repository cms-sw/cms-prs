{"additions": 7, "auther_ref": "CMSSW_9_2_X_2017-05-16-1100/sign911/ctppsDiamondTrack_yPosition", "auther_sha": "08e9f21065497136c3017c16f7721be8ec62e578", "author": "slava77", "body": "clear yPosition and width after the fit; test for first hit using yPositionInitial and yWidthInitial instead of hardcoded 0,0\r\n\r\nThe issue was discovered in 80X.\r\n\r\nI'm actually not fully capturing the logic of ```yPosition_``` assignment based on the first hit y position. It looks partially as a way to cache the detector alignment.\r\n\r\nIn my test job in 80X (running on run 283877) I used 8 threads. The original CTPPSDiamondTrackRecognition.cc can possibly make 2 (arms) * 8 (threads) different values of track y depending which event and which hit ends up on the thread first. The fixed version corresponds to position setting in each event.\r\nOn 200 events:  the original getY0 values (with repeat counts)\r\n```\r\nvalueIndex   count value\r\n     1        2 3.670e-15\r\n     2       10 5.456e-15\r\n     3        5 5.573e-15\r\n     4        8 5.849e-15\r\n     5        9 7.961e-15\r\n     6        3 8.508e-15\r\n     7        8 9.089e-15\r\n     8        3 9.142e-15\r\n     9        4 9.959e-15\r\n    10        6 1.010e-14\r\n    11        2 1.023e-14\r\n    12        5 1.349e-14\r\n    13        7 1.424e-14\r\n    14       14 1.468e-14\r\n    15        7 1.568e-14\r\n```\r\n\r\nThe fixed:\r\n```\r\n     1        3 -9.37e-12\r\n     2        4 7.961e-15\r\n     3        2 8.508e-15\r\n     4        3 8.705e-15\r\n     5        1 8.795e-15\r\n     6        1 9.089e-15\r\n     7        2 9.744e-15\r\n     8       10 9.959e-15\r\n     9        2 1.010e-14\r\n    10        9 1.023e-14\r\n    11        4 1.035e-14\r\n    12        3 1.050e-14\r\n    13        1 1.062e-14\r\n    14        1 1.073e-14\r\n    15       10 1.092e-14\r\n    16        5 1.305e-14\r\n    17        3 1.349e-14\r\n    18        8 1.388e-14\r\n    19        3 1.424e-14\r\n    20        4 1.468e-14\r\n    21        1 1.505e-14\r\n    22        7 1.539e-14\r\n    23        1 1.568e-14\r\n    24        5 1.594e-14\r\n```\r\n\r\nIf these positions are in cm, they look like random roundoffs of zeros.\r\nStill, the assignment should be made without dependence on event order or the number of threads.\r\n\r\n@forthommel please check and either confirm that this fix has a meaning or provide a replacement PR.\r\nThank you.\r\n\r\n\r\n", "branch": "master", "changed_files": 2, "closed_at": "1495086774", "comments": 10, "commits": 1, "created_at": "1494975286", "deletions": 3, "labels": ["comparison-available", "fully-signed", "orp-approved", "reconstruction-approved", "tests-approved"], "merge_commit_sha": "05a042506c043102208049d8ae6d2aa9c16f463c", "merged_at": "1495086774", "merged_by": "cmsbuild", "milestone": "CMSSW_9_2_X", "number": 18779, "release-notes": [], "review_comments": 0, "state": "closed", "title": "recover multi-thread reproducibility in CTPPS diamond local track y position", "updated_at": "1495086774", "user": "slava77"}