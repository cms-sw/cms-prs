{"additions": 210, "auther_ref": "parallel_hadd_74x", "auther_sha": "b5439df5f22b94107fda9472fb6007b3dd9b6a79", "author": "dmitrijus", "body": "## Removed a few small optimizations:\n- first file is no longer added to the set, but merged on top  of an empty set, just like any other file;\n- removed dirnames, objnames, fullnames string caches;\n- removed fullname from MicroME, since it can be generated using other fields;\n- replaced 'custom' merge algorithm with std::set::insert (with hints).\n\nAs a result, the code is way more simplier and does not increase the\ntime it takes to merge.\n## Implement multi-process merging in fastHadd.\n\nA group of processes are organized in a virtual tree.\n\nEach process has a unique node_id (1 - number_of_proc) and\nwill start (fork) 2*node_id + {0,1} processes (if new node_id <=\nnumber_of_proc).\n\nEach process will merge all files identified by (file_index % (node_id - 1) == 0),\nplus all histograms from his child processes.\nIPC is done via pipe()s.\n\nThis gives us somewhat good latency. With 7 processes this will\ndecrease the merging down 11s (see below).\n\nI have tried using threads to merge faster, but this was futile.\nRoot just has too many global internal states.\nAnd I couldn't serialize root access, since it takes the majority of time.\n\nI've tried fastParallelHadd.py (changing various parameters),\nbut the lowest time I could get was ~26seconds.\n\nAll numbers were done using fastHadd to merge 100 files, summary:\n\n```\n- 50.321s, 227mb  -> old fastHadd with no changes\n- 50.198s, 225mb  -> new fastHadd\n- 18.719s, 550mb  -> new fastHadd, using 3 processes\n- 11.143s, 1202mb -> new fastHadd, using 7 processes\n```\n\nMemory is sum of proportional set size (PSS).\n\nI will make ports to 75 and 76 after and if this is accepted.\n", "branch": "CMSSW_7_4_X", "changed_files": 2, "closed_at": "1438092835", "comments": 13, "commits": 2, "created_at": "1437391268", "deletions": 321, "labels": ["comparison-available", "dqm-pending", "orp-approved", "pending-signatures", "tests-approved"], "merge_commit_sha": "6ae0db8d1a6e2e12e06b3c3c4dab16aabdb3d4bb", "merged_at": "1438092835", "merged_by": "cmsbuild", "milestone": "Next CMSSW_7_4_X", "number": 10280, "release-notes": [], "review_comments": 0, "state": "closed", "title": "Implement multi-processing in fastHadd to merge DQM histograms faster.", "updated_at": "1504617305", "user": "dmitrijus"}