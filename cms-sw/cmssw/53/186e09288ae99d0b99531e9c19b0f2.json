{"additions": 3, "auther_ref": "alca-propage_change_downstream", "auther_sha": "3e37fc58549e5df2ea0cdb5617240e2d631debd4", "author": "francescobrivio", "body": "#### PR description:\r\nThis is an immediate follow up to #44864.\r\nAs nicely explained in https://github.com/cms-sw/cmssw/pull/44869#issuecomment-2084591790 we need a way to propagate downstream the information in case the `closestState.isValid()` check introduced in #44864 fails.\r\n\r\nIn this PR I'm simply moving:\r\n```\r\ninfo.setTrack(track);\r\ninfo.setBField_z(transTrackBuilder.field()->inInverseGeV(GlobalPoint(track->vx(), track->vy(), track->vz())).z());\r\n```\r\ntogether with the other methods used to fill the `info` object and **after** the check on the track state validity.\r\n\r\n\r\n#### PR validation:\r\nCode compiles.\r\nAdding a local cout for `info.hasTrack()` for the track not passing the state check I correctly get:\r\n```\r\n> info.hasTrack(): 0\r\n```\r\n\r\n#### Backport:\r\nNot a backport. This PR will be backported in #44869 together with the backport of #44864", "branch": "master", "changed_files": 1, "comments": 4, "commits": 1, "created_at": "1714465461", "deletions": 4, "labels": ["reconstruction-pending", "pending-signatures", "tests-pending", "orp-pending", "urgent", "code-checks-pending", "xpog-pending", "tau"], "milestone": "CMSSW_14_1_X", "number": 44875, "release-notes": [], "review_comments": 0, "state": "open", "title": "Propagate downstream the valid state check in PATLeptonTimeLifeInfoProducer", "updated_at": "1714465748", "user": "francescobrivio"}