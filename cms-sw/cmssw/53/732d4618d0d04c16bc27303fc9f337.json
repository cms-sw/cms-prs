{"additions": 345, "auther_ref": "TrackClassifierTf_PR", "auther_sha": "80bac8ff8feb374ce3825816eb6a2990d2668a05", "author": "hajohajo", "body": "This PR changes implements TensorFlow based track classifier in RecoTracker/FinalTrackSelectors. It also changes the default behaviour when using Configuration/ProcessModifiers/trackdnn_cff. Since none of the standard workflows (as far as I'm I aware of) use it, so there are no changes expected in the output. Main purpose of this PR is to get the implementation of the code into CMSSW to let other people continue developing and testing the TF based networks.\r\n\r\n@mtosi @JanFSchulte \r\n\r\n**Description**\r\nThe implementation so that the tensorflow::graphDef shared to multiple modules as ESProduct only one tensorflow::Session per module is initialized in the first call to produce() and then kept as a member variable of the edm::stream, based on the discussion at https://github.com/cms-sw/cmssw/issues/28912\r\n\r\nThe preprocessing of inputs happens inside the neural network using custom layers to perform input scaling and transformations to avoid the need to adjust CMSSW code too often. Only when the input variables (or their order) is changed, should one need to adjust the code at RecoTracker/FinalTrackSelectors/plugins/TrackTfClassifier.cc\r\n\r\nThe selection thresholds for different track qualities was collected into RecoTracker/IterativeTracking/python/dnnQualityCuts.py so they can be adjusted from one place for all the iterations. The different iterations read their quality cut values for the DNN from the same dictionary stored there.\r\n\r\nA set of network weights for running the TrackTfClassifier with can be found from:\r\nhttps://github.com/cms-data/RecoTracker-FinalTrackSelectors/pull/9\r\n\r\nThe 'frozen_graph.pb' file needs to be placed to the folder RecoTracker/FinalTrackSelectors/data in order to be found by the relevant code. The training was done using TF2 so a suitably novel CMSSW version is required to run it (11_X and onwards).\r\n\r\nThe classifier can be turned on by importing the trackdnn modifier in the reconstruction step:\r\n\r\n`from Configuration.ProcessModifiers.trackdnn_cff import trackdnn`\r\n\r\nand adding the IOV for the TfGraphRecord in the process:\r\n\r\n`process.tf_dummy_source = cms.ESSource(\"EmptyESSource\",\r\n                            recordName = cms.string(\"TfGraphRecord\"),\r\n                            firstValid = cms.vuint32(1),\r\n                            iovIsRunNotTime = cms.bool(True)\r\n                            )`\r\n\r\n\r\n#### PR validation:\r\n\r\nThe basic tests run with \r\n\r\n`scram b runtests`\r\n\r\nand\r\n\r\n`runTheMatrix.py -l limited -i all --ibeos`\r\n\r\nwithout issues. The standard workflow 10824.1 was tested with the above changes made to \"step3\" performing reconstruction and expected changes were confirmed in the produced tracking validation plots.", "branch": "master", "changed_files": 24, "closed_at": "1605538997", "comments": 38, "commits": 4, "created_at": "1601976224", "deletions": 59, "labels": ["code-checks-approved", "comparison-pending", "orp-pending", "pending-signatures", "reconstruction-rejected", "tests-pending"], "milestone": "CMSSW_11_2_X", "number": 31682, "release-notes": [], "review_comments": 25, "state": "closed", "title": "Track classifier using TensorFlow", "updated_at": "1605538998", "user": "hajohajo"}