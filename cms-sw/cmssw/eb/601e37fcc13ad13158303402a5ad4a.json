{"additions": 2807, "auther_ref": "kdtree_track_ecal_soa", "auther_sha": "f1a5e200ec8281d803e607186c3c994b5727d883", "author": "jpata", "body": "## PR description:\r\n\r\nThe aim of this initial draft is to get feedback from the wider community on the best way of making PFBlockAlgo ready for heterogeneous computing.\r\n\r\nIn this draft PR, I'm switching to SOA throughout in PFBlockAlgo.  The following modules have been converted to SOA already:\r\n\r\n- [x] KDTreeLinkerPSEcal\r\n- [x] KDTreeLinkerTrackEcal\r\n- [x] KDTreeLinkerTrackHcal\r\n- [x] ECALAndBREMLinker\r\n- [x] ECALAndECALLinker\r\n- [x] ECALAndHCALCaloJetLinker\r\n- [x] ECALAndHCALLinker\r\n- [x] GSFAndBREMLinker\r\n- [x] GSFAndECALLinker\r\n- [x] GSFAndGSFLinker\r\n- [x] GSFAndHCALLinker\r\n- [x] HCALAndBREMLinker\r\n- [x] HCALAndHOLinker\r\n- [x] HFEMAndHFHADLinker\r\n- [x] PreshowerAndECALLinker (old non KDTree part retained as-is) \r\n- [x] SCAndECALLinker\r\n- [x] TrackAndECALLinker (old non KDTree part retained as-is)\r\n- [x] TrackAndGSFLinker\r\n- [x] TrackAndHCALLinker (old non KDTree part retained as-is) \r\n- [x] TrackAndHOLinker\r\n- [x] TrackAndTrackLinker\r\n\r\nHGCAL-stuff (`GSFAndHGCalLinkes, SCAndHGCalLinker, HGCalandBREMLinker`) is not tested or used anywhere, therefore not ported. `BlockElementLinkerBase` must therefore retain some legacy arguments.\r\n\r\nAlthough we don't expect significant speed improvement from SOA in this particular module (KDTree is already quite efficient), this would be a necessary step for a GPU/FPGA implementation of PFBlockAlgo. In addition, once all the linkers and KD-trees are ported, we expect that caching track extrapolations and using `float` consistently throughout would allow for better vectorization by the compiler also on the CPU.\r\n\r\nThe main idea is as follows:\r\n- introduce `edm::soa::Table` types for tracks, clusters & rechits in ECAL, HCAL, HF etc.\r\n- These tables are produced in PFBlockAlgo and used as an input to KDTrees and Linkers. \r\n- In a later iteration, these tables can be retrieved from RECO producers upstream in the chain (e.g. a future cluster producer).\r\n\r\nThis PR is purely technical and does not change the reco output.\r\n\r\nCertainly there are things that can be improved once the design is settled. The aim of doing the work in this draft is to get feedback on the best approach.\r\n\r\nattn PF group @hatakeyamak @bendavid \r\n\r\n#### PR validation:\r\n\r\nCode compiles and reco output does not change in `23434.21`, `25202.0` (validateJR all).\r\n\r\n##### Profiling\r\n\r\n(in progress)\r\n\r\n(apologies if you got an empty email about this PR due to a typo)", "branch": "master", "changed_files": 43, "closed_at": "1603708868", "comments": 233, "commits": 33, "created_at": "1597900962", "deletions": 996, "labels": ["code-checks-approved", "comparison-available", "core-pending", "orp-pending", "pending-signatures", "reconstruction-pending", "tests-approved"], "milestone": "CMSSW_11_2_X", "number": 31191, "release-notes": [], "review_comments": 46, "state": "closed", "title": "Readiness of PFBlockAlgo to heterogeneous computing: use SOA", "updated_at": "1603708869", "user": "jpata"}