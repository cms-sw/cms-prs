{"additions": 46, "auther_ref": "dqm-use-processblock", "auther_sha": "4df3118908d082bc70dc54537d6f488848ecce74", "author": "schneiml", "body": "#### PR description:\r\n\r\nThis PR aims to use the new ProcessBlock feature in DQM HARVESTING to fix issue #28354.\r\n\r\nSee also my recent talk about how this works: https://indico.cern.ch/event/934933/contributions/3928462/attachments/2072544/3479621/dqm-cmssw.pdf (Page 50).\r\n\r\nCaveats:\r\n\r\n- ~It does not work for now. Either the dependencies are not correctly set up at all or at least `process.Tracer = cms.Service(\"Tracer\", dumpPathsAndConsumes = cms.untracked.bool(True))` does not correctly display them.~ Fixed with #30737.\r\n- This only covers DQM HARVESTING. ALCAHARVEST most likely has the same hidden dependency problem. For the DQM parts of the AlCa setup this PR will do something, but I don't know which modules actually write the conditions payload at `endJob` and if their assumptions remain within the guarantees of edm.\r\n- I don't know if there are any hidden dependencies left. They are hidden, after all. But at least the most obvious (between any harvesting module and the `DQMFileSaver` should be covered and more depdendencies can be added it if turns out to be required. (Update: One more dependency around QTests in `SiPixelPhase1Summary` found and fixed here. There might be more like these, and they might show up randomly now and then.)\r\n- I did not change how HARVESTING/QTests work. The interesting case here is harvesting/qtest/harvesting sequences, where as of today, we do the first harvesting and the qtests in `endRun` and then the second harvesting in `endJob` (now `endProcessBlock`). That was the only way to do it without `ProcessBlock`s. Now we *could* do it all in `endProcessBlock` (a.k.a. `dqmEndJob`) using token dependencies and two separate harvesting modules, but I did not perform this transform. In practice, the only use case for such a setup is `SiStripMonitorClient`, and I am happy that it works as is and don't want to break and debug it another time.\r\n- I have no idea how to actually set up process blocks for multi-run harvesting for now. I just replaced `endJob` with `endProcessBlock` for now, which should cover all existing cases. With `ProcessBlocks`, it should be possible again to harvest multiple runs independently in one job (or even multi-run harvest multiple groups of runs), but there is no need or support for that right now.\r\n- `endJob` harvesting is now no longer supported in legacy modules. It was not really used anyways. I removed a bunch of empty `endJob` methods to avoid confusion. Some modules still have `endJob` harvesting code, but it is not used in production; it can still work in stand-alone setups that do not rely on `DQMFileSaver`.\r\n\r\n#### PR validation:\r\n\r\nDependencies are displayed by the tracer, and the PR tests seem ok. This may break some stand-alone workflows (esp. Validation) if they use legacy modules, use end-job harvesting, and use `DQMFileSaver`. (Not sure if that combination exists anywhere).\r\n\r\n@wddgit @makortel FYI.", "branch": "master", "changed_files": 28, "closed_at": "1596694091", "comments": 43, "commits": 6, "created_at": "1594807111", "deletions": 73, "labels": ["alca-approved", "code-checks-approved", "comparison-available", "dqm-approved", "fully-signed", "orp-approved", "tests-approved"], "merge_commit_sha": "15029293b7b45e7803b68b257b2d10f8ff1e09ba", "merged_at": "1596694091", "merged_by": "cmsbuild", "milestone": "CMSSW_11_2_X", "number": 30698, "release-notes": [], "review_comments": 0, "state": "closed", "title": "DQM: Use ProcessBlock in Harvesting", "updated_at": "1596694092", "user": "schneiml"}