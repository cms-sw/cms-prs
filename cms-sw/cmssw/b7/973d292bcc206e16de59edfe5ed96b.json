{"additions": 28, "auther_ref": "exception-eols-fix-76X", "auther_sha": "28b29c3de6243c3924571aa432f360ed0b302dbc", "author": "smorovic", "body": "Port of #12200 (75X).\n\nA rare race condition occurs when exception is thrown during processing of last few events in a file and LS. In this case, another thread can already request next event from the source. If next event belongs to the next LS, input source reports to the FastMonitoringService a total number of events in previous LS.\n\nNormally in case of exception, we skip writing JSON stream output (catching exception action callback in the FastMonitoringService), and subsequently hltd assigns missing events as error events to close micro-merge of that LS. However, suppression was not happening after input source already reported the total number of events to the FastMonitoringService. This lead to incomplete micromerge for some streams. The problem is present only in multithreading, as in the single-threaded mode source can get a request for next event before exception on currently processed event is thrown (i.e. event requests are aborted and run/LS get closed).\n\nIn this update, JSON output is suppressed if exception has been thrown, regardless of input source report.\n", "branch": "CMSSW_7_6_X", "changed_files": 1, "closed_at": "1453607532", "comments": 12, "commits": 1, "created_at": "1446200149", "deletions": 30, "labels": ["comparison-available", "daq-approved", "fully-signed", "orp-pending", "reconstruction-approved", "tests-approved"], "milestone": "CMSSW_7_6_X", "number": 12201, "release-notes": [], "review_comments": 0, "state": "closed", "title": "Fix race condition in DAQ modules when exception is thrown in event processing (only affecting multithreading) - 76X", "updated_at": "1453607532", "user": "smorovic"}