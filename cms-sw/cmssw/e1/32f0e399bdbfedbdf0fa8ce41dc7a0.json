{"additions": 173, "auther_ref": "NewCellFast", "auther_sha": "a578218a075ade1b28f251cb4cf605d1225df2c5", "author": "kpedro88", "body": "@Dr15Jones profiled the `beginRun` step for a phase2 configuration and found that 200s was spent initializing the HCAL geometry (using FlexiHardcodeLoader). This is because each new cell addition triggered a sorted `insert()` into a vector of valid DetIds.\r\n\r\nSince the geometry is filled all at once by the loader, I was able to modify this setup to use regular `push_back()` when adding valid DetIds, and then sort the vector at the end. Intelligent `reserve()`s are also used where possible. This \"fast\" alternative uses private functions of the geometry, so only friend classes (loaders) can use it. If for some reason, a new cell is added by other code that doesn't guarantee sorting at the end, it will still use the regular sorted insert from `CaloSubdetectorGeometry`.\r\n\r\nThis changed reduced the 200s setup time to 10s. Much of the remaining time was due to the use of `LogInfo`, which is now replaced by `EDM_ML_DEBUG` preprocessor flags, so messages are only printed in debug mode.\r\n\r\nattn: @ianna, @bsunanda ", "branch": "master", "changed_files": 10, "closed_at": "1490690014", "comments": 17, "commits": 2, "created_at": "1490370086", "deletions": 46, "labels": ["comparison-available", "fully-signed", "geometry-approved", "orp-approved", "tests-approved"], "merge_commit_sha": "cc5d6a717aa1748b74be4bbd1ab7584821b86dc2", "merged_at": "1490690014", "merged_by": "cmsbuild", "milestone": "CMSSW_9_1_X", "number": 18076, "release-notes": [], "review_comments": 0, "state": "closed", "title": "Speed up newCell() in HcalGeometry", "updated_at": "1490690015", "user": "kpedro88"}