{"additions": 38, "auther_ref": "portableCollectionDef", "auther_sha": "e9e99a83087dca6a0d7a4c8748fde6b1a3e92f4b", "author": "makortel", "body": "#### PR description:\r\n\r\nThe first commit of this PR makes the `PortableCollection<T, TDev>` alias template usable also indepndently of `ALPAKA_ACCELERATOR_NAMESPACE`. This ability can be useful e.g. for EventSetup data product classes that themselves are templated over the device type (`TDev`), and want to use the PortableCollection for SoA storage (e.g. having PortableCollection(s) as data members). I have an example crafted, but that is waiting for https://github.com/cms-sw/cmssw/pull/43298 to get merged, and therefore I went with a standalone PR just for this ability.\r\n\r\nWhile doing that I felt the way the `PortableCollection<T, TDev>` is defined was a bit cumbersome.\r\n* The second commit continues to use the trait-based approach, but the trait is fully defined and specialized in `DataFormats/Portable/interface/PortableCollection.h`\r\n* The third commit uses `std::conditional_t` in the alias template instead of the trait class template\r\n\r\nSome further cleanup can be done, depending on the decided approach. (e.g. in case of second or third commit I'd move the specializations of `CopyToHost` and `CopyToDevice` class templates to `DataFormats/Portable/interface/PortableCollection.h`).\r\n\r\n#### PR validation:\r\n\r\nAdded unit test compiles.", "branch": "master", "changed_files": 4, "comments": 1, "commits": 3, "created_at": "1700171244", "deletions": 32, "labels": ["pending-signatures", "tests-pending", "orp-pending", "code-checks-pending", "heterogeneous-pending"], "milestone": "CMSSW_14_0_X", "number": 43310, "release-notes": [], "review_comments": 0, "state": "open", "title": "[RFC] Allow PortableCollection<T, TDev> to be used also independently of ALPAKA_ACCELERATOR_NAMESPACE", "updated_at": "1700171290", "user": "makortel"}