{"additions": 182, "auther_ref": "fc-g4ForBTL", "auther_sha": "b606e7acadc8b5a99c5d9dc1dc475fea3092f8d7", "author": "fabiocos", "body": "#### PR description:\r\n\r\nThis PR addresses two related issues, emerged in the past both in MTD studies and in discussions with HGCal experts (@rovere @felicepantaleo):\r\n\r\n- provide the MC truth for BTL clusters, intended as collection of adjacent crystals within a module hit by the same track entering from tracker;\r\n- provide a working association between ETL hits and simulated tracks stored in the event, like it is happening for any calorimetric hit.\r\n\r\nThe latter is simply solved by instrumenting the ```MtdSD``` class with code using the ```caloIDonSurface``` mechanism implemented in ```TrackInformation```.\r\nThe former requires to implement a mechanism similar to that used for the tracker -> calo transition, with the additional complication that BTL is fully embedded in the tracker, and this can generate a bit more complex set of particles configurations.\r\n\r\nIn order to address this last issue, the ```TrackInformation``` class is instrumented with MTD-specific information, packed into a bitted word to avoid multiple ```bool``` variables and save memory space. The information about transitions Tracker -> BTL and BTL -> Tracker are managed within the ```SteppingAction``` class, while the handling of tracks created within the BTL volume is made in the ```NewTrackAction``` class.\r\n\r\nThe present PR is not supposed to modify the simulation history in terms of track / vertices stored in the event, or hit collections. Only the track ID stored within BTL/ETL hits can be affected. This PR is not completely addressing the problem of tracks created within the BTL volume, at present not stored in the event persistent history, and then entering the calo volume. The cut mechanism enabling the persistent storage is implemented in ```MtdSD```, but left switched off by default (using the standard cuts effectively preventing any action). The possible update of this part, affecting the event history, is deferred to a separate PR.\r\n\r\nThis PR is in principle ineffective on run2/run3 simulation, but some checks in ```SteppingAction``` and ```NewTrackAction``` are running also for that. Without an era-dependent flag, I do not see a way to avoid it.\r\n\r\nThe update of existing MTD geometry regions for ProdCuts should be totally transparent, as they are so far used in one and only one place within CMSSW, and the existing behaviour is kept. \r\n\r\n#### PR validation:\r\n\r\nThe code behaviour has been studies through detailed history and debugging printout on single muon, electron and pion guns, verifying the correctness of the logic for various cases: particle entering BTL, exiting BTL, loopers re-entering BTL, particles crossing ETL. A test on run2 simulation test wf 11607.0 do not show any difference, as expected.", "branch": "master", "changed_files": 16, "comments": 4, "commits": 11, "created_at": "1681218074", "deletions": 20, "labels": ["simulation-pending", "geometry-pending", "pending-signatures", "orp-pending", "tests-started", "upgrade-pending", "code-checks-approved"], "milestone": "CMSSW_13_1_X", "number": 41318, "release-notes": [], "review_comments": 0, "state": "open", "title": "MTD simulation: update Track ID stored in MTD SimHits", "updated_at": "1681218653", "user": "fabiocos"}