{"additions": 303, "auther_ref": "TrackIsoUpdateFor94", "auther_sha": "fc9b56e48288da8a31ec38b7c75556493f6c5cc6", "author": "Sam-Harper", "body": "This PR changes the track isolation definition in the GsfElectron to the value which is commonly used. Apart from an extremely minor impact on PF ID of an electron, this will have no impact to anything except the HEEP ID.  It essentially transfers the recomputed VID track isolation into the electron itself.\r\n\r\nCurrently, the value of the track isolation is not used in any ID (except PF preselection where it helps decide whether to use the isolated or non-isolated MVA, any changes to the isolation value will have minimal effect).  The one ID which does use it, the HEEP ID, has to recalculate it on the fly which is awkward for the user.\r\n\r\nThe update looks large but its really note. The existing code used by GsfElectronAlgo couldnt cut on the tracks as we do now for the HEEP ID track isolation. So rather than maintaining two similar bits of code, I just extended the EleTkIsolFromCands class to take generalTracks as well. I can rename if you wish.\r\n\r\nEleTkIsolFromCands was also updated to take into account 9X miniAOD changes which means the pt of the track is now stored in the PackedCandidate, hence negating the hack where we had to recover the track pt for electron candidates. Additionally KF tracks of electrons are stored so its necessary to be able to reject electrons from one collection of PackedCandidates (which have GsfTracks stored) and only use the KFTracks. \r\n\r\nFinally at the same time, I took advantage of the saturation info now being stored in GsfElectron and simplified the VID showershape cuts. Then I defined a new HEEP ID V8.0 which picks up the track isolation from the electron once again, negating the need to recalculate it on the fly. Finally I changed the version of HEEP ID which is run in miniAOD to V8.0 (which now is identical to V6.0 which it replaced except for better handling of saturation in showershapes). \r\n\r\nDatasize implications:\r\nnone, simply replacing outdated variables, no new variables added\r\n\r\nTiming implications:\r\nminimal. we replace one track isolation calculator for another\r\n\r\nMemory implications:\r\nnone, no significant changes here\r\n\r\nDownstream implications:\r\nif track isolation is messed up, it simply means the annoying status quo of the user having to recalculate it remains. It will also have a very small effect on PF ID not to the point where there will be any practical difference. So no negative implications to anybody except HEEP ID users. \r\n\r\nValidation:\r\nI used DoubleEG 300497 LS 41 to 42 with GT 92X_dataRun2_Prompt_v8 and CMSSW_9_2_8 to do the tests.\r\n\r\nFirst checked that value stored in the GsfElectron is the same with the new code when  the cuts are equal to the old value (V1 in the track isolation definations):\r\n(this was done on an event by event basis but heres a plot for a summary):\r\nhttps://sharper.web.cern.ch/sharper/cms/heep/2017/Sep17th/oldCodeVsNewCodeIsoTrkVal.gif\r\n\r\nThen checked the new definition wasnt doing anything too crazy. \r\nhttps://sharper.web.cern.ch/sharper/cms/heep/2017/Sep17th/newIsoVsOldIso.gif\r\n\r\n\r\n\r\n", "branch": "master", "changed_files": 14, "closed_at": "1507183095", "comments": 59, "commits": 4, "created_at": "1505656680", "deletions": 225, "labels": ["code-checks-approved", "comparison-available", "fully-signed", "orp-approved", "reconstruction-approved", "tests-approved"], "merge_commit_sha": "0b70aea1b7723a6dfd453d9d015b670d0f735256", "merged_at": "1507183095", "merged_by": "cmsbuild", "milestone": "CMSSW_9_4_X", "number": 20550, "release-notes": [], "review_comments": 47, "state": "closed", "title": "electron track isolation producer improvements + reading saturation info from the electron in HEEP V7.0", "updated_at": "1507186372", "user": "Sam-Harper"}