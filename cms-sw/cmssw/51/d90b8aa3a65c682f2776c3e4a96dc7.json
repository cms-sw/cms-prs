{"additions": 704, "auther_ref": "asynchronousESProducer", "auther_sha": "6fdbaa41e53c4f96bd0bf8eef0f3a191b0ceb816", "author": "wddgit", "body": "#### PR description:\r\n\r\nImplement ExternalWork for ESProducers\r\n\r\nThis new feature is analogous to the ExternalWork ability already implemented for EDProducers and EDFilters. It behaves in almost the same way. There is an acquire function that runs that can get data from the EventSetup, then the ExternalWork runs asynchronously, and finally a produce method runs. The ExternalWork has a WaitingTaskWithArenaHolder to let the produce method know when it can start.\r\n\r\nThe interface to use this feature is provided by new member functions of the ESProducer class named setWhatProducedExternalWork (6 functions with this name) and setWhatProducedExternalWorkWithLambda (2 functions with this name). To utilize the new feature, use one of the new functions instead of one of the old functions named setWhatProduced. The new acquire function must be provided to the ESProducer in a way completely analogous to the way one supplies the produce function, with all the same alternatives.\r\n\r\nFor example, one could define the following function as a member function of the class deriving from ESProducer.\r\n\r\n```\r\nvoid acquire(MyRecordType const&, edm::WaitingTaskWithArenaHolder);\r\n```\r\n\r\nOr one could provide a lambda as an argument to the function call. Or one could define a similar function with a different name and provide a pointer to that function as an argument to the function. \r\n\r\nThe behavior of existing code that uses the older setWhatProduced functions should not change. That interface is not modified, although there are some changes in the underlying implementation details.\r\n\r\n@fwyzard This adds two new signals to the ActivityRegistry that you might or might not want to include in the fast timer service.\r\n\r\n#### PR validation:\r\n\r\nAt this point nothing uses this new feature other than new unit tests in the Framework added by this PR. These new unit tests pass. Existing code should behave identically so this relies on existing tests for ESProducers not using using the new ExternalWork feature.\r\n", "branch": "master", "changed_files": 23, "comments": 4, "commits": 1, "created_at": "1676568673", "deletions": 173, "labels": ["core-pending", "pending-signatures", "tests-approved", "orp-pending", "code-checks-approved"], "milestone": "CMSSW_13_1_X", "number": 40798, "release-notes": [], "review_comments": 0, "state": "open", "title": "Implement ExternalWork for ESProducers", "updated_at": "1676591237", "user": "wddgit"}