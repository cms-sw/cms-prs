{"additions": 10, "auther_ref": "implement_HostDeviceConstant", "auther_sha": "dbd639cf80db99bf4457d2be5a739784e9efaba4", "author": "fwyzard", "body": "#### PR description:\r\n\r\nThe use of host-side `consexpr` constants in device code [is limited to](https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#constexpr-variables)\r\n  - scalars (other than `long double`)\r\n  - scalar elements of aggregates used inside `constexpr` functions\r\n\r\nIn particular, it's not possible to use `constexpr` scalars by pointer or reference (_e.g._ `std::min()` takes arguments by reference), or pass `constexpr` arrays as pointers, or access elements of `constexpr` arrays outside of `constexpr` functions.\r\n\r\nThe workaround is to define a macro that evaluates to `constexpr` on the host, and to `__device__ constexpr` on the device. Such macro can be used to declare aggregate objects that are available both on the host and on the device.\r\nNote these objects may be at different memory addresses on the host and device, so their pointers will be different -- but the actual values should be the same.\r\n\r\n#### PR validation:\r\n\r\nNone.", "branch": "master", "changed_files": 1, "comments": 7, "commits": 1, "created_at": "1646657194", "deletions": 0, "labels": ["pending-signatures", "tests-approved", "orp-pending", "code-checks-approved", "heterogeneous-rejected"], "milestone": "CMSSW_12_3_X", "number": 37159, "release-notes": [], "review_comments": 0, "state": "open", "title": "Define HOST_DEVICE_CONSTANT to implement constexpr aggregate host/device constants", "updated_at": "1646674752", "user": "fwyzard"}