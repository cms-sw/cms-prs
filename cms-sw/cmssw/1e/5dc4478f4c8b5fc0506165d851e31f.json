{"additions": 19, "auther_ref": "stub_z_fix", "auther_sha": "94f9f4ee26368a2a06899530cb5e24b913541dbe", "author": "aehart", "body": "@tomalin \r\n\r\n#### PR description:\r\n\r\nThis PR fixes a numerical stability issue with the L1 extended tracking emulation, in particular, when seed stubs are invented, and their z-coordinates are calculated here:\r\nhttps://github.com/cms-sw/cmssw/blob/CMSSW_14_0_0/L1Trigger/TrackFindingTracklet/src/PurgeDuplicate.cc#L680-L681\r\nWhen the tracklet pT is ~high~ low enough, the argument to `std::acos` can sometimes be outside [-1, 1]. So you get track candidates like the following (note the stub with `z=nan`):\r\n```\r\nInput track cand: [phiSec,etaReg]=[1,12] HT(m,c)=(6858246,1) q/pt=-0.0711 tanL=1.5208 z0=-3.1506 phi0=0.7636 nStubs=8 d0=2.2936\r\nstub layers = [ 2, 2, 2, 3, 4, 11, 11, 12 ]   KF stub layers = [ 1, 1, 1, 2, 3, 4, 4, 5 ]\r\n\r\nstub index=1003 layerId=2 r=37.1777 phi=0.7170 z=53.2697 sigmaX=0.0029 sigmaZ=0.0423 TPids=\r\nstub index=5031 layerId=2 r=37.1777 phi=0.7197 z=53.1452 sigmaX=0.0029 sigmaZ=0.0423 TPids=\r\nstub index=6004 layerId=2 r=37.1777 phi=0.7097 z=nan sigmaX=0.0029 sigmaZ=0.0423 TPids=\r\nstub index=2023 layerId=3 r=54.3401 phi=0.7435 z=79.4590 sigmaX=0.0029 sigmaZ=0.0423 TPids=\r\nstub index=4019 layerId=4 r=70.4373 phi=0.7602 z=101.1695 sigmaX=0.0026 sigmaZ=1.4506 TPids=\r\nstub index=58 layerId=11 r=88.2589 phi=0.7735 z=131.1914 sigmaX=0.0026 sigmaZ=1.4506 TPids=\r\nstub index=7051 layerId=11 r=93.8537 phi=0.7748 z=133.4150 sigmaX=0.0026 sigmaZ=1.4506 TPids=\r\nstub index=3033 layerId=12 r=104.8286 phi=0.7868 z=152.7650 sigmaX=0.0026 sigmaZ=1.4506 TPids=\r\n```\r\n\r\nUltimately, this causes a failure when calculating the determinant of a matrix during the Kalman filter fit, leading to the error reported in #44306:\r\n```\r\n\r\n[a] Fatal Root Error: @SUB=TDecompLU::DecomposeLUCrout\r\nmatrix is singular\r\n```\r\nThe matrix is not singular though, it just has not-a-number entries coming from applying `std::acos` to a number outside [-1, 1].\r\n\r\nExpanding the argument to `std::acos` seems to solve the issue. Just to be safe, I made similar expansions for the arguments to `std::asin` used elsewhere in the same method, and I explicitly replace the arguments with -1 or 1 if they still happen to be outside [-1, 1].\r\n\r\n#### PR validation:\r\n\r\nThe error reported in #44306, which I was able to reproduce by rerunning one of the PU relval jobs listed there, goes away after applying these changes.", "branch": "master", "changed_files": 1, "comments": 1, "commits": 5, "created_at": "1710866117", "deletions": 3, "labels": ["l1-pending", "pending-signatures", "tests-pending", "orp-pending", "code-checks-pending"], "milestone": "CMSSW_14_1_X", "number": 44471, "release-notes": [], "review_comments": 0, "state": "open", "title": "Numerical stability fix for Phase 2 L1 tracking", "updated_at": "1710866495", "user": "aehart"}