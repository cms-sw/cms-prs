{"additions": 2003, "auther_ref": "MPI_updates", "auther_sha": "3247d221be4b017c58670b5856f4f8c10afb8286", "author": "fwyzard", "body": "#### PR description:\r\n\r\nLet multiple CMSSW processes on the same or different machines coordinate event processing and transfer data products over MPI.\r\n\r\nThe implementation is based on four CMSSW modules.\r\nTwo are responsible for setting up the communication channels and coordinate the event processing:\r\n  - a \"remote controller\" called `MPIController`\r\n  - a \"remote source\" called `MPISource`\r\n\r\nand two are responsible for the transfer of data products:\r\n  - a \"sender\" called `MPISender`\r\n  - a \"receiver\" called `MPIReceiver`\r\n\r\n.\r\n\r\n![image](https://github.com/user-attachments/assets/ee8a8b7c-67a9-425f-ba88-1053bcd80a73)\r\n\r\nThe `MPIController` is an `EDProducer` running in a regular CMSSW process. After setting up the communication with an `MPISource`, it transmits to it all EDM run, lumi and event transitions, and instructs the `MPISource` to replicate them in the second process.\r\n\r\nThe `MPISource` is a `Source` controlling the execution of a second CMSSW process. After setting up the communication with an `MPIController`, it listens for EDM run, lumi and event transitions, and replicates them in its process.\r\n\r\nBoth `MPIController` and `MPISource` produce an `MPIToken`, a special data product that encapsulates the information about the MPI communication channel.\r\n\r\nThe `MPISender` is an `EDProducer` that can read a collection of a predefined type from the Event, serialise it using its ROOT dictionary, and send it over the MPI communication channel.\r\n\r\nThe `MPIReceiver` is an `EDProducer` that can receive a collection of a predefined type over the MPI communication channel, deserialise is using its ROOT dictionary, and put it in the Event.\r\n\r\nBoth `MPISender` and `MPIReceiver` are templated on the type to be transmitted and de/serialised.\r\n\r\nEach `MPISender` and `MPIReceiver` is configured with an instance value that is used to match one `MPISender` in one process to one `MPIReceiver` in another process. Using different instance values allows the use of multiple `MPISenders`/`MPIReceivers` in a process.\r\n\r\nBoth `MPISender` and `MPIReceiver` obtain the MPI communication channel reading an `MPIToken` from the event. They also produce a copy of the `MPIToken`, so other modules can consume it to declare a dependency on the previous modules.\r\n\r\nAn automated test is available in the `test/` directory.\r\n\r\n#### Current limitations\r\n  - all communication is blocking, and there is no acknowledgment or feedback from one module to the other;\r\n  - `MPIDriver` is a \"one\" module that supports only a single luminosity block at a time;\r\n  - `MPISender` and `MPIReceiver` support a single compile-time type;\r\n  - there is no check that the type sent by the `MPISender` matches the type expected by the `MPIReceiver`.\r\n\r\n\r\n#### Expected future developments\r\n  - implement efficient serialisation for standard layout types;\r\n  - implement efficient serialisation for `PortableCollection` types;\r\n  - check the the collection sent by the `MPISender` and the one expected by the `MPIReceiver` match;\r\n  - extend the `MPISender` and `MPIReceiver` to send and receive multiple collections;\r\n  - rewrite the `MPISender` and `MPIReceiver` to send and receive arbitrary run-time collections;\r\n  - improve the `MPIController` to be a `global` module rather than a `one` module;\r\n  - let an `MPISource` accept connections and events from multiple `MPIController` modules in different jobs;\r\n  - let an `MPIController` connect and sent events to multiple `MPISource` modules in different jobs;\r\n  - support multiple concurrent runs and luminosity blocks, up to a given maximum;\r\n  - transfer the `ProcessingHistory` from the `MPIController` to the `MPISource` ? and vice-versa ?\r\n  - transfer other provenance information from the `MPIController` to the `MPISource` ? and vice-versa ?\r\n  - when a run, luminosity block or event is received, check that they belong to the same `ProcessingHistory` as the ongoing run ?\r\n\r\n\r\n#### PR validation:\r\n\r\nThis PR includes an automated unit test.", "branch": "master", "changed_files": 32, "comments": 102, "commits": 3, "created_at": "1610412286", "deletions": 0, "labels": ["core-pending", "pending-signatures", "orp-pending", "tests-started", "code-checks-pending", "heterogeneous-pending", "changes-dataformats"], "milestone": "CMSSW_15_0_X", "number": 32632, "release-notes": [], "review_comments": 7, "state": "open", "title": "Extend CMSSW to a distributed application over MPI", "updated_at": "1732514301", "user": "fwyzard"}