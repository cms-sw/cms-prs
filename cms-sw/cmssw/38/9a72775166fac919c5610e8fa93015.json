{"additions": 11, "auther_ref": "cond-boost-aarch64", "auther_sha": "06540158e05358b140183d9e9b761fc16cbf258d", "author": "davidlt", "body": "`libClang` seems to act differently on AArch64 causing `condformats_serialization_generate.py` always to select 0 classes. It happens that `is_definition()` on AST node mostly returns false.\n\nEven on such small examples:\n\n```\n$ cat my.h\nstruct timespec\n{\n  int tv_sec;\n  int tv_nsec;\n};\n```\n\nOn Fedora 20 on x86_64 \n\n```\ndisplayname: timespec, kind: CursorKind.STRUCT_DECL, is_definition: True,  location:<SourceLocation file 'my.h', line 1, column 8>\n>> get_definition().location: <SourceLocation file 'my.h', line 1, column 8>\n```\n\nOn Fedora 19 on aarch64\n\n```\ndisplayname: timespec, kind: CursorKind.STRUCT_DECL, is_definition: False,  location:<SourceLocation file 'my.h', line 1, column 8>\n>> get_definition().location: <SourceLocation file 'my.h', line 1, column 8>\n```\n\nChange checks if node (declaration record) and it's definition location (file, line and column) match. If match is found, it's a definition.\n\nDetails from `libClang` side:\n\n```\nBreakpoint 1, clang_isCursorDefinition (C=...)\n   at /home/david.abdurachmanov/new-arch/test/BUILD/fc19_aarch64_gcc490/external/llvm/3.4-cms2/llvm-3.4-6800b6d2afc/tools/clang/tools/libclang/CIndex.cpp:4709\n4709      if (!clang_isDeclaration(C.kind))\n(gdb) p C\n$1 = {kind = CXCursor_ClassDecl, xdata = 0, data = {0x7fb39e60e0, 0x0, 0x7fb000cfb0}}\n(gdb) p clang_getCString(clang_getCursorDisplayName(C))\n$2 = 0x9a5cd0 \"RunNumber\"\n(gdb) p C.\ndata   kind   xdata\n(gdb) set $foo = clang_getCursorDefinition(C)\n(gdb) p $foo\n$3 = {kind = CXCursor_ClassDecl, xdata = 0, data = {0x7fb39e60e0, 0x1, 0x7fb000cfb0}}\n\nAs you can see C != clang_getCursorDefinition(C), because C.data[1] != clang_getCursorDefinition(C).data[1]\n\nclang::cxcursor::operator== (X=..., Y=...)\n   at /home/david.abdurachmanov/new-arch/test/BUILD/fc19_aarch64_gcc490/external/llvm/3.4-cms2/llvm-3.4-6800b6d2afc/tools/clang/tools/libclang/CXCursor.cpp:936\n936       return X.kind == Y.kind && X.data[0] == Y.data[0] && X.data[1] == Y.data[1] &&\n(gdb) info args\nX = {kind = CXCursor_ClassDecl, xdata = 0, data = {0x7fb39e60e0, 0x1, 0x7fb000cfb0}}\nY = {kind = CXCursor_ClassDecl, xdata = 0, data = {0x7fb39e60e0, 0x0, 0x7fb000cfb0}}\n```\n\n`data[1]` seems to `SourceLocation.ID`.\n\nI compared md5 hashes of `Serialization.cc` files using untouched and modified `condformats_serialization_generate.py`. All were identical.\n\nThis is my initial proposal until I understand better the difference in libClang behavior on aarch64 and x86_64, or it's fixed in upstream.\n", "branch": "CMSSW_7_2_X", "changed_files": 1, "closed_at": "1400764140", "comments": 10, "commits": 2, "created_at": "1400674130", "deletions": 5, "labels": ["comparison-pending", "fully-signed", "tests-approved"], "merge_commit_sha": "2a79db92a3048db574222164f0e7c2c877abb9c1", "merged_at": "1400764140", "merged_by": "ktf", "milestone": "CMSSW_7_2_0_pre1", "number": 3948, "release-notes": [], "review_comments": 0, "state": "closed", "title": "condformats_serialization_generate.py: support for aarch64", "updated_at": "1400838699", "user": "davidlt"}