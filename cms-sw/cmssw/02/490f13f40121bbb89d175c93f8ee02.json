{"additions": 80, "auther_ref": "MemoryEfficient_Implementation_HGCdigitizer_PreMix", "auther_sha": "66cc32309c2d2878a01c606de39033e8ea6b9c52", "author": "adas1994", "body": "#### PR description:\r\n\r\n<The HGCDigitizer module, in it's current form, store timing information of all the incoming hits from the minbias events  in PreMixStage1 of the Premix Workflow. This PR aims to drop the timing information from redundant hits from the minbias events, once a HGCal cell reaches it's fire-off threshold of accumulated charge. \r\n\r\nI found the PR to improve the performance of the code in terms of CPU performance, reduced memory and disk usage. The quantitative figures are mentioned below -\r\n**CPU Performance -** \r\nFor BaseLine Igprof summary, I got the following\r\n\r\n       88.1  ...............  211'531'179'858 / 211'531'179'858    1'008'942'599 / 1'008'942'599      edm::BMixingModule::produce(edm::Event&, edm::EventSetup const&) [16]\r\n        2.3  ...............    5'484'689'754 / 5'484'689'754             13'591 / 13'591             edm::PoolOutputModule::write(edm::EventForOutput const&) [201]\r\n\r\n###############################################################################\r\nAnd for the new Premix method, I got\r\n\r\n       80.8  ...............  109'380'472'943 / 109'380'472'943      957'052'716 / 957'052'716        edm::BMixingModule::produce(edm::Event&, edm::EventSetup const&) [16]\r\n        2.2  ...............    2'970'142'735 / 2'970'142'735             11'298 / 11'298             edm::PoolOutputModule::write(edm::EventForOutput const&) [280]\r\n\r\n**Disk Usage -**\r\n\r\nPHGCSimAccumulator_simHGCalUnsuppressedDigis_EE_DIGI. 2.57756e+08 4.29255e+06\r\nPHGCSimAccumulator_simHGCalUnsuppressedDigis_HEfront_DIGI. 3.5771e+07 621998\r\nPHGCSimAccumulator_simHGCalUnsuppressedDigis_HEback_DIGI. 7.30215e+06 119472\r\n\r\nFor my new method, disk usage\r\n\r\nPHGCSimAccumulator_simHGCalUnsuppressedDigis_EE_DIGI. 6.85587e+07 4.08996e+06\r\nPHGCSimAccumulator_simHGCalUnsuppressedDigis_HEfront_DIGI. 6.34798e+06 333652\r\nPHGCSimAccumulator_simHGCalUnsuppressedDigis_HEback_DIGI. 760055 51035.3\r\n\r\n**MemoryInfo-**\r\n\r\nFOr the addPileup method, the new proposed procedure uses almost an order of magnitude less memory(as shown in the attached screenshot; Black background screenshot- Baseline method, White background screenshot- My new method\r\n<img width=\"772\" alt=\"BaseLine\" src=\"https://user-images.githubusercontent.com/29214321/88804940-94c04580-d17c-11ea-9eb0-8fc652776699.png\">\r\n<img width=\"774\" alt=\"NewPreMix\" src=\"https://user-images.githubusercontent.com/29214321/88804951-97229f80-d17c-11ea-8639-f352963bc58c.png\">\r\n\r\n)\r\n\r\n\r\n\r\n >\r\n\r\n#### PR validation:\r\n\r\n<I ran a validation test by comparing results from WorkFlow # 20634.0(standard mix) and # 20634.99(premix) using custom validation package here - https://github.com/amartelli/HGCTimingAnalysis/tree/TimingAnalysis_11_1_X >\r\n\r\n\r\n", "branch": "master", "changed_files": 2, "closed_at": "1596694930", "comments": 76, "commits": 3, "created_at": "1595359531", "deletions": 8, "labels": ["code-checks-approved", "comparison-available", "fully-signed", "orp-approved", "simulation-approved", "tests-approved", "upgrade-approved"], "merge_commit_sha": "658f74a6da2b901f3139510600a5018ae4b624c9", "merged_at": "1596694930", "merged_by": "cmsbuild", "milestone": "CMSSW_11_2_X", "number": 30867, "release-notes": [], "review_comments": 0, "state": "closed", "title": "Memory efficient implementation of timing information for HGCDigitizer module for Premix Workflow.", "updated_at": "1596694930", "user": "adas1994"}