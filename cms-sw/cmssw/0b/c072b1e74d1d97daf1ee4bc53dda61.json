{"additions": 47, "auther_ref": "fix-magnetic-field-scaling", "auther_sha": "510a62d246a267ce246b9e65d9489d26a63a6e0d", "author": "amadio", "body": "#### PR description:\r\n\r\nIn commit 0f77253518f774b8ed2c627a202d378b57a34df6, the MagGeometry was made thread-safe by using an `std::atomic<>` for caching the last volume used. This means that all threads, despite working on unrelated events, share a common cached volume, which is not suitable most of the time. The atomic also creates problems for concurrency, since whenever a thread caches a volume, the  CPU cacheline is invalidated, forcing all other threads to fetch the value of the cached volume from memory every time, consequently suffering from higher latency. Since that volume is not suitable, it's likely that each thread will then replace it with a new value, which is not good for the other threads, and so on, significantly slowing down the whole simulation, since the magnetic field is called many times for each track to integrate its trajectory.\r\n\r\nThis problem has been profiled and benchmarked in Intel's VTune Amplifier against cmssw branch `CMSSW_11_0_GEANT4_X_2019-10-10-2300`. The results are shown below with labels `before` and `after` the changes from this pull request. In all cases, hyper-threading was disabled, and the threads were pinned using `taskset` with an appropriate number of CPUs. The machine where all runs were performed is a dual-socket [Intel Xeon E5-2698 v3](https://ark.intel.com/content/www/us/en/ark/products/81060/intel-xeon-processor-e5-2698-v3-40m-cache-2-30-ghz.html) with 64GB of RAM. We simulate minimum bias events at E<sub>cm</sub> = 13TeV, and vary the total number of events and number of threads in each analysis.  The `cmsDriver` command used to create the input file is shown below:\r\n```\r\ncmsDriver.py MinBias_13TeV_cfi --era Run2_2018 -s GEN,SIM --pileup=NoPileUp\r\n--conditions auto:phase1_2018_realistic --geometry DB:Extended\r\n--eventcontent=RAWSIM --datatier GEN-SIM --dirout=./ -n $nevents --nThreads $nthreads\r\n--fileout file:scaling.root --mc --no_exec cmsRun MinBias_13TeV_cfi_GEN_SIM.py\r\n```\r\n\r\n#### PR validation:\r\n\r\nThere is no functional change introduced by this pull request. It is purely a performance optimization. The only thing that is different is that some barrel properties are computed only once at initialization rather than at every call to the magnetic field, as that seemed like a sensible thing to do as extra optimization.\r\n\r\nHere is a scaling plot showing scaling before and after the changes:\r\n<p align=\"center\">\r\n<img src=\"https://user-images.githubusercontent.com/249404/66829180-1f6be700-ef53-11e9-831a-5816e29132f6.png\" /></p>\r\n\r\nA throughput table before and after the changes is shown below. Throughput is calculated as (1024 events) / t, where t = (t - t), t is the start time for processing the first event, and t is the end of the job (i.e. estimate of total time minus initialization time).\r\n\r\n|Threads|Throughput (Events/s) [before]|Throughput (Events/s) [after]|Percent Change|\r\n|-|-|-|-|\r\n1|0.290|0.289|-0.34|\r\n2|0.609|0.594|-2.46|\r\n4|1.166|1.206|+3.43|\r\n8|1.903|1.950|+2.47|\r\n12|2.767|2.868|+3.65|\r\n16|3.368|3.390|+0.65|\r\n24|4.675|5.120|+9.52|\r\n32|4.471|6.059|+35.52|\r\n\r\nComparison of hotspots analysis at 32 threads in Intel VTune Amplifier (before - after):\r\n<p align=\"center\">\r\n<img src=\"https://user-images.githubusercontent.com/249404/66845832-0eca6980-ef71-11e9-9b01-d42731e5151b.png\" />\r\n</p>\r\n\r\nComparison of micro-architecture analysis at 32 threads in Intel VTune Amplifier (before - after):\r\n![screenshot](https://user-images.githubusercontent.com/249404/66847352-87322a00-ef73-11e9-8b46-aa64da165d8b.png)\r\n\r\nBottom-up micro-architecture comparison of before and after for 32 threads in Intel VTune Amplifier:\r\n![screenshot](https://user-images.githubusercontent.com/249404/66848101-c14ffb80-ef74-11e9-870d-645fd00949ba.png)\r\n\r\nBest regards,\r\nGuilherme\r\n\r\n\r\n\r\n", "branch": "master", "changed_files": 3, "closed_at": "1574066941", "comments": 53, "commits": 2, "created_at": "1571147674", "deletions": 27, "labels": ["code-checks-approved", "comparison-available", "hold", "orp-pending", "pending-signatures", "reconstruction-rejected", "tests-approved"], "milestone": "CMSSW_11_0_X", "number": 28180, "release-notes": [], "review_comments": 9, "state": "closed", "title": "Fix a scaling issue in MagneticField/VolumeBasedEngine", "updated_at": "1574066942", "user": "amadio"}