{"additions": 7388, "auther_ref": "processBlockFeature", "auther_sha": "3c64a1bb3271a38084718505e36198856f710051", "author": "wddgit", "body": "This introduces the new transitions beginProcessBlock, endProcessBlock, beginProcessBlockProduce, and endProcessBlockProduce. These can be used by producers, filters, and analyzers in a way that is analogous to beginRun, endRun, beginRunProduce, and endRunProduce. These abilities become available when the types ProcessBlockCache, BeginProcessBlockProducer, or EndProcessBlockProducer are passed to the base class of the module as template parameters. These abilities are not available to legacy module types.\r\n\r\nThe order modules are executed respects product dependencies established with calls to consumes and produces. One module can put products into a ProcessBlock and another module get them.\r\n\r\nbeginProcessBlock occurs after beginJob and after beginStream, but before any run, lumi or event transitions. endProcessBlock occurs after all run, lumi, and event transitions, but before endStream and endJob. Each occurs only once per job, except in the very unusual case where all output files are closed and new output files opened. In that case only, there will be a pair of end and begin transitions in between the output file close and open.\r\n\r\nThis is only the first of a series of PRs implementing this feature. Future PRs will add persistency and the ability to access this information from Events, Runs, and Lumis through a cache. With this PR, these abilities cannot be used by OutputModules. That will be added later. (In this PR, the OutputModule part of this is partially implemented. In the code from the EventProcessor to the functions in the OutputModuleBase classes, the implementation is complete. The functions in OutputModuleBase in this PR do nothing. The PoolOutputModule only has the minimal changes required to prevent this PR from breaking it. The next PR will complete the implementation for output.)\r\n\r\nSimilarly, the implementation is not done in the InputSource. The future transition accessInputProcessBlock is also only partially implemented. (The part in the InputSource is not implemented although the part of the code from EventProcessor down to the modules is complete. Those functions will never get called with the code in this PR.)\r\n\r\nThere should be no changes in output. After this PR, these new abilities are only used by modules in Core tests. Nothing extra should be running in production jobs and nothing should be modified. You can see the new transitions in the output from the Tracer. There are new signals ActivityRegistry. The MessageLogger is modified to properly handle these new contexts. I expect any performance impact to be negligible until modules start doing nontrivial work in these transitions.\r\n\r\nIn comments to this PR requesting changes, it would be useful to identify issues that can be handled in future PRs. This PR is already large.\r\n\r\n#### PR validation:\r\n\r\nThere are several new Framework unit tests and extensions to existing Framework unit tests to cover the new abilities. Output from tests in runTheMatrix and relVals should be identical.\r\n\r\nI expect there will be conflicts between this PR and #29553 in at least EDConsumerBase. They should not be difficult to resolve though.\r\n", "branch": "master", "changed_files": 179, "closed_at": "1594362439", "comments": 126, "commits": 25, "created_at": "1591293200", "deletions": 810, "labels": ["code-checks-approved", "comparison-available", "core-approved", "fully-signed", "orp-approved", "tests-approved"], "merge_commit_sha": "1beb25dee0b321478dd552a8a421e70234f6a1ae", "merged_at": "1594362438", "merged_by": "cmsbuild", "milestone": "CMSSW_11_2_X", "number": 30117, "release-notes": [], "review_comments": 130, "state": "closed", "title": "Add new ProcessBlock feature to the Framework", "updated_at": "1594362439", "user": "wddgit"}