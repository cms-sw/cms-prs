{"additions": 1496, "auther_ref": "devel_implement_generic_product_tools-v3", "auther_sha": "94d5ad846bad0552383237611ec4993bbdc1436f", "author": "ghyls", "body": "#### PR description:\r\n\r\nImplements an alternative to #47504 based on a plugin factory. This PR and #47504 provide the same functionality:\r\n\r\n> Specialise `Handle` and `OrphanHandle` for `WrapperBase`: this lets users produce and consume collections via their wrapper, using their run time type information (_e.g._ type name, type id, ...) instead of the compile time types. Implement integration test for these specialisations.\r\n> \r\n> Introduce a `TrivialCopyTraits` structure, that should be specialised for types that can be safely `memcpy`ed, without requiring a full ROOT streamer de/serialisation. Specialise the `TrivialCopyTraits` for arithmetic types and `vector`s of arithmetic types, and all `PortableObject` and `PortableCollection` types.\r\n> \r\n> Implement `edmtest::GenericCloner`: this `EDProducer` will consume and clone all the event products declared by its configuration; a direct `memcpy` will be used for types that support the `TrivialCopyTraits` interface; the ROOT dictionaries will be used to serialise and deserialise the other types.\r\n\r\n\r\nThe plugin factory returns `TrivialSerialiserSource` objects for a given type. `TrivialSerialiser`s can then be initialized by calling `TrivialSerialiserSource::initialize` with a `WrapperBase` object. The initialized TrivialSerialiser is `const` or non `const` depending on the constness of the `WrapperBase` object used to initialize it. A pointer to this `WrapperBase` object is stored in `TrivialSerialiserBase` as `const edm::WrapperBase*`.\r\n\r\n#### PR validation:\r\n\r\nVarious unit tests have been included:\r\n- `FWCore/TestModules/test/testGenericCloner_cfg.py`: produce, clone and validate products of type `int`, `std::string`, and `edm::EventID`. does *not* clone a transient `cms.int32()`.\r\n- `DataFormats/Portable/test/testGenericCloner_cfg.py`: Produce, clone and validate a portable object, a portable collection, and some portable multicollections.\r\n- `DataFormats/Common/test/test_catch2_TrivialCopyTraits.cpp`: Implements a `TrivialCopyTraits`  specialization for a simple struct. Tests the methods of `TrivialCopyTraits` with the types `int`, `double`, `std::vector<float>`, and the struct.\r\n\r\n\r\n#### If this PR is a backport please specify the original PR and why you need to backport that PR. If this PR will be backported please specify to which release cycle the backport is meant for:\r\n\r\n<!-- Please replace this text with any link to the master PR, or the intended backport release cycle numbers -->\r\n", "branch": "master", "changed_files": 26, "comments": 27, "commits": 6, "created_at": "1760384729", "deletions": 4, "labels": ["core-pending", "pending-signatures", "tests-pending", "orp-pending", "new-package-pending", "code-checks-pending", "heterogeneous-pending", "ngt"], "milestone": "CMSSW_16_0_X", "number": 49152, "release-notes": [], "review_comments": 59, "state": "open", "title": "Implement a `GenericCloner` test module based on an `edmplugin::PluginFactory`", "updated_at": "1761834411", "user": "ghyls"}