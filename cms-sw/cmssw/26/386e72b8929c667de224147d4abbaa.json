{"additions": 1273, "auther_ref": "geant10mt_step2", "auther_sha": "94be2e80644176202d4cb30e459f8294ea21bfe7", "author": "makortel", "body": "This PR completes (almost, see below for a known issue) the integration of Geant4 MT into multithreaded CMSSW. Most modifications are again in MT-specific classes, but some classes used by the serial OscarProducer were also modified. \n\nChanges affecting OscarProducer (results should stay the same)\n- Use G4Random::setTheEngine() instead of CLHEP::HepRandom::setTheEngine()\n  - Otherwise incorrect random number engine is used if run in MT G4 build\n  - Serial G4 build has `#define G4Random CLHEP::HepRandom`, so should be ok\n- Fix CustomUIsession to redirect G4cout/G4cerr to LogInfo/LogWarning\n- New class sim::ChordFinderSetter, abstracted out of sim::FieldBuilder, pass it to PhysicsListMakerBase::make()\n  - The only reason sim::FieldBuilder was passed to physics list was that G4MonopoleTransporation needs to switch between two G4ChordFinder objects. PhysicsListMakerBase::make() must be called in master thread, and sim::FieldBuilder::build() in all worker threads. This separation was the fastest way forward, althought it required changing the interface of PhysicsListMakerBase::make(), and percolating to all physics list classes.\n\nChanges in OscarMTProducer\n- Merged RunManagerMTInit to OscarMTMasterThread\n- OscarMTMasterThread is now in the GlobalCache\n  - The master std::thread is started in initializeGlobalCache(), and joined in globalEndRun()\n  - Begin/end run is signalled to the master thread via enumeration variable and with mutex+condition_variable\n  - Technically supports multiple runs in a job\n    - Supported at the same level as in OscarProducer\n    - E.g. geometry and magnetic field are obtained from EventSetup only during the first Run\n- All functionality in OscarProducer+RunManager should now be in OscarMTProducer+OscarMTMasterThread+RunManager+RunManagerMTWorker\n\nI have tested with 100 MinBias events (wf 1.0) (in CMSSW_7_2_GEANT10_X_2014-07-01-0200+#4457+#4476)\n- OscarProducer and OscarMTProducer with 1 thread give identical results\n  - OscarMTProducer with replay mode of RandomNumberGeneratorService checked manually with a couple of quantities\n  - OscarMTProducer without replay mode checked with runEdmFileComparison.py\n- But OscarMTProducer with >= 2 threads gives **different** results for some events (randomly, roughly in 1 event in 10-20 events)\n  - **Something to be followed up**\n\nIn addition I've tested with 200 TTBar events (wf 1302.0) that OscarMTProducer works technically at least up to 20 threads.\n\nTo ease testing with cmsDriver.py/runTheMatrix.py, I've included a customise-script to change all OscarProducers in a Process to OscarMTProducers. \n\n```\ncmsDriver.py ... --customise SimG4Core/Application/customiseMultithreadedSim.customiseMultithreadedSim --suffix \"-n NUMTHREADS\"\nrunTheMatrix.py ... --command=\"--customise SimG4Core/Application/customiseMultithreadedSim.customiseMultithreadedSim --suffix '-n NUMTHREADS'\" --apply 0\n```\n\nFollowing the Geant4 threading model, there are quite a lot of new thread_local statics (especially in RunManagerMTWorker, but also elsewhere). At least the RunManagerMTWorker ones could probably be cleaned up with the \"usual tricks\" in the future.\n", "branch": "CMSSW_7_2_X", "changed_files": 137, "closed_at": "1404541676", "comments": 9, "commits": 38, "created_at": "1404383391", "deletions": 583, "labels": ["alca-approved", "comparison-available", "fully-signed", "simulation-approved", "tests-approved"], "merge_commit_sha": "367554c15800ec08647dc410a5e8ee3c4ba5bf6a", "merged_at": "1404541676", "merged_by": "ktf", "milestone": "Next CMSSW_7_2_X", "number": 4505, "release-notes": [], "review_comments": 0, "state": "closed", "title": "Complete Geant4 MT integration", "updated_at": "1476951477", "user": "makortel"}