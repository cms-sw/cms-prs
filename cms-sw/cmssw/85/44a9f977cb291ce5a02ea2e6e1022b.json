{"additions": 16, "auther_ref": "RemoveInconsistentPreprocessorMacros", "auther_sha": "5a91461248bdd361604fd5bba320145c6d4ab990", "author": "wmtan", "body": " In CMSSW header files exposed to CINT in ROOT 5, C++11 constructs are must be hidden from CINT, Usually with preprocessor symbols (e.g **GCCXML**, **MAKECINT**). In ROOT 6, this hiding is not\nnecessary. Unfortunately, there is no consistency in the symbols used. Some are defined in ROOT 6,\nsome are not.\nI have discovered one case, in TrackingRecHits.h, where the current use of such a preprocessor symbol\ncauses a run time JIT compilation error in ROOT6. This is because this class contains a data member\nthat is a std::shared_ptr, but due to conditional compilation, the JIT compiler sees it as a bare pointer.\nThis leads to a JIT compilation error because, while std::shared_ptr::element is defined, \"element\"\nis not defined for a bare pointer. The fix is to use a preprocessor symbol, **GCCXML** that is defined only for ROOT 5, so that the JIT compilation sees the shared_ptr. For consistency. this change is made in two closely related packages.\n", "branch": "CMSSW_7_2_ROOT6_X", "changed_files": 8, "closed_at": "1404368987", "comments": 1, "commits": 1, "created_at": "1404359156", "deletions": 19, "labels": ["comparison-pending", "pending-signatures", "reconstruction-pending", "tests-pending"], "merge_commit_sha": "4630926ec26746985a2aba8afc12f74e468ef9bb", "merged_at": "1404368987", "merged_by": "ktf", "number": 4501, "release-notes": [], "review_comments": 0, "state": "closed", "title": "Don't hide C++11 constructs from ROOT 6", "updated_at": "1404395411", "user": "wmtan"}