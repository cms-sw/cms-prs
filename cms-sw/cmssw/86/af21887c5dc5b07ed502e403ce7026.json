{"additions": 2567, "auther_ref": "concurrentIndexIntoFile2", "auther_sha": "70bb9c40f3a5416950c06af3bc5c8c6a26693bb4", "author": "wddgit", "body": "#### PR description:\r\n\r\nModifies the class IndexIntoFile, so that it can handle concurrent runs and better handle concurrent lumis. This PR does not include the implementation of concurrent runs. That will be submitted in a separate PR in the future. There should not be any further changes needed in IndexIntoFile.h or IndexIntoFile.cc in that future PR.\r\n\r\nThis PR includes heavy edits to the code that supports the \"noRunLumiSort\" ordering in IndexIntoFile (mostly in the nested class IndexIntoFile::IndexIntoFileItrEntryOrder). That ordering is currently used in some contexts to support file merging with files that have been created with concurrent lumis. That ordering allows fast cloning even when concurrent lumis have scrambled the event order in the files at lumi boundaries. Before concurrent lumis, events from a luminosity block would all be written contiguously into the output file. With concurrent lumis, events from a following lumi can be written before all the events from the preceding lumi are written. This is because the time to process an event can vary. The same thing will also happen when concurrent runs are implemented at run boundaries.\r\n\r\nThis also modifies the code in IndexIntoFile used by output modules to build the new IndexIntoFile written into a new output file.\r\n\r\nThere are some minimal changes outside IndexIntoFile needed to deal with the changes in the IndexIntoFile interface and behavior.\r\n\r\nOne might or might not consider this to be a bug fix. The existing version of the code should be working properly in the contexts where it is currently used. No one has reported any problems and the problem should be obvious if it occurs. On the other hand, it is currently possible to create files where the events in a run are not contiguous by file merging. This is similar to what will also happen with concurrent runs. If one is reading with \"noRunLumiSort\" mode, then these noncontiguous events from different runs can cause an assert failure in the Framework. We might consider backporting this change to  12_2_X and 12_3_X. Before those release series, \"noRunLumiSort\" mode did not exist and there was not a problem. One might hesitate to backport this PR because it touches a significant number of lines of critical code. The potential for a new bug is a risk. My inclination would be to not backport it unless problems actually occur, although I will backport it if asked. I am not aware of any conflicts between this PR and those earlier releases.\r\n\r\n#### PR validation:\r\n\r\nNew unit tests are added in FWCore/Integration/test and DataFormats/Provenance/test to cover these changes.\r\n", "branch": "master", "changed_files": 20, "closed_at": "1651732401", "comments": 38, "commits": 12, "created_at": "1649695935", "deletions": 244, "labels": ["core-approved", "fully-signed", "tests-approved", "orp-approved", "code-checks-approved"], "merge_commit_sha": "53a15fbc8b8f44f754de1b0a433ab67cb7535f8a", "merged_at": "1651732401", "merged_by": "cmsbuild", "milestone": "CMSSW_12_4_X", "number": 37532, "release-notes": [], "review_comments": 70, "state": "closed", "title": "Improve IndexIntoFile for concurrent lumis/runs", "updated_at": "1651732426", "user": "wddgit"}