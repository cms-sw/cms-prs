{"additions": 212, "auther_ref": "selectorFillDescriptions", "auther_sha": "4a59669ca7b9e5e281c9147ff570286f664a9fa0", "author": "makortel", "body": "Spurred by #21241  this PR presents a prototype of an fillDescriptions implementation for generic selectors (currently only for the part required to get `EventSelectorAdapter::fillDescriptions()` compile).\r\n\r\nSummary of the design\r\n* Add `ConfigurationDescriptions::addWithDefaultLabel()` with whcih the module label is derived from the plugin name\r\n  * ~~Internally `@module_type` label is used to mark this special case~~\r\n* Each component of the generic selector infrastructure that reads a parameter from `edm::ParameterSet` should implement a corresponding ~~`fillDescriptions(edm::ParameterSetDescription&)`~~ `fillPSetDescription(edm::ParameterSetDescription&)` with some default value for the parameter\r\n* Composing components should propagate the ~~`fillDescriptions`~~ `fillPSetDescription` call to their components\r\n* The EDModules should implement `fillDescriptions(edm::ConfigurationDescriptions&)` and call the `fillPSetDescription(edm::ParameterSetDescription&)` of their components\r\n* The components should provide some default values for all parameters\r\n  * ~~For module label the use of `defaultModuleLabel<T>()` from `HLTrigger/HLTcore` can lead to ridiculously long module names (e.g. `eventSelectorAdapterObjectCountEventSelectorStdVectorRecoGsfElectronStdAllocatorRecoGsfElectronPtMinSelectorMinNumberSelectorHelperCollectionFilterStdVectorRecoGsfElectronStdAllocatorRecoGsfElectronPtMinSelectorMinNumberSelector`)~~\r\n   * ~~I guess getting a handle to the typedef names (`PtMinGsfElectronCountFilter` for above) would need macros~~\r\n     * ~~Not included here in order to avoid going through all selector plugin definition files in case the idea doesn't fly~~\r\n   * ~~For module label use `@module_type`~~ Insert to `ConfigurationDescriptions` with `addWithDefaultLabel()` so that ~~it~~ the label is derived automatically from the plugin name (which usually is a typedef)\r\n* There is a mechanism to provide plugin-specific parameter default values as well (~~only for some parameters or all~~) by specializing the `fillDescriptions` function (so one has to provide values for all parameters if one want's customize even one of them)\r\n```cpp\r\ntemplate <>\r\nvoid TrackSelectorCountFilter::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {\r\n  edm::ParameterSetDescription desc;\r\n  desc.add<edm::InputTag>(\"src\", edm::InputTag(\"tracks\"));\r\n  desc.add<std::string>(\"cut\", std::string(\"cut\"));\r\n  desc.add<unsigned int>(\"minNumber\", 1);\r\n  descriptions.add(\"trackSelectorCountFilter\", desc);\r\n}\r\n```\r\n\r\n\r\nI've tested in 10_0_0_pre1 that the PR compiles and ~~wf 10024.0~~ limited matrix runs. No changes are expected in monitored quantities.", "branch": "master", "changed_files": 30, "closed_at": "1512734929", "comments": 97, "commits": 12, "created_at": "1511353652", "deletions": 43, "labels": ["analysis-pending", "code-checks-approved", "comparison-available", "core-approved", "orp-approved", "pdmv-pending", "pending-signatures", "reconstruction-approved", "simulation-approved", "tests-approved"], "merge_commit_sha": "1eed5e22765a9e393319b74fb23422803de24532", "merged_at": "1512734929", "merged_by": "cmsbuild", "milestone": "CMSSW_10_0_X", "number": 21430, "release-notes": [], "review_comments": 10, "state": "closed", "title": "Add addWithDefaultLabel() to ConfigurationDescriptions to allow automatically deriving the module label from the plugin name, and make first step for fillDescriptions in generic selectors", "updated_at": "1512734929", "user": "makortel"}