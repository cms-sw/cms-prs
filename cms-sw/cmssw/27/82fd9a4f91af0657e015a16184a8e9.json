{"additions": 124, "auther_ref": "PhotonMVANtuplizer_10_4_X", "auther_sha": "219957e14f149af211b6e5b95dc2705ea1ee2805", "author": "guitargeek", "body": "Hi,\r\n\r\nmaybe you give me a free pass updating the PhotonMVANtuplizer in CMSSW, even if it is not used in production? The equivalent ElectronMVANtuplizer was well received and is now used by quite a few people for little studies. It's a quick and safe way to get a flat electron ntuple with the exact same ID variables and signal/background definition as in the MVAs used in production.\r\n\r\nFor the photons, I did not dare implementing the same functionality since I'm not so familiar with them. The PhotonMVANtuplizer was so far only able to dump final ID scores to validate them. However, I got many requests to implement the matching and dumping of ID variables also in the PhotonMVANtuplizer, and teamed up with @kmondal to implement the same \"gen\" matching as in the flashgg framework.\r\n\r\nGetting this into release would keep me from maintaining one more private branch which people have to merge.\r\n\r\nThis might be interesting for @fcouderc and @mhuwiler, and of course @michelif and @swagata87 should somehow approve this first.\r\n\r\nHere a little histogram with the pT of the different reco photon populations, as a first quick validation.\r\n\r\n![photon_ntuple](https://user-images.githubusercontent.com/6578603/48424068-221df500-e762-11e8-8fc4-3f16dc22595e.png)\r\n", "branch": "master", "changed_files": 2, "comments": 9, "commits": 3, "created_at": "1542119780", "deletions": 75, "labels": ["code-checks-pending", "comparison-pending", "orp-pending", "pending-signatures", "reconstruction-pending", "tests-pending"], "milestone": "CMSSW_10_4_X", "number": 25218, "release-notes": [], "review_comments": 1, "state": "open", "title": "Egamma PhotonMVANtuplizer.cc completion", "updated_at": "1542912289", "user": "guitargeek"}