{"additions": 1, "auther_ref": "SonicCoreFix", "auther_sha": "c6ddef391e925c859b5d80534597caf44d1a3a07", "author": "kpedro88", "body": "#### PR description:\r\n\r\nThe SonicTriton unit test had a segmentation violation in the `CMSSW_11_3_X_2021-02-15-2300` IB. The resulting trace included:\r\n```\r\nThread 1 (Thread 0x2ad4959a1c80 (LWP 4250)):\r\n#0  0x00002ad493d98c3d in poll () from /lib64/libc.so.6\r\n#1  0x00002ad4996dc407 in full_read.constprop () from /cvmfs/cms-ib.cern.ch/nweek-02668/slc7_amd64_gcc900/cms/cmssw/CMSSW_11_3_X_2021-02-14-0000/lib/slc7_amd64_gcc900/pluginFWCoreServicesPlugins.so\r\n#2  0x00002ad4996dcb1c in edm::service::InitRootHandlers::stacktraceFromThread() () from /cvmfs/cms-ib.cern.ch/nweek-02668/slc7_amd64_gcc900/cms/cmssw/CMSSW_11_3_X_2021-02-14-0000/lib/slc7_amd64_gcc900/pluginFWCoreServicesPlugins.so\r\n#3  0x00002ad4996dd954 in sig_dostack_then_abort () from /cvmfs/cms-ib.cern.ch/nweek-02668/slc7_amd64_gcc900/cms/cmssw/CMSSW_11_3_X_2021-02-14-0000/lib/slc7_amd64_gcc900/pluginFWCoreServicesPlugins.so\r\n#4  <signal handler called>\r\n#5  0x00002ad499f34044 in SonicClientBase::dispatch() () from /cvmfs/cms-ib.cern.ch/nweek-02668/slc7_amd64_gcc900/cms/cmssw/CMSSW_11_3_X_2021-02-14-0000/lib/slc7_amd64_gcc900/libHeterogeneousCoreSonicTriton.so\r\n#6  0x00002ad4b28e22d0 in virtual thunk to SonicOneEDAnalyzer<TritonClient>::analyze(edm::Event const&, edm::EventSetup const&) () from /cvmfs/cms-ib.cern.ch/nweek-02668/slc7_amd64_gcc900/cms/cmssw/CMSSW_11_3_X_2021-02-14-0000/lib/slc7_amd64_gcc900/plugintestHeterogenousCoreSonicTriton.so\r\n#7  0x00002ad491581857 in edm::one::EDAnalyzerBase::doEvent(edm::EventTransitionInfo const&, edm::ActivityRegistry*, edm::ModuleCallingContext const*) () from /cvmfs/cms-ib.cern.ch/nweek-02668/slc7_amd64_gcc900/cms/cmssw/CMSSW_11_3_X_2021-02-14-0000/lib/slc7_amd64_gcc900/libFWCoreFramework.so\r\n#8  0x00002ad4915683cd in edm::WorkerT<edm::one::EDAnalyzerBase>::implDo(edm::EventTransitionInfo const&, edm::ModuleCallingContext const*) () from /cvmfs/cms-ib.cern.ch/nweek-02668/slc7_amd64_gcc900/cms/cmssw/CMSSW_11_3_X_2021-02-14-0000/lib/slc7_amd64_gcc900/libFWCoreFramework.so\r\n```\r\n\r\nThis behavior should not occur. I tracked it down to https://github.com/cms-sw/cmssw/blob/2d254221bb90d80d7c28faac149f1820d3c11ea1/HeterogeneousCore/SonicCore/src/SonicClientBase.cc#L27, which does a comparison with an uninitialized member variable when called in the constructor. In the rare case that this uninitialized member variable has the same value as the comparison argument, the dispatcher will not be created. I confirmed this diagnosis with Valgrind, which, as expected, reported \"Conditional jump or move depends on uninitialised value(s)\" from that line.\r\n\r\n#### PR validation:\r\n\r\nConfirmed with Valgrind that the \"Conditional jump or move depends on uninitialised value(s)\" message goes away. The unit test runs successfully.", "branch": "master", "changed_files": 1, "closed_at": "1613547954", "comments": 7, "commits": 1, "created_at": "1613507269", "deletions": 1, "labels": ["code-checks-approved", "fully-signed", "heterogeneous-approved", "orp-approved", "tests-approved"], "merge_commit_sha": "456e547b6426d2b5024a1c4c9ebabc9d991c13e6", "merged_at": "1613547954", "merged_by": "cmsbuild", "milestone": "CMSSW_11_3_X", "number": 32933, "release-notes": [], "review_comments": 0, "state": "closed", "title": "fix potential crash in Sonic", "updated_at": "1613547955", "user": "kpedro88"}