{"additions": 3, "auther_ref": "gcc14-warn-atomic_ref", "auther_sha": "407634bae7f6326e5ded92d88df2ecdb8e33598e", "author": "smuzaffar", "body": "In GCC14 IBs, we have many warning like [a]. This PR proposes to use `std::atomic_ref`. As simple test like [b] show that it works. \r\n\r\nFYI @fwyzard @VinInn \r\n\r\n[a]\r\n```\r\nIn file included from src/HeterogeneousCore/CUDAUtilities/interface/HistoContainer.h:4,\r\n                 from src/HeterogeneousCore/CUDAUtilities/test/HistoContainer_t.cpp:7:\r\nsrc/HeterogeneousCore/CUDAUtilities/interface/OneToManyAssoc.h: In instantiation of 'static uint32_t cms::cuda::OneToManyAssoc<I, ONES, SIZE>::atomicIncrement(Counter&) [with I = unsigned int; int ONES = 129; int SIZE = -1; uint32_t = unsigned int; Counter = unsigned int]':\r\nsrc/HeterogeneousCore/CUDAUtilities/interface/HistoContainer.h:141:30:   required from 'void cms::cuda::HistoContainer<T, NBINS, SIZE, S, I, NHISTS>::count(T) [with T = short int; unsigned int NBINS = 128; int SIZE = -1; unsigned int S = 16; I = unsigned int; unsigned int NHISTS = 1]'\r\n  141 |         Base::atomicIncrement(this->off[b]);\r\n      |         ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~\r\nsrc/HeterogeneousCore/CUDAUtilities/test/HistoContainer_t.cpp:68:15:   required from 'void go() [with T = short int; int NBINS = 128; int S = 16; int DELTA = 1000]'\r\n   68 |       hr.count(v[j]);\r\n      |       ~~~~~~~~^~~~~~\r\nsrc/HeterogeneousCore/CUDAUtilities/test/HistoContainer_t.cpp:170:14:   required from here\r\n  170 |   go<int16_t>();\r\n      |   ~~~~~~~~~~~^~\r\n  [src/HeterogeneousCore/CUDAUtilities/interface/OneToManyAssoc.h:206](https://github.com/cms-sw/cmssw/blob/CMSSW_15_1_X_2025-02-25-2300/HeterogeneousCore/CUDAUtilities/interface/OneToManyAssoc.h#L206):19: warning: casting 'cms::cuda::OneToManyAssoc<unsigned int, 129, -1>::Counter' {aka 'unsigned int'} to 'std::atomic<unsigned int>&' does not use 'constexpr std::atomic<unsigned int>::atomic(__integral_type)' [-Wcast-user-defined]\r\n   206 |         auto &a = (std::atomic<Counter> &)(x);\r\n      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nsrc/HeterogeneousCore/CUDAUtilities/interface/OneToManyAssoc.h: In instantiation of 'static uint32_t cms::cuda::OneToManyAssoc<I, ONES, SIZE>::atomicIncrement(Counter&) [with I = unsigned int; int ONES = 129; int SIZE = 12000; uint32_t = unsigned int; Counter = unsigned int]':\r\nsrc/HeterogeneousCore/CUDAUtilities/interface/HistoContainer.h:141:30:   required from 'void cms::cuda::HistoContainer<T, NBINS, SIZE, S, I, NHISTS>::count(T) [with T = short int; unsigned int NBINS = 128; int SIZE = 12000; unsigned int S = 16; I = unsigned int; unsigned int NHISTS = 1]'\r\n  141 |         Base::atomicIncrement(this->off[b]);\r\n      |         ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~\r\nsrc/HeterogeneousCore/CUDAUtilities/test/HistoContainer_t.cpp:69:14:   required from 'void go() [with T = short int; int NBINS = 128; int S = 16; int DELTA = 1000]'\r\n   69 |       h.count(v[j]);\r\n      |       ~~~~~~~^~~~~~\r\nsrc/HeterogeneousCore/CUDAUtilities/test/HistoContainer_t.cpp:170:14:   required from here\r\n  170 |   go<int16_t>();\r\n      |   ~~~~~~~~~~~^~\r\n  [src/HeterogeneousCore/CUDAUtilities/interface/OneToManyAssoc.h:206](https://github.com/cms-sw/cmssw/blob/CMSSW_15_1_X_2025-02-25-2300/HeterogeneousCore/CUDAUtilities/interface/OneToManyAssoc.h#L206):19: warning: casting 'cms::cuda::OneToManyAssoc<unsigned int, 129, 12000>::Counter' {aka 'unsigned int'} to 'std::atomic<unsigned int>&' does not use 'constexpr std::atomic<unsigned int>::atomic(__integral_type)' [-Wcast-user-defined]\r\n   206 |         auto &a = (std::atomic<Counter> &)(x);\r\n      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n```\r\n\r\n[b]\r\n```\r\n> cat test.cpp\r\n#include <iostream>\r\n#include <atomic>\r\nunsigned int atomicDecrement(unsigned int &x) {\r\n  std::atomic_ref<unsigned int> temp{x};\r\n  return temp--;\r\n}\r\nint main()\r\n{\r\n  unsigned int i=5;\r\n  atomicDecrement(i);\r\n  std::cout <<\"i after:\"<<i<<std::endl;\r\n  return 0;\r\n}\r\n> test\r\ni after:4\r\n```", "branch": "master", "changed_files": 1, "comments": 8, "commits": 1, "created_at": "1740559140", "deletions": 3, "labels": ["fully-signed", "tests-started", "orp-approved", "code-checks-approved", "heterogeneous-approved"], "milestone": "CMSSW_15_1_X", "number": 47455, "release-notes": [], "review_comments": 0, "state": "open", "title": "fix gcc 14 warnings: use atomic_ref instead of casting", "updated_at": "1740565245", "user": "smuzaffar"}