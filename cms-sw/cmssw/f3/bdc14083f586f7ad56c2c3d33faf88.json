{"additions": 2528, "auther_ref": "ngt_phase2CAExtension", "auther_sha": "262716cdac2fd87d514c10a51b4bfbf458d72ca5", "author": "cms-ngt-hlt", "body": "#### PR description:\r\nThis PR was co-developed by: @AdrianoDee @JanGerritSchulz @mmusich @rovere \r\n\r\nThe Phase 2 CA Extension for `PixelTracks` enables the usage of recHits found in the first 3 layers of the Outer Tracker barrel in addition to the pixel recHits in the CA algorithm. As part of this work, the regular CA has also been updated and its parameters re-tuned for Phase 2. In particular, two more connections have been added in the very forward region bringing the total number of layer pairs to 57; a few more cuts have also been added and others have been re-tuned. The newly optimised, non-extended CA is proposed as the new default pixel tracking configuration, producing tracks with 4+ hits. \r\n\r\nThe CA extension provides a more radical improvement, bringing the total number of layer pairs to 71, taking advantage of 3 more layers in the barrel, while still producing tracks with 4+ hits. It is not enabled by default, but can be tested using in workflows `*.7511`, `*.771`, `*.774`, and `*.775`, which are also part of the IB matrix or by enabling the `phase2CAExtension` procModifier.\r\n\r\nFull talks with discussions on physics performance as well as the overall impact on general tracks have been recently given at the [HLT Upgrade](https://indico.cern.ch/event/1578363/#6-update-on-caextension-tracki) and [Tracking POG](https://indico.cern.ch/event/1580466/#75-update-on-caextension-track). These slides also contain links to a large set of plots and comparisons.\r\n\r\n# Main developments\r\n\r\nTo support the extension, two new plugins have been developed:\r\n- [`Phase2OTRecHitsSoAConverter`](https://github.com/cms-ngt-hlt/cmssw/blob/ngt_phase2CAExtension/RecoLocalTracker/Phase2TrackerRecHits/plugins/alpaka/Phase2OTRecHitsSoAConverter.cc) converts the `recHits` on the P modules of the Outer Tracker barrel detector into SoA format using the same layout and following the same ordering logic as what is already in use in the pixel\r\n- [`SiPixelRecHitExtendedAlpaka`](https://github.com/cms-ngt-hlt/cmssw/blob/ngt_phase2CAExtension/RecoLocalTracker/SiPixelRecHits/plugins/alpaka/SiPixelRecHitExtendedAlpaka.cc) merges the existing `trackingRecHitsSoACollection` for pixel hits with the newly converted one so that each column is extended with the hits from the OT, meaning that the CA interface with the input collection does not need to be changed\r\n\r\nOther modules have been modified to support the extension, including: \r\n- [`PixelTrackProducerFromSoAAlpaka`](https://github.com/cms-ngt-hlt/cmssw/blob/ngt_phase2CAExtension/RecoTracker/PixelTrackFitting/plugins/PixelTrackProducerFromSoAAlpaka.cc), responsible for converting the `PixelTracks` in SoA format to legacy. It can now be configured to include the OT recHits in the legacy tracks or discard them\r\n- A new `TrackerTraits`, `phase2OT`, has been introduce to be able to differentiate parameters, classes and functions, between regular and extended CA\r\n- When the CA extension is used together with the `trackingLST` procModifier, the OT `recHits` are removed from `PixelTracks` fed in input to `LST` as to avoid a large increase in duplicates\r\n- The `initialStep` high-purity selection is applied to extended `PixelTracks` to further reduce their fake rate. Note that this is a temporary solution until a proper DNN will be applied directly to the `PixelTracks` in SoA format in a follow-up PR. \r\n\r\nBoth the regular and extended CA have been optimised and new cuts have been introduced to improve fake rejection such as:\r\n- Cuts on `inner`/`outer` `max`/`min` `z` (`r`) for layer pairs in the barrel (endcap)\r\n- Layer pair depended pT cuts at the doublet building level\r\n- adaptive `chi2` cut based on the number of hits of the track\r\n\r\nThe meaning of the `ngtScouting` procModifier has been changed as follows:\r\n- when enabled, `ngtScouting`, promotes PixelTracks as general tracks directly without any other pattern recognition or fitting step\r\n    - enabling `ngtScouting,phase2CAExtension` uses `extended` PixelTracks as general tracks\r\n    - enabling `ngtScouting,phase2CAExtension,trackingLST` merges extended `PixelTracks` with `LST` `T5`s and uses the resulting collection as general tracks \r\n\r\nA few workflows have been added to test the extension and have been included in the IB matrix\r\n- `*.7511`: HLT phase-2 timing menu, with PixelTracks CA Extension\r\n- `*.774`: HLT phase-2 NGT Scouting menu Alpaka variant, with PixelTracks CA Extension as GeneralTracks\r\n- `*.775`: HLT phase-2 NGT Scouting menu Alpaka variant, with Pixeltracks CA Extension + LST T5s as GeneralTracks\r\n\r\n# Physics performance\r\n\r\n## Run 3\r\n\r\nSince we expect no changes in Run 3 performance, we verified that the Run 3 CA performs exactly the same using the following recipe:\r\n```bash \r\n#!/bin/bash -ex\r\n\r\ncmsDriver.py step2 -s HLT:@relval2025,VALIDATION:hltMultiTrackValidation \\\r\n    --conditions auto:phase1_2025_realistic \\\r\n    --datatier DQMIO \\\r\n    -n 1000 \\\r\n    --eventcontent DQMIO \\\r\n    --geometry DB:Extended \\\r\n    --era Run3_2025 \\\r\n    --filein file:/eos/cms/store/relval/CMSSW_15_1_0_pre5/RelValTTbar_14TeV/GEN-SIM-DIGI-RAW/PU_151X_mcRun3_2025_realistic_v4_STD_2025_PU-v2/2590000/0ecc755f-c744-48bb-8c46-abddb997dc46.root \\\r\n    --fileout file:step2.root \\\r\n    --nThreads 32 \\\r\n    --process HLTX \\\r\n    --inputCommands='keep *, drop *_hlt*_*_HLT, drop triggerTriggerFilterObjectWithRefs_l1t*_*_HLT' \\\r\n    >step2.log 2>&1\r\n\r\ncmsDriver.py step3 -s HARVESTING:postProcessorHLTtrackingSequence \\\r\n    --conditions auto:phase1_2025_realistic \\\r\n    --mc \\\r\n    --geometry DB:Extended \\\r\n    --scenario pp \\\r\n    --filetype DQM \\\r\n    --era Run3_2025 \\\r\n    -n 1000 \\\r\n    --filein file:step2.root \\\r\n    --fileout file:step3.root >step3.log 2>&1\r\n```\r\nand comparing the [DQM outputs](https://lferragi.web.cern.ch/plots/tracking_phase2/CAExtPR/run3/).\r\n\r\n<img width=\"49%\" alt=\"run3 effic pixel\" src=\"https://github.com/user-attachments/assets/a0fe67df-ea4c-472b-afb8-c60b0695d484\" />\r\n<img width=\"49%\" alt=\"run3 fake pixel\" src=\"https://github.com/user-attachments/assets/d6c371ba-b327-4ddc-8df5-676567983004\" />\r\n \r\n## Phase 2 \r\n\r\nPerformance measured on a TTbar D110 PU Run4 RelVal sample (EDM input):\r\n```bash\r\n/RelValTTbar_14TeV/CMSSW_15_1_0_pre4-PU_150X_mcRun4_realistic_v1_STD_Run4D110_PU-v1/GEN-SIM-DIGI-RAW \r\n```\r\n\r\nA detailed report on physics performance can be found in the talks linked above, here a few results are reported for completeness. Firstly, a comparison between legacy PixelTracks, new alpaka-based default, and extended CA ([all plots](https://lferragi.web.cern.ch/plots/tracking_phase2/CAExtPR/pixelComparison/)\r\n\r\n<img width=\"49%\" alt=\"phase2 effic pixel\" src=\"https://github.com/user-attachments/assets/a4158e3c-e54b-41b7-ad8b-5d0236d9e33e\" />\r\n<img width=\"49%\" alt=\"phase2 fake pixel\" src=\"https://github.com/user-attachments/assets/f614e75f-d880-4038-b29f-b5aa15227686\" />\r\n\r\nThe impact on general tracks is more nuanced, here we only show a few configurations which were highlighted during the talks linked above and in the following discussions ([all plots]()). Note, that the first 3 configurations run 2 tracking iterations (`initialStep` + `highPtTriplets`), while the last configuration `singleIterCAExtensionLST` runs a single tracking iteration where `LST` is seeded by extended `PixelTracks` only. \r\n\r\n<img width=\"49%\" alt=\"phase2 effic general\" src=\"https://github.com/user-attachments/assets/a66cab79-8dde-4cd8-870e-c372418c1d7b\" />\r\n<img width=\"49%\" alt=\"phase2 fake general\" src=\"https://github.com/user-attachments/assets/672d0dda-df1d-41f5-ae02-e994aa0bf10b\" />\r\n\r\n# Timing \r\nMeasurements run on 2x AMD EPYC 9534 with 4x L40 GPUs. Configuration: 16 jobs with 16 threads/16 streams each, sample of 1000 TTbar 200PU events.\r\n\r\nWe have tested about 20 different configurations: the most interesting comparisons can be found in the talks linked above while all the results are [here](https://lferragi.web.cern.ch/plots/tracking_phase2/CAExtPR/timing/piechart.php?colours=default&data_name=data&groups=hlt&show_labels=true&show_animations=true&threshold=0). We only show a comparison between legacy, the proposed new default and the promising `singleIterCAExtLST` configuration for the records\r\n\r\n[Legacy](https://lferragi.web.cern.ch/plots/tracking_phase2/CAExtPR/timing/piechart.php?colours=default&data_name=data&dataset=CAExtensionConfigs_legacy_16j_16t_16s&groups=hlt&local=false&resource=time_real&show_labels=true&show_animations=true&threshold=0) | [New Default](https://lferragi.web.cern.ch/plots/tracking_phase2/CAExtPR/timing/piechart.php?colours=default&data_name=data&dataset=CAExtensionConfigs_alpaka_16j_16t_16s&groups=hlt&local=false&resource=time_real&show_labels=true&show_animations=true&threshold=0) | [`singleIterCAExtLST`](https://lferragi.web.cern.ch/plots/tracking_phase2/CAExtPR/timing/piechart.php?colours=default&data_name=data&dataset=CAExtensionConfigs_AlpakaSingleIterCAExtLST_16j_16t_16s&groups=hlt&local=false&resource=time_real&show_labels=true&show_animations=true&threshold=0)\r\n:-------------------------:|:-------------------------:|:-------------------------:\r\n<img width=\"1021\" height=\"949\" alt=\"piechart(4)\" src=\"https://github.com/user-attachments/assets/c060a05c-f5c5-40bc-a357-004ad999df84\" /> | <img width=\"1021\" height=\"949\" alt=\"piechart(5)\" src=\"https://github.com/user-attachments/assets/17b6c779-93df-47ae-b630-d653d6c64bf9\" /> | <img width=\"1021\" height=\"949\" alt=\"piechart(6)\" src=\"https://github.com/user-attachments/assets/bb501b58-5f8f-450a-8f0d-c0fde707248d\" />\r\n\r\n# Memory usage\r\n\r\nGPU memory usage have been measured while running the timing measurements using the output from `nvidia-smi`, thus the setup is exactly the same.\r\n\r\n<img width=\"790\" height=\"590\" alt=\"image\" src=\"https://github.com/user-attachments/assets/1db6e1bc-ce9b-4b0e-b165-a7ad1e65e3ba\" />\r\n\r\nThe non-extend optimised CA proposed as the new baseline shows a memory consumption comparable with what was already in release after #47611. The extension, including more layer pair connections and doubling the maximum number of doublets and tracks produced shows a more noticeable memory increase of about 34%\r\n\r\n#### PR validation:\r\n\r\nThis PR has been tested locally running both `addOnTests.py` and `runTheMatrix.py -l limited -i all --ibeos`, both commands resulting in all tests passing. The newly introduced workflows have been tested with:\r\n```\r\nrunTheMatrix.py -w upgrade -l 29634.7511,29634.774,29634.775\r\n```\r\n\r\n\r\n#### Update 25/09 \r\nWe have updated the track selection settings for the default Pixel Tracking in Phase-2 (with Patatrack, without extension) by changing the $\\chi^2$ / ndof requirement (depends on number of hits per track). It was previously set identical to the extended Pixel Tracking, which led to efficiency losses in the barrel due to shorter tracks. The change in efficiency for the new default before and after the commit is shown below. More validation plots can be found [here](https://jaschulz.web.cern.ch/Plots/NGT/PixelSeedingPhase2HLT/IndividualStudies/PatatrackOpt_vary_chi2_skipQuads/PR-Default-PixelTracking-Performance/?search=eff).\r\n\r\n<img width=\"3160\" height=\"2676\" alt=\"image\" src=\"https://github.com/user-attachments/assets/acb11402-cad6-4326-b22a-04fb41d27f92\" />\r\n\r\nThe small efficiency losses at $|\\eta|$ > 4 are due to an added requirement for quadruplets to not skip layers. This part of the track selection is planned to be replaced soon by a DNN to improve the track selection further.", "branch": "master", "changed_files": 64, "closed_at": "1761760456", "comments": 145, "commits": 40, "created_at": "1757695547", "deletions": 594, "labels": ["dqm-approved", "geometry-approved", "hlt-approved", "operations-approved", "reconstruction-approved", "fully-signed", "tests-approved", "pdmv-approved", "orp-approved", "upgrade-approved", "code-checks-approved", "heterogeneous-approved", "tracking-pog-approved", "tracking", "trk", "ngt", "allow-Parsifal-2045"], "merge_commit_sha": "ceaac4609bfdbd93258b8ce2621b429952f7d0f4", "merged_at": "1761760456", "merged_by": "cmsbuild", "milestone": "CMSSW_16_0_X", "number": 48921, "release-notes": [], "review_comments": 103, "state": "closed", "title": "[NGT] Extension of CA Pixel Tracking to Phase 2 Outer Tracker barrel", "updated_at": "1761760457", "user": "Parsifal-2045"}