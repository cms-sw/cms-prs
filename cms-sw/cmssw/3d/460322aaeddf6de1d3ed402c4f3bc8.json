{"additions": 926, "auther_ref": "CleanupRPCDQM_1200", "auther_sha": "5c436a7f808935cb8bd82bdd9e934fa732390d2b", "author": "jhgoh", "body": "#### PR description:\r\nThis PR updates current RPC DQM codes to have better code structure and modernize C++ syntax.\r\nWe'd like to have some advantage for the possible new developments.\r\nThe amount of code change in this PR is big, but they are technical ones - we don't expect any change in the output.\r\n\r\n**1. Better helper class design for the chamber naming, histogram decoration.**\r\nThere is a class 'RPCGeomServ' which is widely used to map RPCDetId to the RPC nomenclature such as RB#in/out_W#_S##_B/F/M etc. This class stores flags as private member variables during some function calls, therefore developers could not declare it as const object.\r\nThere is another object rpcdqm::utils mainly used to set the axis labels. (and the name of the class is too generic).\r\n\r\nWe add a lightweight interface, RPCNameHelper, RPCSummaryMapHisto and RPCRollMapHisto, hopefully replace RPCGeomServ and rpcdqm::utils.\r\nFor the smooth and transparent migration (+ there are some items still to go), existing classes are kept for now.\r\n\r\n**2. Migration to fmt::format()**\r\nstd::stringstream have been massively used in the RPC DQM modules. \r\nExisting code works without any problem, but fmt::format gives better readability (and known to have a better performance).\r\n\r\n**3. Separating library and plugins**\r\nSome classes are used across the DQM/RPCMonitorDigi and DQM/RPCMonitorClient plugin modules.\r\nIn addition, RPC DPG analyzers uses features in the rpcdqm::utils (which hopefully to be replaced by RPCRollMapHisto class) in their modules. \r\nThese common features are factored out and moved to the DQM/RPCMonitorClient/src. The plugin modules are moved to the plugins directory. \r\n\r\n**4. Code cleanup**\r\nCleaned up unnecessary includes, simplify for-loops, etc.\r\n\r\n**5. Fix potential memory allocation problem in the RPCDqmClient module**\r\nThis module registers 'client modules' by appending pointer to the dynamically allocated objects but it is not deleted anywhere. We use smart pointers to be properly cleaned up at the termination.\r\n\r\nWe haven't observe any serious memory leak before this fix, because the new allocations happens only for the initialization step.\r\n\r\n#### PR validation:\r\n\r\nTested runTheMatrix.py command and passes the tests.\r\n\r\n\r\nRelated presentation in 2020 Oct: [slide](https://indico.cern.ch/event/969469/contributions/4080244/attachments/2132962/3592107/[2020.10.29]%20RPC%20DQM%20development%20-%20RPC%20weekly%20meeting.pdf#page=5)\r\n  - There are other items such as plot removal or unused modules, they will be followed after this PR for the technical updates.\r\n  - The code in this PR is not identical to the one shown in the presentation slide.\r\n\r\nRelated issue #33761 : please consider this PR as the first step to cleanup of unused modules, although any modules are not removed (yet).\r\n\r\n@mileva @andresib ", "branch": "master", "changed_files": 60, "closed_at": "1622413624", "comments": 21, "commits": 10, "created_at": "1622047508", "deletions": 1337, "labels": ["code-checks-approved", "dqm-approved", "fully-signed", "orp-approved", "tests-approved"], "merge_commit_sha": "75b3627bd7b176732ae1dbebd24525c3d2f29af0", "merged_at": "1622413623", "merged_by": "cmsbuild", "milestone": "CMSSW_12_0_X", "number": 33854, "release-notes": [], "review_comments": 0, "state": "closed", "title": "Code-cleanup of RPC-DQM", "updated_at": "1622413624", "user": "jhgoh"}