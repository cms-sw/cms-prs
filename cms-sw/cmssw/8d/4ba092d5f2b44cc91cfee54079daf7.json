{"additions": 56, "auther_ref": "SpeedupPuppi1020pre3", "auther_sha": "3bcead5dbc4a64c4cb3e7a6a9c41b602803d8aa0", "author": "kpedro88", "body": "I noticed that `fastjet::PseudoJet` caches the rapidity value, but not the pseudorapidity value. The pseudorapidity calculation is rather heavy to repeat each time, so I have extended the class to cache that value as well. I also made a few minor improvements (avoid recalculating R^2 within a loop, avoid need for `dynamic_cast` to get user info).\r\n\r\nThe algorithm becomes about 25% faster when tested on the 2017 miniAODv2 GJets_HT-200To400_TuneCP5_13TeV-madgraphMLM-pythia8 sample.\r\n\r\nThe remaining use of CPU time is primarily from `fastjet::PseudoJet::squared_distance()`. This calculation may be repeated 2-4 times per candidate (nested loop, multiple algorithms invoked). However, I tried several schemes for caching it and did not get a speedup. It seems that the calculation is simple enough that it's better just to perform it each time.", "branch": "master", "changed_files": 7, "comments": 5, "commits": 3, "created_at": "1526906485", "deletions": 70, "labels": ["analysis-pending", "code-checks-approved", "comparison-pending", "orp-pending", "pending-signatures", "reconstruction-pending", "tests-started"], "milestone": "CMSSW_10_2_X", "number": 23270, "release-notes": [], "review_comments": 0, "state": "open", "title": "Speedup puppi", "updated_at": "1526906752", "user": "kpedro88"}