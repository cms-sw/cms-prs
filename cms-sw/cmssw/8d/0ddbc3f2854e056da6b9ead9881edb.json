{"additions": 4, "auther_ref": "aFewSmallFixesForL1T", "auther_sha": "7834b7faba8c8c9f94b7b4ecdadb78f29bd0ab43", "author": "perrotta", "body": "#### PR description:\r\n\r\nLooking at the Static Analyzer reports, a few possible inaccuracies, or even bugs, jumped to my eyes.\r\nInstead of making a github issue, I chose to implement here the possible fixes, which should be carefully inspected by the L1T software experts: perhaps the fix is correct, perhaps the bug is there but the \"most obvious\" fix is not the correct one.\r\n\r\nNamely, the adjustment proposed on which I am requesting feedback are the following:\r\n\r\n- In [BMTFPackerInputs.cc](https://github.com/cms-sw/cmssw/compare/master...perrotta:aFewSmallFixesForL1T?expand=1#diff-af8c55fc4359daa3c3dffec6b7c74487fd773f4f5cf0d2887864c370a9448156) the variable `moreBXphi` is defined inside the loop body, and therefore it does not make sense to update it at the end of the loop. The obvious fix is to remove the update, but a possible alternative could be that the intention was to define that variable outside the loop, as it is the case for `moreBXeta`.\r\n- In [Stage1Layer2EtSumAlgorithmImpPP.cc](https://github.com/cms-sw/cmssw/compare/master...perrotta:aFewSmallFixesForL1T?expand=1#diff-d9fac429cdc0d49f8340cdfe08c1eda5e42beba4e88145dc1b7d0242909874b1) the first definition of `iPhiHT` was never used, and the obvious fix is to simply remove it; unless there was some other need that was foreseen for it and that remained forgotten in the code\r\n- In [Stage2Layer2JetAlgorithmFirmwareImp1.cc](https://github.com/cms-sw/cmssw/compare/master...perrotta:aFewSmallFixesForL1T?expand=1#diff-1ac8e3e3e21a7e7dc8505bb4c66c6f43787db5d0f3f13918dd34d7dcaa0d5184) the double initialization is quite obvious, and I don't even propose alternatives\r\n- The one in [Stage2Layer2TauAlgorithmFirmwareImp1.cc](https://github.com/cms-sw/cmssw/compare/master...perrotta:aFewSmallFixesForL1T?expand=1#diff-521c704a5bde7b6fa632aec13f910ba9e8fd8c7beeb40129d935ddcc420284e0) is instead more tricky. The different if-steered options in that section of the code were all intended to define `secMaxS`, but I found two places were `secMaxN` (supposedly already defined in the previous lines) was overwritten instead. I had the impression that this was a mistake, and that's why I am proposing a possible fix here: but this is only based on an assumption of mine, and I was not able to investigate deep in the code to verify it.\r\n\r\nWhile the first three updates listed above fully reproduce the previous behaviour of the code, only simplifying it, the last one does apply some change: I would therefore ask for a particular attention to it.\r\n\r\nOf course, you can take this PR as a possible suggestion for a more complete fix and update to the code: I will close it, in that case, once all the issues listed here have been addressed.\r\n`\r\n#### PR validation:\r\n\r\nIt builds successfully", "branch": "master", "changed_files": 4, "comments": 6, "commits": 1, "created_at": "1645027801", "deletions": 9, "labels": ["l1-pending", "pending-signatures", "tests-approved", "orp-pending", "code-checks-approved"], "milestone": "CMSSW_12_3_X", "number": 36985, "release-notes": [], "review_comments": 0, "state": "open", "title": "A few possible bug fixes in the L1T code", "updated_at": "1645620749", "user": "perrotta"}