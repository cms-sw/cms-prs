{"additions": 8, "auther_ref": "from-CMSSW_12_3_0_pre1-GhostTrackVertex", "auther_sha": "fd748b1daa8d20c5468e7749dc314773aa7e085e", "author": "slava77", "body": "while debugging in some corner of phase space I noticed that a relatively benign case of averaging of two identical points in `GhostTrackVertexFinder::vtxMean` can lead to a NaN in the results.\r\nThe NaN eventually propagates downstream and leads to \r\nan exception thrown in `PerigeeConversions::ftsToPerigeeParameters` (`cms::Exception(\"PerigeeConversions\", \"Track with pt=0\")`). Apparently, given no checks for finiteness,  a perp computed on a 3D vector of NaN values looks like a zero.\r\n\r\nI'm proposing a simple fix to return one of the identical points.\r\n\r\nI'm adding a warning only because this condition was previously leading to a crash and also that this specific exception if pretty rare (a search in my emails only a few in the past 8 years; which is not necessarily an indication it's so super-rare).\r\nAlso, I'm not familiar enough with `GhostTrackVertexFinder` to conclude that an averaging with self is an indication of a logic error and that a fix upstream is needed. So, the warning message can be used to better understand the origins, if it appears to happen more often in some cases.\r\n", "branch": "master", "changed_files": 2, "comments": 3, "commits": 3, "created_at": "1646058527", "deletions": 0, "labels": ["reconstruction-pending", "pending-signatures", "tests-pending", "orp-pending", "code-checks-approved"], "milestone": "CMSSW_12_3_X", "number": 37088, "release-notes": [], "review_comments": 0, "state": "open", "title": "properly treat averaging with self in GhostTrackVertexFinder::vtxMean", "updated_at": "1646059719", "user": "slava77"}