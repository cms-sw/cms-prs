{"additions": 24, "auther_ref": "messagLoggerContext2", "auther_sha": "93d0b72e2df6eefeb58b98a8ce802b2643118aee", "author": "wddgit", "body": "#### PR description:\r\n\r\nRemove assertions recently added in pull request #34506 that caused problems documented in issue #34520. Even if the asserts uncovered a real problem, using the MessageLogger context system to test for this is probably not the best design. It was not my original intent. I thought it was just paranoid protection against something that couldn't happen.\r\n\r\nInstead of asserting, the MessageLogger context will go into an \"unknown state\". The context line will print \"unknown context\" in the spot where the context normally goes.\r\n\r\nThis only affects the context printed in a MessageLogger message. It only affects it in the unusual case where one module ends, there was a previous module running/waiting when it started, the context for the previous module is not in one of the normally expected states.\r\n\r\nThis is a limited fix intended to address only the recent assert failure referenced above. Practically speaking, this is probably good enough, but as I implemented this I noticed there are issues in this part of the code which I did not try to fix. We might want to follow this up with more improvements.\r\n\r\nMessageLogger is using thread locals and the ActivityRegistry to keep track of which module is currently running. Concurrent tasks and waits inside of module level transition functions could be problematic for this design. It worked perfectly before concurrency. We've discussed similar issues before. I think Chris has brought this up more than once.\r\n\r\nWe do not and have not ever set the context for the module transitions writeLumi, writeRun, and writeProcessBlock. I have not added support for that here. The specific case where the assert failed was related to writeLumi. This is something we could fix in the future although I've never noticed MessageLogger messages being printed in those contexts...\r\n\r\nThe other two possible GlobalContext states that might have caused those asserts to fail are kBeginJob and kEndJob. Those are handled in a different way which also could be problematic if those methods ever have sub transition function concurrency/waits in the future.\r\n\r\n#### PR validation:\r\n\r\nRelies on existing unit tests. This change only affects the response to behavior that should really not be happening.\r\n", "branch": "master", "changed_files": 1, "closed_at": "1626866151", "comments": 10, "commits": 1, "created_at": "1626725038", "deletions": 8, "labels": ["code-checks-approved", "core-approved", "fully-signed", "orp-approved", "tests-approved"], "merge_commit_sha": "0ad6a56faa01efa024a83b91289f38ccd6c0be1b", "merged_at": "1626866151", "merged_by": "cmsbuild", "milestone": "CMSSW_12_0_X", "number": 34557, "release-notes": [], "review_comments": 0, "state": "closed", "title": "Improve MessageLogger context handling", "updated_at": "1626866151", "user": "wddgit"}