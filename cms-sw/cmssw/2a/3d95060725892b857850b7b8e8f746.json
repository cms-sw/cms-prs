{"additions": 4074, "auther_ref": "concurrentIOVs29April2019", "auther_sha": "534f6d5c96eea7365046bf6006734ee3dab952f0", "author": "wddgit", "body": "#### PR description:\r\n\r\nPlease do not merge this PR. This is not intended for 10_6_X. It is intended for 11_0_X. In addition, I intend to rebase this on top of the PR adds the scram code-format changes to the Framework before it gets merged into the master branch.\r\n\r\nI am submitting this PR now to allow for review and comments so I can start work on any requested changes or questions. I'm hoping to get this merged as soon as possible after 11_0_X is open.\r\n\r\nThis implements core support for concurrent IOVs. More work needs to be done before CMSSW is actually running concurrent IOVs. Outside of core tests, there are not any ESSources or ESProducers that have been modified to actually support this kind of concurrency. Further work will be needed to convert ESSources and ESProducers outside the core. The core will continue to support and properly run existing ESSources and ESProducers, but the IOVs will not be processed concurrently.\r\n\r\nThe only changes outside the core are to CondDBESSource, FWLiteESSource, and FWLiteESRecordWriterAnalyzer. These changes are the minimal changes necessary to work with the revised core code. They do not migrate these modules to support concurrent IOVs.\r\n\r\nThere are two independent ways to control the number of concurrent IOVs:\r\n\r\nFirst one can set the number of IOVs allowed to be processed at the same time for each EventSetupRecord as follows. In the configuration:\r\n\r\n```\r\nprocess.options = cms.untracked.PSet(\r\n    numberOfConcurrentIOVs = cms.untracked.uint32(4),\r\n    forceNumberOfConcurrentIOVs = cms.untracked.PSet(\r\n        ESTestRecordA = cms.untracked.uint32(4)\r\n    )\r\n)\r\n```\r\n\r\nIn the C++ definition of an EventSetupRecord type:\r\n\r\n```\r\n  static constexpr bool allowConcurrentIOVs_ = false;\r\n```\r\n\r\nnumberOfConcurrentIOVs sets the number of IOVs for all types of EventSetupRecord (defaults to 1). The boolean defined in the C++ class overrides this for a specific EventSetupRecord type (by default this is defined true in the base class). The value in forceNumberOfConcurrentIOVs overrides both numberOfConcurrentIOVs and the value in the C++ class for specified EventSetupRecord types (by default this parameter set is empty).\r\n\r\nThe second way of controlling this relates to ESSources. Existing ESSources often rely on the time ordering of calls to setIntervalFor and the associated functions that produce data for that interval. In the past the produce function always referred to the immediately preceding setIntervalFor function call. But with concurrent IOVs, this can no longer be true. Existing ESSources will be treated as legacy ESSources. As ESSources are modified to support concurrent IOVs, the following function should be added to ESSource C++ class definition:\r\n\r\n```\r\n    bool isLegacyESSource() const override { return false; }\r\n```\r\n\r\nFor legacy ESSources and when an IOV for that ESSource changes, then the Framework will wait until that IOV completes before moving forward to the next one. It would be nice someday to convert all ESSources and remove this function and this synchronization point entirely someday.\r\n\r\nIn many but not all cases, existing ESProducers will work in concurrent IOV mode without modification. Most ESSources are going to require work to migrate.\r\n\r\nNote that the two mechanisms described above are independent of each other.\r\n\r\nIf numberOfConcurrentIOVs is set to greater than one and nothing else is done, things might fail horribly.  It will take a record by record review of the associated/dependent ESSource and ESProducer code to determine what will and will not function properly with more than one concurrent IOV.\r\n\r\nThe new EventSetupRecordIOVQueue class is at the heart of all this. It is probably the most important part of the new code in this PR.\r\n\r\n#### PR validation:\r\n\r\nThis should not effect the results of existing tests. Without modifying things as described above, IOVs will not be running concurrently and everything should be the same. Even when IOVs are running concurrently, this should not modify behavior or results other than performance improvements caused by increasing concurrency at IOV boundaries.\r\n", "branch": "master", "changed_files": 86, "closed_at": "1556732556", "comments": 8, "commits": 1, "created_at": "1556727622", "deletions": 2162, "labels": ["alca-pending", "analysis-pending", "code-checks-approved", "comparison-notrun", "core-pending", "db-pending", "orp-pending", "pending-signatures", "tests-rejected"], "milestone": "CMSSW_10_6_X", "number": 26589, "release-notes": [], "review_comments": 0, "state": "closed", "title": "Do not merge, Implement core support for concurrent IOVs", "updated_at": "1556741438", "user": "wddgit"}