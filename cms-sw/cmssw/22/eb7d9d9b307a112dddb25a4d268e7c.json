{"additions": 528, "auther_ref": "lastRunOrLumiToBeMerged", "auther_sha": "7b27eaec55b6f857727ff4ec85c1867d0aeb5abe", "author": "wddgit", "body": "\r\n#### PR description:\r\n\r\nAllow an InputSource to declare that a run entry or a lumi entry is the last one that needs to be merged. The next run entry should have a different run number or ProcessHistoryID. Or the next lumi entry should be associated with a different run or have a different luminosity block number. Or the next run or lumi entry could be in a different file.\r\n\r\nIt is OK for InputSources not to make this declaration. The Framework can and already does figure this out by examining the next entry returned by getNextItemType. Existing sources should work OK.\r\n\r\nThis might be a useful optimization in an online source when the getNextItemType function takes a long time to return. If the last item is declared, then the global run transition or the global lumi transition can begin immediately. Otherwise, the Framework has to wait for getNextItemType to return for the next entry in order to know that the previous entry was the last. And that delays global begin run or global begin lumi.\r\n\r\nThis probably will not help much for offline input sources because getNextItemType returns quickly.\r\n\r\nThe Framework will detect the case where a source falsely declares an item is the last run or lumi entry. It will throw an exception indicating a bug in the InputSource.\r\n\r\nThis delay was noticed when investigating issue #42931, but this PR does not address either of the problems listed there.\r\n\r\nThere are some minor changes in the InputSource interface. The getNextItemType function now returns an object of type ```ItemTypeInfo``` instead of the enum ItemType. Also, the ItemType enum is changed to be an ```enum class``` (more of a style modernization, I could back that out if requested).\r\n\r\n#### PR validation:\r\n\r\nThree new unit tests are added for this feature. Existing core unit tests pass. Limited runTheMatrix passes.\r\n\r\nManually, you can also see the delay vanishes in the log file of one of the unit tests, but it is difficult to turn that into a pass/fail criteria as the timing of execution can vary and we don't want tests that occasionally fail due to timing variations.", "branch": "master", "changed_files": 32, "comments": 4, "commits": 1, "created_at": "1701382007", "deletions": 244, "labels": ["dqm-pending", "core-pending", "pending-signatures", "tests-rejected", "orp-pending", "code-checks-approved"], "milestone": "CMSSW_14_0_X", "number": 43457, "release-notes": [], "review_comments": 0, "state": "open", "title": "Allow an InputSource to declare a run/lumi is the last to be merged", "updated_at": "1701392355", "user": "wddgit"}