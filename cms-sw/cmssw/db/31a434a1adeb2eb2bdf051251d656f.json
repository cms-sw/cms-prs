{"additions": 24950, "auther_ref": "l1t-alexx-VertexFinder_Jan_120X", "auther_sha": "7b90fa7182e084338d474a381bc0a10295a44e00", "author": "cecilecaillol", "body": "#### PR description:\r\nThis pull request includes:\r\n\r\nAn EDProducer that implements the primary-vertex-finding algorithms investigated for the L1T Interim TDR.\r\nThe EDAnalyser that was used to study the performance of these algorithms.\r\nThe Ntupler for analysis of vertexing algorithms.\r\n\r\nThe code for all of these is fully contained within L1Trigger/VertexFinder, and the l1tVertexFinder namespace; however of course in principle the name of this directory & namespace could be changed to conform to standard conventions.\r\n\r\nA few more details on the EDProducer ...\r\n\r\nSource code: interface/VertexProducer.h & plugins/VertexProducer.cc\r\nIt creates a l1t::VertexCollection, which is based on the L1T vertex data format class\r\nl1vertices - vector of all vertices found by the algo defined in the Python config (default config uses \"DBSCAN\" algo)\r\nPython config fragment (to be used by default for downstream algos): python/VertexProducer_cff.py\r\nParameter values are set to run DBSCAN vertex-finding algo\r\nOther vertexing-finding algorithms can be run by changing the value of the Algorithm parameter in the VertexReconstruction parameter set.\r\n\r\nApart from that EDProducer, the other files in this pull request are:\r\n\r\nHeader + .cc files for AlgoSettings, L1Track, RecoVertex and `VertexFinder classes that are used by the vertex producer itself\r\ninterface/selection.h & src/selection.cc : Contains implementation of getPrimaryVertex function, that currently identifies highest-sum-pT vertex in vector of vertex objects.\r\nplugins/VertexAnalyzer.cc : Implements the EDAnalyzer that we use to study the performance of vertex-finding algorithms\r\nHeader + .cc files for classes used by the EDAnalyzer: L1TrackTruthMatched, RecoVertexWithTP, Stub & TP\r\n\r\n\r\n#### PR validation:\r\n\r\nThis code had undergone clang-tidy and clang-format checks. It has been validated to make sure it performs as it did on the CMSSW_10_1_5 integration branch. There are still some performance issues (speed) with the EDAnalyzer and ntuple maker, but these can be worked out in a later PR. The core functionality of the vertexing (EDProducer) performs quite well.\r\n\r\nRebasing of https://github.com/cms-l1t-offline/cmssw/pull/874\r\n\r\n#### if this PR is a backport please specify the original PR and why you need to backport that PR:\r\n\r\nRebasing of https://github.com/cms-l1t-offline/cmssw/pull/874\r\n", "branch": "master", "changed_files": 545, "closed_at": "1621252897", "comments": 42, "commits": 421, "created_at": "1620042301", "deletions": 8425, "labels": ["alca-pending", "analysis-pending", "code-checks-approved", "core-pending", "daq-pending", "db-pending", "dqm-pending", "generators-pending", "geometry-pending", "hlt-pending", "l1-pending", "operations-pending", "orp-pending", "pdmv-pending", "pending-signatures", "reconstruction-pending", "simulation-pending", "tests-pending", "upgrade-pending", "xpog-pending"], "milestone": "CMSSW_12_0_X", "number": 33609, "release-notes": [], "review_comments": 28, "state": "closed", "title": "L1T phase-2: Add the Phase2 L1T VertexFinder", "updated_at": "1621253303", "user": "cecilecaillol"}