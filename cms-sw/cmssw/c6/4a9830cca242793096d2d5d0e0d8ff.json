{"additions": 1865, "auther_ref": "DQMStore_developments_100x", "auther_sha": "8c376dbc16b116ebf2059ab8f27c95b0914d8c9d", "author": "fwyzard", "body": "### Let the DQMStore delete unused MEs independently from the output modules\r\n\r\nThe multithreaded `DQMStore` can create a global copy of each by-lumi ME after each lumisection, in order to merge the stream MEs and write them out.  \r\nDeleting these MEs has been left to the `DQMFileSaver` or `DQMOutputModule`.  \r\nThis has the disadvantage that\r\n  - multiple file savers or output modules are not supported;\r\n  - if a job runs any DQM modules without a file saver or output module, the MEs are never deleted, leaking memory.\r\n\r\nThis PR moves the call to `deleteUnusedLumiHistograms` into the `DQMStore` itself, via the postGlobalEndLumi transition, solving both problems.\r\n\r\n## Support global per-lumisection MEs\r\n\r\nTo save memory, it is desirable to introduce thread-safe global `MonitorElements`, with the only restriction that only one lumisection can be processed at a given time.\r\n\r\nThis PR introduces the code changes in order to support global, per-lumisection MEs:\r\n  - explicitly mark the merged MEs to be deleted at the end of each lumisection, instead of relying on the global vs. stream distinction\r\n  - reset (but not delete) global per-lumi MEs at the beginning of each lumisection\r\n  - let the various DQM file savers write the global per-lumi MEs\r\n\r\n## Support histograms with concurrent filling\r\n\r\nAdd a `ConcurrentMonitorElement` wrapper around the `MonitorElement` class that exposes a concurrent filling interface:\r\n  - `fill()` is marked as `const` to indicate concurrency, and uses a lock internally to protect the underlying ROOT object;\r\n  - `setTitle()`, `setAxis...()` etc. methods are non-`const`, to be used only while the `ConcurrentMonitorElement` is being booked;\r\n  - *no* direct access to the underlying ROOT object.\r\n\r\nAdd a `ConcurrentBooker` class that extends the `IBooker` interface to return `ConcurrentMonitorElement`s instead of `MonitorElement`s, and a `bookConcurrentTransaction()` call to make use of it.\r\n\r\nImplement a base class for \"global\" DQM analyzers, using the `ConcurrentBooker` and `bookConcurrentTransaction()` calls.\r\n\r\n---\r\n\r\nFor a quick tutorial about using these new classes, see [How to migrate a DQMEDanalyzer to a DQMGlobalEDAnalyzer](https://gist.github.com/fwyzard/9831080ea903e571c69b8b3f92632f9b).", "branch": "master", "changed_files": 73, "closed_at": "1513688618", "comments": 74, "commits": 8, "created_at": "1512548991", "deletions": 1410, "labels": ["code-checks-approved", "comparison-available", "dqm-approved", "fully-signed", "orp-approved", "tests-approved"], "merge_commit_sha": "3c3c015d5978446f98f82e4d825e94623c1b6bc3", "merged_at": "1513688618", "merged_by": "cmsbuild", "milestone": "CMSSW_10_0_X", "number": 21652, "release-notes": [], "review_comments": 5, "state": "closed", "title": "DQM-related developments, fixes and improvements (master branch)", "updated_at": "1513764639", "user": "fwyzard"}