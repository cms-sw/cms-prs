{"additions": 11, "auther_ref": "FixMuonMVAVariables_142X", "auther_sha": "71143aedf52fa8d7f1116b46c2d7361664b93cfd", "author": "namapane", "body": "#### PR description:\r\nThis PR is a follow up of #45754, moved to 14_2_X as requested.\r\n\r\nWe recently realized that the inputs for the [muonPROMPTMVA ](https://github.com/cms-sw/cmssw/blob/d34e3af53bf3f1fe6e8041c0980f8b3a6d2f064e/PhysicsTools/NanoAOD/python/muons_cff.py#L98-L112) (and likewise for [electronPROMPTMVA](https://github.com/cms-sw/cmssw/blob/635e97f877faa01f2c8f43b55de2e72edf2957f0/PhysicsTools/NanoAOD/python/electrons_cff.py#L273-L285)) are _almost_, but not fully recoverable from nanoAODs. This means that it is not possible to check data/MC agreement for input variables from central productions, nor to test new trainings. \r\nThis can be fixed easily and cheaply with two small changes (using muons for illustration, same applies to electrons):  \r\n\r\n- add 1 float variable `Muon_jetDF`, corresponding to the [`LepGood_jetDF`](https://github.com/cms-sw/cmssw/blob/d34e3af53bf3f1fe6e8041c0980f8b3a6d2f064e/PhysicsTools/NanoAOD/python/muons_cff.py#L106) MVA input\r\n- fix an inconsistency in the definition of [`Muon_jetRelIso`](https://github.com/cms-sw/cmssw/blob/d34e3af53bf3f1fe6e8041c0980f8b3a6d2f064e/PhysicsTools/NanoAOD/python/muons_cff.py#L179) with respect to the variable that is intended to correspond to, [`LepGood_jetPtRatio`](https://github.com/cms-sw/cmssw/blob/d34e3af53bf3f1fe6e8041c0980f8b3a6d2f064e/PhysicsTools/NanoAOD/python/muons_cff.py#L107). With the current definition, `jetRelIso = (1/ptRatio-1)` if a jet is present, `pfRelIso04_all` otherwise. Unfortunately the actual MVA input variable is defined in a slightly different way, with a `max(ptRatio, 1.5)` applied in the case a jet is associated. Since it is not possible to figure out unambiguously if this was the case, recovering the exact definition of `LepGood_jetPtRatio` that was used for the MVA is tricky.\r\n\r\nOur proposal is to store `jetRelIso=(1/ptRatio-1)` but with a default of -1 if no jet is matched. This has some advantages:\r\n\r\n- much easier to recover the MVA input variable correctly\r\n- Marks the case of no jet is found unambiguously (-1)\r\n- Does not mix `ptRatio` with `pfRelIso04_all`, which is already available in its own variable. This improves clarity and also saves some disk space as -1 gets compressed better\r\n- if anybody needs `Muon_jetRelso` as defined now, it can be computed easily as well (just need to pick isolation when no jet is present\r\n- Same considerations for the corresponding `Electron` variables. In this case, `Electron_pfRelIso04_all` is also added since this variable, used in `Electron_jetRelso`, was not yet present.\r\n\r\n#### PR validation:\r\n- tested processing a DYJets sample and checking distributions, and sizes with inspectNanoFile.py [[size report](https://amapane.web.cern.ch/nano_mu/DYJets_nano_size.html)]\r\n- The addition of  `Muon_jetDF` and `Electron_jetDF` cost 2.2 b/item each\r\n- `Muon_jetPtRatio` and `Electron_jetPtRatio` space is take less space (-0.2 and -0.1 b/item respectively), because we now store -1 when no associated jet is found\r\n- `Electron_pfRelIso04_all` costs 2.5 b/item\r\n- The overall effect of this proposed fix is +2.0 b/muon and +4.6 b/electron.\r\n\r\n\r\n", "branch": "master", "changed_files": 3, "comments": 1, "commits": 1, "created_at": "1725277128", "deletions": 6, "labels": ["pending-signatures", "tests-pending", "orp-pending", "code-checks-pending", "xpog-pending"], "milestone": "CMSSW_14_2_X", "number": 45860, "release-notes": [], "review_comments": 0, "state": "open", "title": "Minor fixes to variables for lepton MVA", "updated_at": "1725277156", "user": "namapane"}