{"additions": 21, "auther_ref": "TrackFindingTracklet-cpp20-conformance", "auther_sha": "c1580c857f90b5607eefc4608b31df92b7cdfd78", "author": "dan131riley", "body": "#### PR description:\r\n\r\nIn c++20, std::accumulate was changed so that the type of the initial value must be an rvalue and the preferred signature for the binary operation is `Ret fun(const Type1 &a, const Type2 &b);`.  In a couple of places in L1Trigger/TrackFindingTracklet, the binary op was modifying the running value argument, which isn't necessary, doesn't conform to the preferred function signature, and breaks in c++20 because it isn't an rvalue.  This PR fixes those compilation problems in the CPP20 builds and removes a few C-style casts.\r\n\r\nIn addition, in LTO builds we get a warning\r\n```\r\nIn function '_S_ref',\r\n    inlined from 'operator[]' at /data/cmsbld/jenkins/workspace/build-any-ib/w/el8_amd64_gcc12/external/gcc/12.3.1-40d504be6370b5a30e3947a6e575ca28/include/c++/12.3.1/array:219:25,\r\n    inlined from 'benddecode' at /data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/d190cc84d43df9162e76772777821e0e/opt/cmssw/el8_amd64_gcc12/cms/cmssw/CMSSW_14_0_X_2024-01-01-2300/src/L1Trigger/TrackFindingTracklet/interface/Settings.h:446:42,\r\n    inlined from 'initBendMatch' at /data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/d190cc84d43df9162e76772777821e0e/opt/cmssw/el8_amd64_gcc12/cms/cmssw/CMSSW_14_0_X_2024-01-01-2300/src/L1Trigger/TrackFindingTracklet/src/TrackletLUT.cc:955:42:\r\n  /data/cmsbld/jenkins/workspace/build-any-ib/w/el8_amd64_gcc12/external/gcc/12.3.1-40d504be6370b5a30e3947a6e575ca28/include/c++/12.3.1/array:61:36: warning: array subscript 18446744071562067968 is above array bounds of 'const struct array[16]' [-Warray-bounds]\r\n    61 |       { return const_cast<_Tp&>(__t[__n]); }\r\n      |                                    ^\r\n/data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/d190cc84d43df9162e76772777821e0e/opt/cmssw/el8_amd64_gcc12/cms/cmssw/CMSSW_14_0_X_2024-01-01-2300/src/L1Trigger/TrackFindingTracklet/interface/TrackletLUT.h: In member function 'initBendMatch':\r\n/data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/d190cc84d43df9162e76772777821e0e/opt/cmssw/el8_amd64_gcc12/cms/cmssw/CMSSW_14_0_X_2024-01-01-2300/src/L1Trigger/TrackFindingTracklet/interface/TrackletLUT.h:120:21: note: while referencing 'settings_'\r\n  120 |     const Settings& settings_;\r\n      |                     ^\r\n```\r\nThis appears to be a false positive, where the LTO optimizer is concluding that it's possible a -1 could be passed to an unsigned and thus interpreted as a very large value.  This PR adds an assertion that this won't happen, which quiets the LTO warning.\r\n\r\n#### PR validation:\r\n\r\nPurely technical fix.  Compiles, should have no effect on performance.  A limited matrix was run to verify that the new assertion doesn't fire in normal workflows.", "branch": "master", "changed_files": 7, "comments": 4, "commits": 2, "created_at": "1704565867", "deletions": 18, "labels": ["l1-pending", "pending-signatures", "tests-pending", "orp-pending", "code-checks-approved"], "milestone": "CMSSW_14_0_X", "number": 43673, "release-notes": [], "review_comments": 0, "state": "open", "title": "fix c++20 compilation errors in L1Trigger/TrackFindingTracklet", "updated_at": "1704566871", "user": "dan131riley"}