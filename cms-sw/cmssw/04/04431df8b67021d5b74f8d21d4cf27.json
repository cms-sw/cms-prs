{"additions": 32, "auther_ref": "mm_dev_optimize_SiPixelCompareRecHits", "auther_sha": "e54723e43f097869c94beb6f06aaae7e599ae305", "author": "mmusich", "body": "#### PR description:\r\n\r\nThis PR is a light optimization of the module `SiPixelCompareRecHits` that needs to run in the HLT menu because of issue https://github.com/cms-sw/cmssw/issues/44700. \r\nThe optimization mainly lies in grouping the hits in `rhsoaTar` by their `detectorIndex()` in a hash map. \r\nThis way, for each hit in `rhsoaRef`, it is only needed to search for matching hits in `rhsoaTar` with the same `detectorIndex`. This reduces the number of unnecessary comparisons.\r\nAdditionally replaced `std::ceil` with integer division to avoid costly floating-point operations for calculating `sizeX` and `sizeY`.\r\n\r\n#### PR validation:\r\n\r\nI've run the following script on `lxplus-gpu`:\r\n\r\n```bash\r\n#!/bin/bash -ex\r\n\r\nstartDir=$PWD\r\n\r\nmkdir vanilla\r\ncd vanilla\r\nscram p CMSSW CMSSW_14_2_X_2024-11-04-2300\r\ncd CMSSW_14_2_X_2024-11-04-2300/src\r\neval `scramv1 runtime -sh`\r\naddOnTests.py -t hlt_data_GRun\r\nsleep 10\r\ncd $startDir\r\nmkdir mods\r\ncd mods\r\nscram p CMSSW CMSSW_14_2_X_2024-11-04-2300\r\ncd CMSSW_14_2_X_2024-11-04-2300/src\r\neval `scramv1 runtime -sh`\r\ngit cms-addpkg DQM/SiPixelHeterogeneous\r\ngit cherry-pick e54723e43f097869c94beb6f06aaae7e599ae305\r\nscram b -j 20\r\naddOnTests.py -t hlt_data_GRun\r\n```\r\n\r\nThe timing advantage is not measured precisely, but roughly speaking it's a factor 40.\r\n\r\n```bash\r\n$ more testing/vanilla/CMSSW_14_2_X_2024-11-04-2300/src/addOnTests/hlt_data_GRun/step2.log | grep hltSiPixelRecHitsSoACompareGPUvsCPU | grep TimeReport\r\nTimeReport   0.353061     0.353061  hltSiPixelRecHitsSoACompareGPUvsCPU\r\nTimeReport   0.353061     0.353061     0.353061  hltSiPixelRecHitsSoACompareGPUvsCPU\r\n$ more testing/mods/CMSSW_14_2_X_2024-11-04-2300/src/addOnTests/hlt_data_GRun/step2.log | grep hltSiPixelRecHitsSoACompareGPUvsCPU | grep TimeReport\r\nTimeReport   0.008550     0.008550  hltSiPixelRecHitsSoACompareGPUvsCPU\r\nTimeReport   0.008550     0.008550     0.008550  hltSiPixelRecHitsSoACompareGPUvsCPU\r\n```\r\n\r\nThen harvested the resulting `DQMIO.root` output files with the file in [1] and finally compared the results with the macro in [2].\r\n\r\nI have put the resulting outputs at [this link](https://marcomusich.web.cern.ch/TSG/optimizeCompareRechits/).\r\n\r\n#### If this PR is a backport please specify the original PR and why you need to backport that PR. If this PR will be backported please specify to which release cycle the backport is meant for:\r\n\r\nNot a backport, might be backported to CMSSW_14_1_X if accepted.\r\n\r\n----\r\n\r\n[1]\r\n<details>\r\n  <summary>Click me</summary>\r\n\r\n```python\r\nimport FWCore.ParameterSet.Config as cms\r\n\r\n## CLI parser\r\nimport argparse\r\nimport sys\r\n\r\nparser = argparse.ArgumentParser(\r\n    prog = 'cmsRun '+sys.argv[0]+' --',\r\n    description = 'Configuration file to run the DQMFileSaver on DQMIO input files.',\r\n    formatter_class = argparse.ArgumentDefaultsHelpFormatter\r\n)\r\n\r\nparser.add_argument('-t', '--nThreads', type = int, help = 'Number of threads',\r\n                    default = 4)\r\n\r\nparser.add_argument('-s', '--nStreams', type = int, help = 'Number of EDM streams',\r\n                    default = 0)\r\n\r\nparser.add_argument('-i', '--inputFiles', nargs = '+', help = 'List of DQMIO input files',\r\n                    default = ['file:testHLTFiltersDQMonitor_DQMIO.root'])\r\n\r\nargs = parser.parse_args()\r\n\r\n# Process\r\nprocess = cms.Process('HARVESTING')\r\n\r\nprocess.options.numberOfThreads = args.nThreads\r\nprocess.options.numberOfStreams = args.nStreams\r\nprocess.options.numberOfConcurrentLuminosityBlocks = 1\r\n\r\n# Source (DQM input)\r\nprocess.source = cms.Source('DQMRootSource',\r\n  fileNames = cms.untracked.vstring(sorted(list(set([f'file:{foo}' for foo in args.inputFiles]))))\r\n)\r\n\r\n# DQMStore (Service)\r\nprocess.load('DQMServices.Core.DQMStore_cfi')\r\n\r\n# MessageLogger (Service)\r\nprocess.load('FWCore.MessageLogger.MessageLogger_cfi')\r\n\r\n# Output module (file in ROOT format)\r\nfrom DQMServices.Components.DQMFileSaver_cfi import dqmSaver as _dqmSaver\r\nprocess.dqmSaver = _dqmSaver.clone(\r\n  workflow = '/DQMOffline/Trigger/'+process.name_()\r\n)\r\n\r\n# EndPath\r\nprocess.endp = cms.EndPath(\r\n    process.dqmSaver\r\n)\r\n```\r\n</details>\r\n\r\n[2]\r\n\r\n<details>\r\n  <summary>Click me</summary>\r\n\r\n```C++\r\n#include <TFile.h>\r\n#include <TH1.h>\r\n#include <TH2.h>\r\n#include <TCanvas.h>\r\n#include <TKey.h>\r\n#include <TDirectory.h>\r\n#include <TSystem.h>\r\n#include <string>\r\n\r\nvoid comparePlots(const char* file1 = \"DQM_vanilla.root\", const char* file2 = \"DQM_mod.root\") {\r\n    // Open the ROOT files\r\n    TFile *f1 = TFile::Open(file1);\r\n    TFile *f2 = TFile::Open(file2);\r\n    if (!f1 || !f2 || f1->IsZombie() || f2->IsZombie()) {\r\n        printf(\"Error opening files.\\n\");\r\n        return;\r\n    }\r\n\r\n    // Define the target directory path\r\n    const char* targetDir = \"DQMData/Run 386071/SiPixelHeterogeneous/Run summary/PixelRecHitsCompareGPUvsCPU\";\r\n\r\n    // Navigate to the target directory in each file\r\n    TDirectory *dir1 = (TDirectory*)f1->Get(targetDir);\r\n    TDirectory *dir2 = (TDirectory*)f2->Get(targetDir);\r\n    if (!dir1 || !dir2) {\r\n        printf(\"Directory %s not found in one or both files.\\n\", targetDir);\r\n        return;\r\n    }\r\n\r\n    // Create an output folder for the saved images if it doesn't exist\r\n    gSystem->Exec(\"mkdir -p output_images\");\r\n\r\n    // Loop over all keys (objects) in the directory\r\n    TIter next(dir1->GetListOfKeys());\r\n    TKey *key;\r\n    while ((key = (TKey*)next())) {\r\n        TObject *obj1 = key->ReadObj();\r\n        std::string objName = obj1->GetName();\r\n\r\n        // Check if the same object exists in the second file directory\r\n        TObject *obj2 = dir2->Get(objName.c_str());\r\n        if (!obj2) {\r\n            printf(\"Object %s not found in both files.\\n\", objName.c_str());\r\n            continue;\r\n        }\r\n\r\n        // Create a canvas for each comparison\r\n        TCanvas *canvas = new TCanvas((objName + \"_canvas\").c_str(), objName.c_str(), 1600, 800);\r\n\r\n\tif (obj1->InheritsFrom(\"TH2\") && obj2->InheritsFrom(\"TH2\")) {\r\n\t  // Juxtapose 2D histograms\r\n\t  TH2 *hist1 = (TH2*)obj1;\r\n\t  TH2 *hist2 = (TH2*)obj2;\r\n\t  \r\n\t  canvas->Divide(2, 1);\r\n\t  canvas->cd(1);\r\n\t  hist1->Draw(\"COLZ\");\r\n\t  canvas->cd(2);\r\n\t  hist2->Draw(\"COLZ\");\r\n        } else if (obj1->InheritsFrom(\"TH1\") && obj2->InheritsFrom(\"TH1\")) {\r\n            // Overlay 1D histograms\r\n\t  TH1 *hist1 = (TH1*)obj1;\r\n\t  TH1 *hist2 = (TH1*)obj2;\r\n\t  \r\n\t  hist1->SetLineColor(kBlue);\r\n\t  hist1->Draw(\"HIST\");\r\n\t  hist2->SetLineColor(kRed);\r\n\t  hist2->Draw(\"HIST SAME\");\r\n\t  \r\n\t  // Add a legend\r\n\t  TLegend *legend = new TLegend(0.7, 0.8, 0.9, 0.9);\r\n\t  legend->AddEntry(hist1, \"DQM_vanilla\", \"l\");\r\n\t  legend->AddEntry(hist2, \"DQM_mod\", \"l\");\r\n\t  legend->Draw();\r\n        } else {\r\n\t  printf(\"Skipping non-histogram or mismatched object types: %s\\n\", objName.c_str());\r\n\t  delete canvas;\r\n\t  continue;\r\n        }\r\n\r\n        // Save the canvas as a PNG file\r\n        std::string savePath = \"output_images/\" + objName + \".png\";\r\n        canvas->SaveAs(savePath.c_str());\r\n        delete canvas;  // Clean up canvas to avoid memory leaks\r\n    }\r\n\r\n    // Close the files\r\n    f1->Close();\r\n    f2->Close();\r\n    delete f1;\r\n    delete f2;\r\n\r\n    printf(\"Comparison plots saved in the output_images directory.\\n\");\r\n}\r\n```\r\n</details>", "branch": "master", "changed_files": 1, "comments": 7, "commits": 1, "created_at": "1730794540", "deletions": 13, "labels": ["dqm-pending", "pending-signatures", "tests-approved", "orp-pending", "code-checks-approved", "trk"], "milestone": "CMSSW_14_2_X", "number": 46604, "release-notes": [], "review_comments": 0, "state": "open", "title": "optimize `SiPixelCompareRecHits`", "updated_at": "1730807827", "user": "mmusich"}