{"additions": 75, "auther_ref": "productIDModuleTypeResolverWorkaround", "auther_sha": "2d853ef128f8d69666e0ff443ba9197d392cab7d", "author": "makortel", "body": "#### PR description:\r\n\r\nThis PR is a temporary workaround for the issue discussed in https://github.com/cms-sw/cmssw/issues/44643. In short, with an HLT menu that uses Alpaka modules, when some HLT processes use GPU and some do not, the fact that the different backends of Alpaka modules produce different transient data products cause the ProductIDs to be different between the CPU-only and CPU+GPU processes, and presently there is not enough metadata available in the final streamer file for the framework to keep properly track of the various indices, that leads to de-referencing of `edm::Ref` to fail in a subsequent job (for longer description see https://github.com/cms-sw/cmssw/issues/44643#issuecomment-2046098157).\r\n\r\nThis PR works around the problem by making a subset(*) of the Alpaka EDProducers on the CPU serial backend, for each \"device-side data product\" they produce (that in reality are the \"host-side data products\" directly) they register the production of the corresponding CUDA backend data product. This hack makes the CPU-serial and CUDA backend EDProducers to register the production of exactly the same data products, that leads to equal ProductIDs for the same data products between CPU-only and CPU+GPU jobs, circumventing the problem. \r\n\r\n(*) ECAL, PF, and phase1 Pixel EDProducers, that are either being used in the present HLT menu, or are planned to be used in the near future\r\n\r\nThe use of strings for the CUDA backend data products is ugly, but avoids the need to have a compile-time dependence on the CUDA backend code in the CPU serial backend code (I actually tried that first, but ran into compilation issues; probably our present build rules prevent the use of Alpaka CUDA backend types in the CPU serial backend code). At runtime the added explicit CUDA dependence will likely break on platforms that do not support CUDA (all our code directly depending on CUDA would be broken anyway, so the temporary loss of functionality seems acceptable).\r\n\r\nThis PR is intended to be reverted when the necessary metadata to deal with the different ProductIDs in different HLT processes (CPU-only vs. CPU+GPU) gets propagated to the framework), whose details are being discussed in https://github.com/cms-sw/cmssw/issues/44643 .\r\n\r\n#### PR validation:\r\n\r\nI ran the example HLT job in https://github.com/cms-sw/cmssw/issues/44643#issuecomment-2043314081 for 1 event without and with this PR with and without a GPU. Then I ran `edmProvDump --productIDEntry 0 -a <file>` for both output files, and compared the lines that contained `ProductID 2:` text (this shows the set of data products that are either stored in the file, or are ancestors of the stored data products, produced by the re-HLT process).\r\n\r\nWithout this PR the ProductIDs between CPU-only and CPU+GPU jobs show differences (https://github.com/cms-sw/cmssw/issues/44643#issuecomment-2043600494).\r\n\r\nWith this PR the ProductIDs between CPU-only and CPU+GPU jobs are the same.\r\n\r\n#### If this PR is a backport please specify the original PR and why you need to backport that PR. If this PR will be backported please specify to which release cycle the backport is meant for:\r\n\r\nTo be backported to 14_0_X.\r\n", "branch": "master", "changed_files": 11, "comments": 6, "commits": 1, "created_at": "1712773352", "deletions": 6, "labels": ["reconstruction-pending", "alca-pending", "pending-signatures", "orp-pending", "tests-started", "urgent", "code-checks-approved", "heterogeneous-pending", "tracking", "trk"], "milestone": "CMSSW_14_1_X", "number": 44698, "release-notes": [], "review_comments": 0, "state": "open", "title": "Workaround to produce exactly same data products in Serial and CUDA backends in Alpaka modules possibly used at HLT", "updated_at": "1712788032", "user": "makortel"}